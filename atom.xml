<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小潘同学的教室</title>
  
  <subtitle>黎明来临之前没有人知道还要等多久</subtitle>
  <link href="https://xiaopantongxue816.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiaopantongxue816.github.io/"/>
  <updated>2020-09-15T09:23:00.460Z</updated>
  <id>https://xiaopantongxue816.github.io/</id>
  
  <author>
    <name>小潘同学</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你知道吗？</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/15/%E4%BD%A0%E7%9F%A5%E9%81%93%E5%90%97%EF%BC%9F/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/15/%E4%BD%A0%E7%9F%A5%E9%81%93%E5%90%97%EF%BC%9F/</id>
    <published>2020-09-15T08:34:04.000Z</published>
    <updated>2020-09-15T09:23:00.460Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>某一个时刻是对的某一时刻是错的，因为世界是充满悖论的，所以它美丽又丑恶</strong></p><hr><ul><li>“你不可能真正了解谁，除非你进入他的鞋子，陪他走上一段。”  「杀死一只知更鸟」</li><li>很多事不是你看不惯，是你做不到</li><li>知识在于积累呀！</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;某一个时刻是对的某一时刻是错的，因为世界是充满悖论的，所以它美丽又丑恶&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;“你不可能真正了解谁，除非你进入他的鞋子，陪他走上一段。”  「杀死一只知更鸟」&lt;/li&gt;
&lt;li&gt;很多事不是你看不惯，是</summary>
      
    
    
    
    <category term="生活" scheme="https://xiaopantongxue816.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="语录" scheme="https://xiaopantongxue816.github.io/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>我的电影记录</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/15/%E6%88%91%E7%9A%84%E7%94%B5%E5%BD%B1%E8%AE%B0%E5%BD%95/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/15/%E6%88%91%E7%9A%84%E7%94%B5%E5%BD%B1%E8%AE%B0%E5%BD%95/</id>
    <published>2020-09-15T07:37:16.000Z</published>
    <updated>2020-09-15T08:30:44.539Z</updated>
    
    <content type="html"><![CDATA[<p>​    从大三开始，因为要专注的去学一些东西，和伙伴们在一起容易消磨时间。所以开始了一个人在图书馆，宿舍之间两点一线的生活，大概是那个时候开始喜欢去电影院看电影的，之前也去但是意义不同了，就像是去补充能量一样，每周都要去的，看到喜欢的特别开心，不小心挑到无聊的电影会特别沮丧（毕业最难过的就是享受不到学校那边19.9的白菜价了），给自己每周末留点影子，记录一下(#^.^#)</p><hr><p>从到上海开始算起吧，作为毕业工作的新起点，作为2020年真正的开始</p><hr><h1 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h1><ol><li>2020-08-08 <strong>星际穿越</strong>（为了去体验一把IMAX，没想到因为疫情能看到一部分重映的电影，想念过年午夜场看唐探三爆笑的气氛了）</li><li>2020-08-22 <strong>八佰</strong> （很有泪点，不过就像是看古装剧的时候看到了良平铺子或者三只松鼠的广告，有点奇奇怪怪，当时看完就像重温建国三部曲了）</li><li>2020-08-29 <strong>盗梦空间</strong>（嗯，也是看过的了，诺兰大神真的很喜欢玩重力和时间）</li><li>2020-09-05 <strong>信条</strong>（咋说呢，就这么巧，正好碰上新作上映，回来找了几个电影解析半懵半懂的，希望后边有up主可以出一个我看得懂的o(╥﹏╥)o）</li><li>2020-09-06 <strong>我在时间尽头等你</strong>（这个完全就是意外，错买的票，哎，更适合小孩看，我不再是爱情至上的年纪了，总之看得比较无聊）</li><li>2020-09-12 <strong>花木兰</strong>（虽然我喜欢漂亮姐姐，但是这个这个连我都想喷了，一般我觉得不好看的看完都会比较平静，这版外国人拍的简直了，这电影就是在骗投资上的钱的吧。因为是为了陪同事去的，我想到它会不太好看，不过没想到它这么烂…….以后坚决只看我想看的，绝不动摇军心！！！）</li><li></li></ol><h1 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    从大三开始，因为要专注的去学一些东西，和伙伴们在一起容易消磨时间。所以开始了一个人在图书馆，宿舍之间两点一线的生活，大概是那个时候开始喜欢去电影院看电影的，之前也去但是意义不同了，就像是去补充能量一样，每周都要去的，看到喜欢的特别开心，不小心挑到无聊的电影会特别沮</summary>
      
    
    
    
    <category term="生活" scheme="https://xiaopantongxue816.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="点滴" scheme="https://xiaopantongxue816.github.io/tags/%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>统计linuxCPU内存</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/09/%E7%BB%9F%E8%AE%A1linuxCPU%E5%86%85%E5%AD%98/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/09/%E7%BB%9F%E8%AE%A1linuxCPU%E5%86%85%E5%AD%98/</id>
    <published>2020-09-09T02:30:41.000Z</published>
    <updated>2020-09-15T07:33:43.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="snmp协议（调用python）"><a href="#snmp协议（调用python）" class="headerlink" title="snmp协议（调用python）"></a>snmp协议（调用python）</h1><p><strong>结果输出：</strong></p><pre><code class="bash">[root@localhost cpu_test]# python3 cpu_SNMP.py ==========192.168.220.10==========系统信息Linux localhost.localdomain 3.10.0-1127.el7.x86_64 #1 SMP Tue Mar 31 23:36:51 UTC 2020 x86_64系统负载load(5min):  0.12 ,load(10min):  0.04 ,load(15min):  0.05网卡流量lo : RX: 19524.91 KB       TX: 19524.91 KB ens33 : RX: 61088.05 KB       TX: 6388.18 KB 内存使用率Mem_Used = 86.92%            Swap_Used = 13.54%         run time: 0.23 s[root@localhost cpu_test]# </code></pre><p>安装参考：</p><p><a href="https://www.linuxprobe.com/snmp-update.html">https://www.linuxprobe.com/snmp-update.html</a> </p><p><a href="https://www.cnblogs.com/yujianadu/p/10395285.html">https://www.cnblogs.com/yujianadu/p/10395285.html</a></p><p>配置参考：</p><p><a href="https://jingyan.baidu.com/article/066074d64b303ac3c21cb0ef.html">https://jingyan.baidu.com/article/066074d64b303ac3c21cb0ef.html</a></p><p>网上原始参考代码：<a href="https://blog.csdn.net/yannanxiu/article/details/55045108?utm_source=blogxgwz0&amp;utm_medium=distribute.pc_relevant.none-task-blog-title-3&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/yannanxiu/article/details/55045108?utm_source=blogxgwz0&amp;utm_medium=distribute.pc_relevant.none-task-blog-title-3&amp;spm=1001.2101.3001.4242</a></p><h3 id="安装-snmp（CentOS7）"><a href="#安装-snmp（CentOS7）" class="headerlink" title="安装 snmp（CentOS7）"></a><strong>安装 snmp（CentOS7）</strong></h3><p>查看一下Linux主机有没有安装了snmp服务</p><pre><code>rpm -qa |grep snmp</code></pre><p>如果安装了会出现下边一些东西：</p><pre><code class="ssh">net-snmp-5.5-49.el6.i686net-snmp-libs-5.5-49.el6.i686php-snmp-5.3.3-27.el6_5.i686</code></pre><p>如果没有就执行命令安装：</p><pre><code class="ssh">yum install -y net-snmpyum install -y net-snmp-develyum install -y net-snmp-libsyum install -y net-snmp-perlyum install -y net-snmp-utilsyum install -y mrtg</code></pre><p><strong>启动</strong></p><p>再次查看一下Linux主机有没有安装了snmp服务，确保安装成功后启动</p><pre><code class="ssh">service snmpd start </code></pre><p>这个时候也许会报错：</p><pre><code class="ssh">Redirecting to /bin/systemctl start snmpd.service</code></pre><p>上网查了一下说是使用的是Centos7或者 Fedora高版本，启用服务变化了</p><pre><code class="ssh">cd /binsystemctl start snmpd.service</code></pre><p>查看状态</p><pre><code class="ssh"># running了service snmpd status</code></pre><p><strong>配置</strong></p><p>（yum安装snmpd的配置文件为/etc/snmp/snmpd.conf ，备份一份snmpd.conf.bak，下边的配置我没有确认不配置可不可以执行，最好还是配置下吧，配置后记得<strong>重启snmp服务</strong>）</p><pre><code class="ssh">cp /etc/snmp/snmpd.conf /etc/snmp/snmpd.conf.bakvim /etc/snmp/snmpd.conf</code></pre><pre><code class="ssh">1、配置snmp团体名（默认是public）: com2sec notConfigUser default public 建议更改public为您使用的团体名称2、将access notConfigGroup &quot;&quot; any noauth exact systemview none none更改为access notConfigGroup &quot;&quot; any noauth exact all none none3、将如下两行前面的注释去掉## incl/excl subtree maskview all included .1 80## -or just the mib2 tree-view mib2 included .iso.org.dod.internet.mgmt.mib-2 fc4、将下面一行前面的注释去掉#access notConfigGroup &quot;&quot; any noauth exact roview rwview noneaccess notConfigGroup &quot;&quot; any noath exact mib2 none none</code></pre><h3 id="重启snmpd服务"><a href="#重启snmpd服务" class="headerlink" title="重启snmpd服务"></a><strong>重启snmpd服务</strong></h3><pre><code class="ssh">[root@localhost ~]# cd /bin[root@localhost bin]# systemctl restart snmpd.service</code></pre><p><strong>把服务加到开机启动中，开机自动运行</strong></p><pre><code class="ssh">[root@localhost bin]# chkconfig snmpd on </code></pre><p><strong>查看是否已经成功启动：</strong></p><pre><code class="ssh">[root@localhost bin]# netstat -ln | grep 161udp        0      0 0.0.0.0:161             0.0.0.0:*   </code></pre><pre><code class="ssh">[root@localhost ~]# snmpwalk -v 2c -c public 192.168.220.10 1.3.6.1.2.1.1.1Timeout: No Response from 192.168.220.10[root@localhost ~]# snmpwalk -v 2c -c pjy 192.168.220.10 1.3.6.1.2.1.1.1      SNMPv2-MIB::sysDescr.0 = STRING: Linux localhost.localdomain 3.10.0-1127.el7.x86_64 #1 SMP Tue Mar 31 23:36:51 UTC 2020 x86_64</code></pre><p><strong>python代码</strong></p><pre><code class="python"># coding=utf-8&quot;&quot;&quot;filename:snmp_test.py说明：使用系统的 snmpwalk 来查询设备信息，需要先安装 snmp代码 Windows 和 Linux 通用Windows cmd 调用示例：snmpwalk -v 2c -c public 127.0.0.1 1.3.6.1.2.1.1.1Windows cmd 下查看某主机（192.168.132.130）信息示例：snmpwalk -v 2c -c public 192.168.132.130 1.3.6.1.2.1.1.1&quot;&quot;&quot;import reimport osimport timeimport platformif &#39;Windows&#39; == platform.system():    hosts = [&#39;192.168.132.130&#39;]else:    # 在虚拟机运行时则查看本地    hosts = [&#39;127.0.0.1&#39;]def snmpWalk(host, oid):    result = os.popen(&#39;snmpwalk -v 2c -c public &#39; + host + &#39; &#39; + oid).read().split(&#39;\n&#39;)[:-1]    return result# ------------------------------------------------------------# 获取负载信息# ------------------------------------------------------------def getSystem(host):    system = &#39;:&#39;.join(snmpWalk(host, &#39;system&#39;)[0].split(&#39;:&#39;)[3:]).strip()    return system# ------------------------------------------------------------# ------------------------------------------------------------# 获取负载信息# ------------------------------------------------------------def getLoad(host, loid):    &quot;&quot;&quot;系统负载&quot;&quot;&quot;    load_oids = &#39;1.3.6.1.4.1.2021.10.1.3.&#39; + str(loid)    return snmpWalk(host, load_oids)[0].split(&#39;:&#39;)[3]def getLoads(host):    load1 = getLoad(host, 1)    load10 = getLoad(host, 2)    load15 = getLoad(host, 3)    return load1, load10, load15# ------------------------------------------------------------# ------------------------------------------------------------# 获取网卡流量# ------------------------------------------------------------def getNetworkDevices(host):    &quot;&quot;&quot;获取网络设备信息&quot;&quot;&quot;    device_mib = snmpWalk(host, &#39;RFC1213-MIB::ifDescr&#39;)    device_list = []    for item in device_mib:        device_list.append(item.split(&#39;:&#39;)[3].strip())    return device_listdef getNetworkData(host, oid):    &quot;&quot;&quot;获取网络流量&quot;&quot;&quot;    data_mib = snmpWalk(host, oid)    data = []    for item in data_mib:        byte = float(item.split(&#39;:&#39;)[3].strip())        data.append(str(round(byte / 1024, 2)) + &#39; KB&#39;)    return datadef getNetworkInfo(host):    device_list = getNetworkDevices(host)    # 流入流量    inside = getNetworkData(host, &#39;IF-MIB::ifInOctets&#39;)    # 流出流量    outside = getNetworkData(host, &#39;IF-MIB::ifOutOctets&#39;)    return device_list, inside, outside# ------------------------------------------------------------# ------------------------------------------------------------# 内存使用率# ------------------------------------------------------------def getSwapTotal(host):    swap_total = snmpWalk(host, &#39;UCD-SNMP-MIB::memTotalSwap.0&#39;)[0].split(&#39; &#39;)[3]    return swap_totaldef getSwapUsed(host):    swap_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::memAvailSwap.0&#39;)[0].split(&#39; &#39;)[3]    swap_total = getSwapTotal(host)    swap_used = str(round(((float(swap_total) - float(swap_avail)) / float(swap_total)) * 100, 2)) + &#39;%&#39;    return swap_useddef getMemTotal(host):    mem_total = snmpWalk(host, &#39;UCD-SNMP-MIB::memTotalReal.0&#39;)[0].split(&#39; &#39;)[3]    return mem_totaldef getMemUsed(host):    mem_total = getMemTotal(host)    mem_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::memAvailReal.0&#39;)[0].split(&#39; &#39;)[3]    mem_used = str(round(((float(mem_total) - float(mem_avail)) / float(mem_total)) * 100, 2)) + &#39;%&#39;    return mem_useddef getMemInfo(host):    mem_used = getMemUsed(host)    swap_used = getSwapUsed(host)    return mem_used, swap_used# ------------------------------------------------------------def main():    for host in hosts:        print(&#39;=&#39; * 10 + host + &#39;=&#39; * 10)        start = time.time()        print(&quot;系统信息&quot;)        system = getSystem(host)        print(system)        print(&quot;系统负载&quot;)        load1, load10, load15 = getLoads(host)        print(&#39;load(5min): %s ,load(10min): %s ,load(15min): %s&#39; % (load1, load10, load15))        print(&quot;网卡流量&quot;)        device_list, inside, outside = getNetworkInfo(host)        for i, item in enumerate(device_list):            print(&#39;%s : RX: %-15s   TX: %s &#39; % (device_list[i], inside[i], outside[i]))        mem_used, swap_used = getMemInfo(host)        print(&quot;内存使用率&quot;)        print(&#39;Mem_Used = %-15s   Swap_Used = %-15s&#39; % (mem_used, swap_used))        end = time.time()        print(&#39;run time:&#39;, round(end - start, 2), &#39;s&#39;)if __name__ == &#39;__main__&#39;:    main()</code></pre><h3 id="保存到redis中（更新）"><a href="#保存到redis中（更新）" class="headerlink" title="保存到redis中（更新）"></a>保存到redis中（更新）</h3><p>安装参考原文：</p><p><a href="https://blog.csdn.net/wwd0501/article/details/80735111?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">https://blog.csdn.net/wwd0501/article/details/80735111?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a></p><p>下载redis库：<a href="https://github.com/andymccurdy/redis-py">https://github.com/andymccurdy/redis-py</a> </p><p>上传到/root目录下解压还会得到一个redis-py-master文件夹</p><pre><code class="ssh">unzip redis-py-master.zip -d ./cd redis-py-mastersudo python setup.py install </code></pre><p>测试：</p><pre><code>python3&gt;&gt;&gt;import redis&gt;&gt;&gt;</code></pre><p><strong>注意如果得不到某一台机子的response需要启动或重启snmpd服务</strong></p><p><strong>python代码</strong>（转化为json格式string存储）</p><pre><code class="python"># coding=utf-8&quot;&quot;&quot;filename:snmp_test.py说明：使用系统的 snmpwalk 来查询设备信息，需要先安装 snmp代码 Windows 和 Linux 通用Windows cmd 调用示例：snmpwalk -v 2c -c public 127.0.0.1 1.3.6.1.2.1.1.1Windows cmd 下查看某主机（192.168.132.130）信息示例：snmpwalk -v 2c -c public 192.168.132.130 1.3.6.1.2.1.1.1&quot;&quot;&quot;import reimport osimport timeimport platformimport redis   # 导入redis模块，通过python操作redis 也可以直接在redis主机的服务端操作缓存数据库import jsonif &#39;Linux&#39; == platform.system():    hosts = [&#39;160.0.3.1&#39;,&#39;160.0.3.5&#39;]else:    # 在虚拟机运行时则查看本地    hosts = [&#39;160.0.3.1&#39;,&#39;160.0.3.5&#39;]def snmpWalk(host, oid):    result = os.popen(&#39;snmpwalk -v 2c -c public &#39; + host + &#39; &#39; + oid).read().split(&#39;\n&#39;)[:-1]    return result# ------------------------------------------------------------# 获取负载信息# ------------------------------------------------------------def getSystem(host):    system = &#39;:&#39;.join(snmpWalk(host, &#39;system&#39;)[0].split(&#39;:&#39;)[3:]).strip()    return system# ------------------------------------------------------------# ------------------------------------------------------------# 获取负载信息# ------------------------------------------------------------def getLoad(host, loid):    &quot;&quot;&quot;系统负载&quot;&quot;&quot;    load_oids = &#39;1.3.6.1.4.1.2021.10.1.3.&#39; + str(loid)    return snmpWalk(host, load_oids)[0].split(&#39;:&#39;)[3]def getLoads(host):    load1 = getLoad(host, 1)    load10 = getLoad(host, 2)    load15 = getLoad(host, 3)    return load1, load10, load15# ------------------------------------------------------------# ------------------------------------------------------------# 获取网卡流量# ------------------------------------------------------------def getNetworkDevices(host):    &quot;&quot;&quot;获取网络设备信息&quot;&quot;&quot;    device_mib = snmpWalk(host, &#39;RFC1213-MIB::ifDescr&#39;)    device_list = []    for item in device_mib:        device_list.append(item.split(&#39;:&#39;)[3].strip())    return device_listdef getNetworkData(host, oid):    &quot;&quot;&quot;获取网络流量&quot;&quot;&quot;    data_mib = snmpWalk(host, oid)    data = []    for item in data_mib:        byte = float(item.split(&#39;:&#39;)[3].strip())        data.append(str(round(byte / 1024, 2)) + &#39; KB&#39;)    return datadef getNetworkInfo(host):    device_list = getNetworkDevices(host)    # 流入流量    inside = getNetworkData(host, &#39;IF-MIB::ifInOctets&#39;)    # 流出流量    outside = getNetworkData(host, &#39;IF-MIB::ifOutOctets&#39;)    return device_list, inside, outside# ------------------------------------------------------------# ------------------------------------------------------------# 内存使用率# ------------------------------------------------------------def getSwapTotal(host):    swap_total = snmpWalk(host, &#39;UCD-SNMP-MIB::memTotalSwap.0&#39;)[0].split(&#39; &#39;)[3]    return swap_totaldef getSwapUsed(host):    swap_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::memAvailSwap.0&#39;)[0].split(&#39; &#39;)[3]    swap_total = getSwapTotal(host)    swap_used = str(round(((float(swap_total) - float(swap_avail)) / float(swap_total)) * 100, 2)) + &#39;%&#39;    return swap_useddef getMemTotal(host):    mem_total = snmpWalk(host, &#39;UCD-SNMP-MIB::memTotalReal.0&#39;)[0].split(&#39; &#39;)[3]    return mem_totaldef getMemUsed(host):    mem_total = getMemTotal(host)    mem_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::memAvailReal.0&#39;)[0].split(&#39; &#39;)[3]    mem_used = str(round(((float(mem_total) - float(mem_avail)) / float(mem_total)) * 100, 2)) + &#39;%&#39;    return mem_useddef getMemInfo(host):    mem_used = getMemUsed(host)    swap_used = getSwapUsed(host)    return mem_used, swap_useddef getRedis():    pool = redis.ConnectionPool(host=&#39;160.0.3.5&#39;,password=&#39;12345&#39;, port=6379, decode_responses=True)   # host是redis主机，需要redis服务端和客户端都起着 redis默认端口是6379    return redis.Redis(connection_pool=pool)# ------------------------------------------------------------def main():    r=getRedis()    cupData = &amp;#123;&amp;#125;    for host in hosts:        print(&#39;=&#39; * 10 + host + &#39;=&#39; * 10)        start = time.time()        print(&quot;系统信息&quot;)        system = getSystem(host)        print(system)        #r.hset(host, &quot;system&quot;, system)        print(&quot;系统负载&quot;)        load1, load10, load15 = getLoads(host)        print(&#39;load(5min): %s ,load(10min): %s ,load(15min): %s&#39; % (load1, load10, load15))        load = [ &amp;#123; &#39;load1&#39; : load1, &#39;load10&#39; : load10, &#39;load15&#39; : load15 &amp;#125; ]        print(&quot;网卡流量&quot;)        device_dict = &amp;#123;&amp;#125;        device_list, inside, outside = getNetworkInfo(host)        for i, item in enumerate(device_list):            print(&#39;%s : RX: %-15s   TX: %s &#39; % (device_list[i], inside[i], outside[i]))            temp = [ &amp;#123; &#39;RX&#39; : inside[i], &#39;TX&#39; : outside[i] &amp;#125; ]            device_dict[device_list[i]] = temp # 添加        print(device_dict)        mem_used, swap_used = getMemInfo(host)        print(&quot;内存使用率&quot;)        print(&#39;Mem_Used = %-15s   Swap_Used = %-15s&#39; % (mem_used, swap_used))        Used = [ &amp;#123; &#39;Mem_Used&#39; : mem_used, &#39;Swap_Used&#39; : swap_used &amp;#125; ]        end = time.time()        print(&#39;run time:&#39;, round(end - start, 2), &#39;s&#39;)        runT = [ &amp;#123; &#39;run time&#39; : round(end - start, 2) &amp;#125; ]        data = [ &amp;#123; &#39;系统信息&#39; : system, &#39;系统负载&#39; : load, &#39;网卡流量&#39; : device_dict, &#39;内存使用率&#39; : Used, &#39;run time&#39; : runT &amp;#125; ]        cupData[host] = data    r.set(&quot;system information&quot;, str(cupData))if __name__ == &#39;__main__&#39;:    main()</code></pre><p><strong>python代码</strong>（hset存储，可读性较差）</p><pre><code class="python"># coding=utf-8&quot;&quot;&quot;filename:snmp_test.py说明：使用系统的 snmpwalk 来查询设备信息，需要先安装 snmp代码 Windows 和 Linux 通用Windows cmd 调用示例：snmpwalk -v 2c -c public 127.0.0.1 1.3.6.1.2.1.1.1Windows cmd 下查看某主机（192.168.132.130）信息示例：snmpwalk -v 2c -c public 192.168.132.130 1.3.6.1.2.1.1.1&quot;&quot;&quot;import reimport osimport timeimport platformimport redis   # 导入redis模块，通过python操作redis 也可以直接在redis主机的服务端操作缓存数据库if &#39;Linux&#39; == platform.system():    hosts = [&#39;160.0.3.1&#39;,&#39;160.0.3.5&#39;]else:    # 在虚拟机运行时则查看本地    hosts = [&#39;160.0.3.1&#39;,&#39;160.0.3.5&#39;]def snmpWalk(host, oid):    result = os.popen(&#39;snmpwalk -v 2c -c public &#39; + host + &#39; &#39; + oid).read().split(&#39;\n&#39;)[:-1]    return result# ------------------------------------------------------------# 获取负载信息# ------------------------------------------------------------def getSystem(host):    system = &#39;:&#39;.join(snmpWalk(host, &#39;system&#39;)[0].split(&#39;:&#39;)[3:]).strip()    return system# ------------------------------------------------------------# ------------------------------------------------------------# 获取负载信息# ------------------------------------------------------------def getLoad(host, loid):    &quot;&quot;&quot;系统负载&quot;&quot;&quot;    load_oids = &#39;1.3.6.1.4.1.2021.10.1.3.&#39; + str(loid)    return snmpWalk(host, load_oids)[0].split(&#39;:&#39;)[3]def getLoads(host):    load1 = getLoad(host, 1)    load10 = getLoad(host, 2)    load15 = getLoad(host, 3)    return load1, load10, load15# ------------------------------------------------------------# ------------------------------------------------------------# 获取网卡流量# ------------------------------------------------------------def getNetworkDevices(host):    &quot;&quot;&quot;获取网络设备信息&quot;&quot;&quot;    device_mib = snmpWalk(host, &#39;RFC1213-MIB::ifDescr&#39;)    device_list = []    for item in device_mib:        device_list.append(item.split(&#39;:&#39;)[3].strip())    return device_listdef getNetworkData(host, oid):    &quot;&quot;&quot;获取网络流量&quot;&quot;&quot;    data_mib = snmpWalk(host, oid)    data = []    for item in data_mib:        byte = float(item.split(&#39;:&#39;)[3].strip())        data.append(str(round(byte / 1024, 2)) + &#39; KB&#39;)    return datadef getNetworkInfo(host):    device_list = getNetworkDevices(host)    # 流入流量    inside = getNetworkData(host, &#39;IF-MIB::ifInOctets&#39;)    # 流出流量    outside = getNetworkData(host, &#39;IF-MIB::ifOutOctets&#39;)    return device_list, inside, outside# ------------------------------------------------------------# ------------------------------------------------------------# 内存使用率# ------------------------------------------------------------def getSwapTotal(host):    swap_total = snmpWalk(host, &#39;UCD-SNMP-MIB::memTotalSwap.0&#39;)[0].split(&#39; &#39;)[3]    return swap_totaldef getSwapUsed(host):    swap_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::memAvailSwap.0&#39;)[0].split(&#39; &#39;)[3]    swap_total = getSwapTotal(host)    swap_used = str(round(((float(swap_total) - float(swap_avail)) / float(swap_total)) * 100, 2)) + &#39;%&#39;    return swap_useddef getMemTotal(host):    mem_total = snmpWalk(host, &#39;UCD-SNMP-MIB::memTotalReal.0&#39;)[0].split(&#39; &#39;)[3]    return mem_totaldef getMemUsed(host):    mem_total = getMemTotal(host)    mem_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::memAvailReal.0&#39;)[0].split(&#39; &#39;)[3]    mem_used = str(round(((float(mem_total) - float(mem_avail)) / float(mem_total)) * 100, 2)) + &#39;%&#39;    return mem_useddef getMemInfo(host):    mem_used = getMemUsed(host)    swap_used = getSwapUsed(host)    return mem_used, swap_useddef getRedis():    pool = redis.ConnectionPool(host=&#39;160.0.3.5&#39;,password=&#39;12345&#39;, port=6379, decode_responses=True)   # host是redis主机，需要redis服务端和客户端都起着 redis默认端口是6379    return redis.Redis(connection_pool=pool)# ------------------------------------------------------------def main():    r=getRedis()    for host in hosts:        print(&#39;=&#39; * 10 + host + &#39;=&#39; * 10)        start = time.time()        print(&quot;系统信息&quot;)        system = getSystem(host)        print(system)        r.hset(host, &quot;system&quot;, system)        print(&quot;系统负载&quot;)        load1, load10, load15 = getLoads(host)        print(&#39;load(5min): %s ,load(10min): %s ,load(15min): %s&#39; % (load1, load10, load15))        r.hset(host, &quot;load1&quot;, load1)        r.hset(host, &quot;load10&quot;, load10)        r.hset(host, &quot;load15&quot;, load15)        print(&quot;网卡流量&quot;)        device_list, inside, outside = getNetworkInfo(host)        for i, item in enumerate(device_list):            print(&#39;%s : RX: %-15s   TX: %s &#39; % (device_list[i], inside[i], outside[i]))            r.hset(host, device_list[i]+&quot;_RX&quot;, inside[i])            r.hset(host, device_list[i]+&quot;_TX&quot;, outside[i])        mem_used, swap_used = getMemInfo(host)        print(&quot;内存使用率&quot;)        print(&#39;Mem_Used = %-15s   Swap_Used = %-15s&#39; % (mem_used, swap_used))        r.hset(host, &quot;mem_used&quot;, mem_used)        r.hset(host, &quot;swap_used&quot;, swap_used)        end = time.time()        print(&#39;run time:&#39;, round(end - start, 2), &#39;s&#39;)        r.hset(host, &quot;run time&quot;, round(end - start, 2))if __name__ == &#39;__main__&#39;:    main()</code></pre><h3 id="定时任务（更新）"><a href="#定时任务（更新）" class="headerlink" title="定时任务（更新）"></a>定时任务（更新）</h3><p>放到crontab里面去，每30分钟执行一次并保存到redis中</p><pre><code class="python"></code></pre><h1 id="proc下主机信息（调用python）"><a href="#proc下主机信息（调用python）" class="headerlink" title="/proc下主机信息（调用python）"></a>/proc下主机信息（调用python）</h1><p><strong>结果</strong>：</p><pre><code class="ssh"># 主机名键:[主机名，ip地址，CPU使用率，内存使用率，SWAP使用率][root@localhost cpu_test]# python3 cpu.py &amp;#123;&#39;主机名1&#39;: [&#39;主机名1&#39;, &#39;192.168.220.11&#39;, &#39;0.98%&#39;, &#39;20%&#39;, &#39;0%&#39;], &#39;主机名2&#39;: [&#39;主机名2&#39;, &#39;192.168.220.10&#39;, &#39;1.31%&#39;, &#39;52%&#39;, &#39;14%&#39;]&amp;#125;[root@localhost cpu_test]# </code></pre><p>参考原文：<a href="https://blog.csdn.net/zyingpei/article/details/89525410">https://blog.csdn.net/zyingpei/article/details/89525410</a></p><p>网上原始参考代码：<a href="https://www.oschina.net/code/snippet_924001_47763">https://www.oschina.net/code/snippet_924001_47763</a></p><p><strong>1.在linux上部署python，见《 Linux环境下的软件安装》</strong></p><p>因为要测试代码，在windows上也安装了一个，下载，配置环境变量，再执行</p><pre><code class="ssh">pip install paramiko</code></pre><p><strong>2.准备好实现代码 cpu.py</strong></p><pre><code class="python">#!/usr/bin/python# -*- coding:utf8 -*-# 主机名键:[主机名，ip地址，CPU使用率，内存使用率，SWAP使用率]import paramikoimport refrom time import sleeplinux_info=(            [&#39;主机名1&#39;,&#39;192.168.220.11&#39;],            [&#39;主机名2&#39;,&#39;192.168.220.10&#39;]            )server_user=&#39;root&#39;server_pw=&#39;root&#39;server_info=&amp;#123;&amp;#125;def cpu_r(cpu_stat):    # 返回CPU当前的总时间片和空闲时间片信息的数据    sys_cpu_info_t = re.findall(b&#39;cpu .*\d&#39;,cpu_stat)    pattern = re.compile(r&#39;\d+&#39;)   # 查找数字    cpu_z_str = str(sys_cpu_info_t)    cpu_z_str=pattern.findall(cpu_z_str)    #print(cpu_z_str)    cpu_z_list = list(cpu_z_str)    #print(cpu_z_list)    #cpu_z_list.remove(&quot;cpu&quot;)    f_line_a=[]    for i in cpu_z_list:        i=int(i)        f_line_a.append(i)    total = sum(f_line_a)    idle = f_line_a[3]    return total,idledef meminfo_disc(meminfo_r):    # 返回内存使用信息的一个字典，取值需要 /proc/meminfo 的内容    #print(meminfo_r)    aa = re.sub(r&#39; kB&#39;,&#39;&#39;,str(meminfo_r))    aa = re.sub(r&#39;b\&#39;&#39;,&#39;&#39;,aa)    #print(&#39;*******************************************************************************&#39;)    #print(aa)    bb = re.sub(r&#39; &#39;,&#39;&#39;,aa)    #print(&#39;***********************************************************************************&#39;)    #print(bb)    cc = re.sub(r&#39;\\n&#39;,&#39;:&#39;,bb)    #print(&#39;***********************************************************************************&#39;)    #print(cc)    dd = cc.split(&quot;:&quot;)    #print(&#39;************************************************************************************&#39;)    #print(dd)    meminfo_d = &amp;#123;&amp;#125;    while len(dd)&gt;1:        #print(dd[0])        meminfo_d[dd[0]]=dd[1]        del dd[0:2]    return meminfo_dfor i in linux_info:    server_id=i[0]    server_ip=i[1]    ss = paramiko.SSHClient()    ss.set_missing_host_key_policy(paramiko.AutoAddPolicy())    ss.connect(server_ip,22,server_user,server_pw)    stdin,stdout,stderr=ss.exec_command(&#39;cat /proc/stat&#39;)    sys_cpu_stat = stdout.read()    stdin,stdout,stderr=ss.exec_command(&#39;cat /proc/meminfo&#39;)    meminfo_r = stdout.read()    #print(sys_cpu_stat)    total_a,idle_a=cpu_r(sys_cpu_stat)    sleep(3)    stdin,stdout,stderr=ss.exec_command(&#39;cat /proc/stat&#39;)    sys_cpu_stat = stdout.read()    total_b,idle_b=cpu_r(sys_cpu_stat)    ss.close()    sys_idle = idle_b - idle_a    sys_total = total_b - total_a    sys_us = sys_total - sys_idle    cpu_a = (float(sys_us)/sys_total)*100    cpu_b = str(round(cpu_a,2))+&#39;%&#39;    meminfo_key = meminfo_disc(meminfo_r)    mem_kx = int(meminfo_key.get(&#39;MemTotal&#39;))-int(meminfo_key.get(&#39;MemFree&#39;))-int(meminfo_key.get(&#39;Buffers&#39;))-int(meminfo_key.get(&#39;Cached&#39;))    mem_kx_l = (float(mem_kx)/int(meminfo_key.get(&#39;MemTotal&#39;)))*100    mem_kx_lv = str(round(mem_kx_l))+&#39;%&#39;    swap_user = float(meminfo_key.get(&#39;SwapTotal&#39;))-int(meminfo_key.get(&#39;SwapFree&#39;))/float(meminfo_key.get(&#39;SwapTotal&#39;))    swap_user_l = (float(meminfo_key.get(&#39;SwapTotal&#39;))-int(meminfo_key.get(&#39;SwapFree&#39;)))/int(meminfo_key.get(&#39;SwapTotal&#39;))*100    swap_user_lv = str(round(swap_user_l))+&#39;%&#39;    server_info_list=[server_id,server_ip,cpu_b,mem_kx_lv,swap_user_lv]    server_info[server_id]=server_info_list    # 输出一个字典print (server_info)</code></pre><p><strong>3.在linux上运行py文件</strong></p><pre><code class="ssh">python3 cpu.py</code></pre><p>会报错，缺少第三方库</p><pre><code class="ssh">python - ImportError: No module named paramiko</code></pre><p>​    <strong>1.安装pycrypto模块</strong> </p><p>下载该模块地址：<a href="https://www.dlitz.net/software/pycrypto/">https://www.dlitz.net/software/pycrypto/</a> 上传主机然后解压安装：</p><pre><code class="ssh">tar -zxvf pycrypto-2.6.1.tar.gzcd pycrypto-2.6.1python3 setup.py build &amp;&amp; python3 setup.py install</code></pre><p>​    <strong>2.安装paramiko</strong> </p><p>下载地址：<a href="https://pypi.org/project/paramiko/#description">https://pypi.org/project/paramiko/#description</a> 可以找到适合自己的版本下载，然后上传主机解压安装 ：</p><pre><code class="ssh">tar -zxvf paramiko-2.7.2.tar.gzcd paramiko-2.7.2python3 setup.py build &amp;&amp; python3 setup.py install</code></pre><p>然后报错ImportError: No module named setuptools，显示没有setuptools这个模块，安装一下这个模块。</p><pre><code> **3.安装setuptools**</code></pre><p>地址：<a href="https://pypi.org/project/setuptools/">https://pypi.org/project/setuptools/</a> 找到自己合适的版本，然后点击下载： </p><pre><code class="ssh">unzip setuptools-50.3.0.zip</code></pre><p>这一步可能会报错找不到unzip命令：下载一下（如果没有跳过）</p><pre><code class="ssh">yum install -y unzip zip</code></pre><p>继续执行命令：</p><pre><code class="ssh">cd setuptools-50.3.0python3 setup.py build &amp;&amp; python3 setup.py install</code></pre><p>然后重新进入paramiko-2.7.2 目录安装 ：</p><pre><code class="ssh">python3 setup.py build &amp;&amp; python3 setup.py install</code></pre><p>我到这一步就安装成功了，如果还报错的话可以参考下边的参考原文，他后边还安装了一些依赖</p><p>会有很多报错，应该是python版本问题，需要修改代码</p><pre><code class="python">#!/usr/bin/python# -*- coding:utf8 -*-# Email:chenwx716@163.com__author__ = &#39;chenwx&#39;import paramikoimport refrom time import sleeplinux_info=(            [&#39;192.168.220.11&#39;,&#39;192.168.220.11&#39;],            [&#39;192.168.220.10&#39;,&#39;192.168.220.10&#39;]            )server_user=&#39;root&#39;server_pw=&#39;root&#39;server_info=&amp;#123;&amp;#125;def cpu_r(cpu_stat):    # 返回CPU当前的总时间片和空闲时间片信息的数据    sys_cpu_info_t = re.findall(b&#39;cpu .*\d&#39;,cpu_stat)    cpu_z_str = str(sys_cpu_info_t)    print(cpu_z_str)    num = re.sub(r&#39;\D&#39;, &quot;&quot;, cpu_z_str)    print (&quot;电话号码是 : &quot;, num)    #cpu_z_str = &#39; &#39;.join(str(sys_cpu_info_t))    #print(sys_cpu_info_t)    #print(cpu_z_str)    #print(cpu_z_str.split( ))    #cpu_z_list = list(cpu_z_str.split())    cpu_z_list = list(cpu_z_str)    #print(cpu_z_list)    cpu_z_list.remove(&quot;cpu&quot;)    f_line_a=[]    for i in cpu_z_list:        i=int(i)        f_line_a.append(i)    total = sum(f_line_a)    idle = f_line_a[3]    return total,idledef meminfo_disc(meminfo_r):    # 返回内存使用信息的一个字典，取值需要 /proc/meminfo 的内容    aa = re.sub(r&#39; kB&#39;,&#39;&#39;,meminfo_r)    bb = re.sub(r&#39; +&#39;,&#39;&#39;,aa)    cc = re.sub(r&#39;\n&#39;,&#39;:&#39;,bb)    dd = cc.split(&quot;:&quot;)    meminfo_d = &amp;#123;&amp;#125;    while len(dd)&gt;1:        meminfo_d[dd[0]]=dd[1]        del dd[0:2]    return meminfo_dfor i in linux_info:    server_id=i[0]    server_ip=i[1]    ss = paramiko.SSHClient()    ss.set_missing_host_key_policy(paramiko.AutoAddPolicy())    ss.connect(server_ip,22,server_user,server_pw)    stdin,stdout,stderr=ss.exec_command(&#39;cat /proc/stat&#39;)    sys_cpu_stat = stdout.read()    stdin,stdout,stderr=ss.exec_command(&#39;cat /proc/meminfo&#39;)    meminfo_r = stdout.read()    #print(sys_cpu_stat)    total_a,idle_a=cpu_r(sys_cpu_stat)    sleep(3)    stdin,stdout,stderr=ss.exec_command(&#39;cat /proc/stat&#39;)    sys_cpu_stat = stdout.read()    total_b,idle_b=cpu_r(sys_cpu_stat)    ss.close()    sys_idle = idle_b - idle_a    sys_total = total_b - total_a    sys_us = sys_total - sys_idle    cpu_a = (float(sys_us)/sys_total)*100    cpu_b = str(round(cpu_a,2))+&#39;%&#39;    meminfo_key = meminfo_disc(meminfo_r)    mem_kx = int(meminfo_key.get(&#39;MemTotal&#39;))-int(meminfo_key.get(&#39;MemFree&#39;))-int(meminfo_key.get(&#39;Buffers&#39;))-int(meminfo_key.get(&#39;Cached&#39;))    mem_kx_l = (float(mem_kx)/int(meminfo_key.get(&#39;MemTotal&#39;)))*100    mem_kx_lv = str(round(mem_kx_l))+&#39;%&#39;    swap_user = float(meminfo_key.get(&#39;SwapTotal&#39;))-int(meminfo_key.get(&#39;SwapFree&#39;))/float(meminfo_key.get(&#39;SwapTotal&#39;))    swap_user_l = (float(meminfo_key.get(&#39;SwapTotal&#39;))-int(meminfo_key.get(&#39;SwapFree&#39;)))/int(meminfo_key.get(&#39;SwapTotal&#39;))*100    swap_user_lv = str(round(swap_user_l))+&#39;%&#39;    server_info_list=[server_id,server_ip,cpu_b,mem_kx_lv,swap_user_lv]    server_info[server_id]=server_info_list    # 输出一个字典print (server_info)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;snmp协议（调用python）&quot;&gt;&lt;a href=&quot;#snmp协议（调用python）&quot; class=&quot;headerlink&quot; title=&quot;snmp协议（调用python）&quot;&gt;&lt;/a&gt;snmp协议（调用python）&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;结果输出：&lt;</summary>
      
    
    
    
    <category term="工作方案" scheme="https://xiaopantongxue816.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%A1%88/"/>
    
    
    <category term="CPU" scheme="https://xiaopantongxue816.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>部署</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/04/%E9%83%A8%E7%BD%B2/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/04/%E9%83%A8%E7%BD%B2/</id>
    <published>2020-09-04T08:59:53.000Z</published>
    <updated>2020-09-14T04:59:04.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat部署多个项目"><a href="#tomcat部署多个项目" class="headerlink" title="tomcat部署多个项目"></a>tomcat部署多个项目</h1><p>进入tomcat配置文件目录</p><pre><code class="bash">cd /usr/local/tomcat/apache-tomcat-8.5.57/confvim server.xml</code></pre><p>添加</p><pre><code class="ssh">&lt;!--配置web应用--&gt;&lt;Content docBase=&quot;ruoyi_admin&quot; path=&quot;/ruoyi_admin&quot; reloadable=&quot;true&quot;/&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tomcat部署多个项目&quot;&gt;&lt;a href=&quot;#tomcat部署多个项目&quot; class=&quot;headerlink&quot; title=&quot;tomcat部署多个项目&quot;&gt;&lt;/a&gt;tomcat部署多个项目&lt;/h1&gt;&lt;p&gt;进入tomcat配置文件目录&lt;/p&gt;
&lt;pre&gt;&lt;code </summary>
      
    
    
    
    <category term="运维" scheme="https://xiaopantongxue816.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="tomcat" scheme="https://xiaopantongxue816.github.io/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>部署异常</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/04/%E9%83%A8%E7%BD%B2%E5%BC%82%E5%B8%B8/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/04/%E9%83%A8%E7%BD%B2%E5%BC%82%E5%B8%B8/</id>
    <published>2020-09-04T08:29:28.000Z</published>
    <updated>2020-09-15T06:05:35.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-net-BindException"><a href="#java-net-BindException" class="headerlink" title="java.net.BindException"></a>java.net.BindException</h1><p>启动服务的时候<code> **java.net.BindException**:</code> 地址已在使用，是因为端口被占用 端口显示 8005</p><pre><code class="bash">04-Sep-2020 15:51:24.575 严重 [main] org.apache.catalina.core.StandardServer.await StandardServer.await: create[localhost:8005]:         java.net.BindException: 地址已在使用 (Bind failed)</code></pre><pre><code>netstat -alnp | grep 8005[root@localhost bin]# netstat -alnp | grep 8005tcp6       0      0 127.0.0.1:8005          :::*                    LISTEN      2147/java     </code></pre><p>杀死进程<code>kill -9 2547</code>重新启动服务器 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java-net-BindException&quot;&gt;&lt;a href=&quot;#java-net-BindException&quot; class=&quot;headerlink&quot; title=&quot;java.net.BindException&quot;&gt;&lt;/a&gt;java.net.BindExcepti</summary>
      
    
    
    
    <category term="运维" scheme="https://xiaopantongxue816.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="异常" scheme="https://xiaopantongxue816.github.io/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>nuoyi</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/04/nuoyi/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/04/nuoyi/</id>
    <published>2020-09-04T08:01:40.000Z</published>
    <updated>2020-09-15T07:01:28.285Z</updated>
    
    <content type="html"><![CDATA[<p>地址：<a href="http://ruoyi.vip/">http://ruoyi.vip/</a></p><h1 id="部署遇到的一些问题"><a href="#部署遇到的一些问题" class="headerlink" title="部署遇到的一些问题"></a>部署遇到的一些问题</h1><p>在本机上用idea运行没啥问题改一下数据库数据就OK了没啥问题</p><p>在Linux上部署</p><p>需要删除ruoyi_admin.pom下的一个插件（不然会二次打包jar包就不知道是啥东西了）</p><pre><code class="xml">&lt;plugin&gt;               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;                &lt;configuration&gt;                    &lt;fork&gt;true&lt;/fork&gt; &amp;lt;!&amp;ndash; 如果没有该配置，devtools不会生效 &amp;ndash;&amp;gt;                &lt;/configuration&gt;                &lt;executions&gt;                    &lt;execution&gt;                        &lt;goals&gt;                            &lt;goal&gt;repackage&lt;/goal&gt;                        &lt;/goals&gt;                    &lt;/execution&gt;                &lt;/executions&gt; &lt;/plugin&gt;</code></pre><p>然后把项目父模块<code>clean-》install-》</code>找到<code>（ruoyi_admin模块下的target里的）war包</code>-》<code>放到Linux上tomcat的webapps</code>下</p><pre><code class="bash"># 开启tomcat日志cd /usr/local/tomcat/apache-tomcat-8.5.57/bin./catalina.sh run</code></pre><p>访问地址：LinuxIP:8080/war包名</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;地址：&lt;a href=&quot;http://ruoyi.vip/&quot;&gt;http://ruoyi.vip/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;部署遇到的一些问题&quot;&gt;&lt;a href=&quot;#部署遇到的一些问题&quot; class=&quot;headerlink&quot; title=&quot;部署遇到的一些问题&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="后端" scheme="https://xiaopantongxue816.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="开源项目" scheme="https://xiaopantongxue816.github.io/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>字符串数组</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/03/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/03/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/</id>
    <published>2020-09-03T10:42:27.000Z</published>
    <updated>2020-09-15T06:44:04.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h3 id="字符串转字节数组"><a href="#字符串转字节数组" class="headerlink" title="字符串转字节数组"></a>字符串转字节数组</h3><pre><code class="Java">        String ss=&quot;&amp;#123;5,7,8,9&amp;#125;&quot;;        System.out.println(stringToBytes(ss));                    # [B@5451c3a8        System.out.println(Arrays.toString(stringToBytes(ss)));   # [5, 7, 8, 9]        System.out.println(stringToBytes(ss).toString());          # [B@2626b418public static byte[] stringToBytes(String receive_msg)&amp;#123;        String[] s=receive_msg.split(&quot;,&quot;);        byte[] bytes=new byte[s.length];        for (int i=0;i&lt;=s.length-1;i++)&amp;#123;            if (i==0)&amp;#123;                bytes[i]=Byte.valueOf(s[i].substring(1));            &amp;#125;else if (i==s.length-1)&amp;#123;                bytes[i]=Byte.valueOf(s[i].substring(0,s[i].length()-1));            &amp;#125;else &amp;#123;                bytes[i]=Byte.valueOf(s[i]);            &amp;#125;    &amp;#125;    return bytes;    &amp;#125;</code></pre><h3 id="对象转字节数组"><a href="#对象转字节数组" class="headerlink" title="对象转字节数组"></a>对象转字节数组</h3><pre><code class="java"># protobuf序列化特有的方法 byte[] byteArray = Object.toByteArray();</code></pre><h3 id="字节数组转字符串"><a href="#字节数组转字符串" class="headerlink" title="字节数组转字符串"></a>字节数组转字符串</h3><pre><code class="java"># Byte[] bytes=&amp;#123;1,2,3,4&amp;#125;;--》</code></pre><h3 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h3><pre><code class="java"># 字节数组String s1 = bytes.toString();            # Byte[] bytes=&amp;#123;1,2,3,4&amp;#125;;-&gt;[Ljava.lang.Byte;@5451c3a8String s4 = ArrayUtils.toString(bytes);  # Byte[] bytes=&amp;#123;1,2,3,4&amp;#125;;-&gt;&amp;#123;1,2,3,4&amp;#125;             Arrays.toString(bytes)；     # Byte[] bytes=&amp;#123;1,2,3,4&amp;#125;;-&gt;&quot;[1, 2, 3, 4]&quot;# 字符串数组                                                                  String s3 = ArrayUtil.arrayToString(s);  # String[] s=&amp;#123;&quot;&amp;#123;5&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&amp;#125;&quot;&amp;#125;;-&gt;&amp;#123;5 7 8 9&amp;#125;</code></pre><h1 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h1><h3 id="第n个开始截取长度-m-字符串"><a href="#第n个开始截取长度-m-字符串" class="headerlink" title="第n个开始截取长度 m 字符串"></a>第n个开始截取长度 m 字符串</h3><pre><code class="c#">&amp;#123;    string str2 = binreadx.ReadString();    str2=str2.Substring(0,8);    byte[] array = System.Text.Encoding.ASCII.GetBytes(str2); //数组array为对应的ASCII数组    string ASCIIstr2 = null;    for (int n = 0; n &lt; array.Length; n++)    &amp;#123;        int asciicode = (int)(array[n]);        ASCIIstr2 += Convert.ToString(asciicode);//字符串ASCIIstr2 为对应的ASCII字符串    &amp;#125;    //dgvTelegram.Rows[i].Cells[&quot;SNAPSHOOT&quot;].Value = binreadx.ReadString();    dgvTelegram.Rows[i].Cells[&quot;SNAPSHOOT&quot;].Value = ASCIIstr2;&amp;#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h1&gt;&lt;h3 id=&quot;字符串转字节数组&quot;&gt;&lt;a href=&quot;#字符串转字节数组&quot; class=&quot;headerlink&quot; title=&quot;字</summary>
      
    
    
    
    <category term="后端" scheme="https://xiaopantongxue816.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="字符串" scheme="https://xiaopantongxue816.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>kafka</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/03/kafka/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/03/kafka/</id>
    <published>2020-09-03T09:57:44.000Z</published>
    <updated>2020-09-15T07:16:55.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="protobuf字节数组的数据传输（Demo）"><a href="#protobuf字节数组的数据传输（Demo）" class="headerlink" title="protobuf字节数组的数据传输（Demo）"></a>protobuf字节数组的数据传输（Demo）</h1><p>基于<a href="http://kafka.apache.org/">Kafka</a> 和 <a href="http://zookeeper.apache.org/">Zookeeper</a></p><h3 id="4-生产者工具"><a href="#4-生产者工具" class="headerlink" title="4.生产者工具"></a>4.生产者工具</h3><p><strong>ProtobufKafkaProducerUtil.java</strong></p><pre><code class="java">package com.pjy.kafka;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Properties;import com.pjy.serial.PersonTestProtos;import kafka.javaapi.producer.Producer;import kafka.producer.KeyedMessage;import kafka.producer.ProducerConfig;import org.apache.commons.lang.ArrayUtils;public class ProtobufKafkaProducerUtil &amp;#123;    private static Producer&lt;String, String&gt; producer;    public final static String TOPIC = &quot;test_protobuf_pjy&quot;;    /*构建proto对象*/    public static &lt;T&gt; T buuldProtoObject()&amp;#123;        //获取一个PBPlayer构造器        PersonTestProtos.PersonTest.Builder personBuilder =  PersonTestProtos.PersonTest.newBuilder();        //设置数据        personBuilder.setName(&quot;pjy&quot;).setEmail(&quot;11111@2222&quot;).setSex(PersonTestProtos.PersonTest.Sex.MALE);        // 内部的 PhoneNumber 构造器        PersonTestProtos.PersonTest.PhoneNumber.Builder phoneNumberBuilder = PersonTestProtos.PersonTest.PhoneNumber.newBuilder();        // PhoneNumber 赋值        phoneNumberBuilder.setType(PersonTestProtos.PersonTest.PhoneNumber.PhoneType.MOBILE);        phoneNumberBuilder.setNumber(&quot;112233445566&quot;);        // personTest 设置 PhoneNumber        personBuilder.addPhone(phoneNumberBuilder);        PersonTestProtos.PersonTest personTest = personBuilder.build();        return (T)personTest;    &amp;#125;    /**     * 序列化     */    public static byte[] toSerialize()  &amp;#123;        /*//获取一个PBPlayer构造器        PersonTestProtos.PersonTest.Builder personBuilder =  PersonTestProtos.PersonTest.newBuilder();        //设置数据        personBuilder.setName(&quot;pjy&quot;).setEmail(&quot;11111@2222&quot;).setSex(PersonTestProtos.PersonTest.Sex.MALE);        // 内部的 PhoneNumber 构造器        PersonTestProtos.PersonTest.PhoneNumber.Builder phoneNumberBuilder = PersonTestProtos.PersonTest.PhoneNumber.newBuilder();        // PhoneNumber 赋值        phoneNumberBuilder.setType(PersonTestProtos.PersonTest.PhoneNumber.PhoneType.MOBILE);        phoneNumberBuilder.setNumber(&quot;112233445566&quot;);        // personTest 设置 PhoneNumber        personBuilder.addPhone(phoneNumberBuilder);        // 生成 personTest 对象        PersonTestProtos.PersonTest personTest = personBuilder.build();*/          //序列化成字节数组        PersonTestProtos.PersonTest personTest = buuldProtoObject();        byte[] byteArray = personTest.toByteArray();        //System.out.println(&quot;序列化后的字节数组:&quot;+Arrays.toString(byteArray));        return byteArray;    &amp;#125;    public static void start(String broker_list, String producer_type)&amp;#123;        Properties props = new Properties();        props.put(&quot;metadata.broker.list&quot;, broker_list);        props.put(&quot;producer.type&quot;, producer_type==null?&quot;sync&quot;:producer_type);        props.put(&quot;serializer.class&quot;, &quot;kafka.serializer.StringEncoder&quot;);        props.put(&quot;key.serializer.class&quot;, &quot;kafka.serializer.StringEncoder&quot;);        //request.required.acks        //0, which means that the producer never waits for an acknowledgment from the broker (the same behavior as 0.7). This option provides the lowest latency but the weakest durability guarantees (some data will be lost when a server fails).        //1, which means that the producer gets an acknowledgment after the leader replica has received the data. This option provides better durability as the client waits until the server acknowledges the request as successful (only messages that were written to the now-dead leader but not yet replicated will be lost).        //-1, which means that the producer gets an acknowledgment after all in-sync replicas have received the data. This option provides the best durability, we guarantee that no messages will be lost as long as at least one in sync replica remains.        props.put(&quot;request.required.acks&quot;,&quot;-1&quot;);        ProducerConfig producerConfig = new ProducerConfig(props);        producer = new Producer&lt;String, String&gt;(producerConfig);    &amp;#125;    public static void send(String message) &amp;#123;        if(message == null)&amp;#123;            return;        &amp;#125;        try &amp;#123;            KeyedMessage&lt;String, String&gt; km = new KeyedMessage&lt;String, String&gt;(TOPIC, message);            producer.send(km);        &amp;#125; catch (Exception e) &amp;#123;            e.printStackTrace();            throw e;        &amp;#125;    &amp;#125;    public static void send(String topicName, String message) &amp;#123;        if(topicName == null || message == null)&amp;#123;            return;        &amp;#125;        try &amp;#123;            KeyedMessage&lt;String, String&gt; km = new KeyedMessage&lt;String, String&gt;(topicName, message);            producer.send(km);        &amp;#125; catch (Exception e) &amp;#123;            e.printStackTrace();            throw e;        &amp;#125;    &amp;#125;    public static void send(String topicName, List&lt;String&gt; messages) &amp;#123;        if(topicName == null || messages == null)&amp;#123;            return;        &amp;#125;        try &amp;#123;            List&lt;KeyedMessage&lt;String, String&gt;&gt; kms = new ArrayList&lt;KeyedMessage&lt;String, String&gt;&gt;();            for (String msg : messages) &amp;#123;               // kms.add(new KeyedMessage&lt;String, String&gt;(topicName, String.valueOf(RandomUtils.nextInt()), msg));                //System.out.println(msg);                kms.add(new KeyedMessage&lt;String, String&gt;(topicName,null,msg));        &amp;#125;            producer.send(kms);        &amp;#125; catch (Exception e) &amp;#123;            e.printStackTrace();            throw e;        &amp;#125;    &amp;#125;    public static void stop() &amp;#123;        if (producer != null) &amp;#123;            producer.close();            producer = null;        &amp;#125;    &amp;#125;    public static void main( String[] args) &amp;#123;        Long messageNo = 0L;        final Long COUNT = 100L;        //start(&quot;168.2.4.57:9092,168.2.4.58:9092,168.2.4.59:9092,168.2.4.60:9092&quot;, &quot;sync&quot;);        start(&quot;10.0.0.16:9092&quot;, &quot;sync&quot;);        int split = 0;        List&lt;String&gt; messages = new ArrayList&lt;String&gt;();        while (messageNo &lt; COUNT) &amp;#123;            String key = String.valueOf(messageNo);            //String data = &quot;***********hello kafka message &quot; + key;           String data = ArrayUtils.toString(toSerialize(), &quot;,&quot;); // 数组转字符串(逗号分隔,首尾加大括号)            if (split &lt; 10) &amp;#123;                messages.add(data);                split++;            &amp;#125; else &amp;#123;                send(TOPIC, messages);                split = 0;                messages.clear();            &amp;#125;            //System.out.println(data);            messageNo ++;        &amp;#125;    &amp;#125;&amp;#125;</code></pre><h3 id="5-消费者工具"><a href="#5-消费者工具" class="headerlink" title="5.消费者工具"></a>5.消费者工具</h3><p><strong>ProtobufKafkaConsumerUtil</strong></p><pre><code class="java">package com.pjy.kafka;import java.util.*;import java.util.concurrent.TimeUnit;import com.google.protobuf.InvalidProtocolBufferException;import com.pjy.serial.PersonTestProtos;import org.apache.commons.lang.exception.ExceptionUtils;import org.apache.log4j.Logger;import kafka.consumer.ConsumerConfig;import kafka.consumer.ConsumerIterator;import kafka.consumer.KafkaStream;import kafka.javaapi.consumer.ConsumerConnector;import kafka.message.MessageAndMetadata;import kafka.serializer.StringDecoder;import kafka.utils.VerifiableProperties;public class ProtobufKafkaConsumerUtil &amp;#123;    private static final Logger LOG = Logger.getLogger(ProtobufKafkaConsumerUtil.class);    public final static String TOPIC = &quot;test_protobuf_pjy&quot;;    private static ConsumerConnector consumer;    private static Thread thread = null;    private static boolean isExit = false;    /*    * 字符串-》字节数组&amp;#123;1,2,3&amp;#125;-&gt;[1,2,3]    * */    public static byte[] stringToBytes(String receive_msg)&amp;#123;        String[] s=receive_msg.split(&quot;,&quot;);        byte[] bytes=new byte[s.length];        for (int i=0;i&lt;=s.length-1;i++)&amp;#123;            if (i==0)&amp;#123;                bytes[i]=Byte.valueOf(s[i].substring(1));            &amp;#125;else if (i==s.length-1)&amp;#123;                bytes[i]=Byte.valueOf(s[i].substring(0,s[i].length()-1));            &amp;#125;else &amp;#123;                bytes[i]=Byte.valueOf(s[i]);            &amp;#125;    &amp;#125;    return bytes;    &amp;#125;    /**     * 反序列化     */    public static void unSerialize(byte[] bytes) throws InvalidProtocolBufferException &amp;#123;        PersonTestProtos.PersonTest personTestResult = PersonTestProtos.PersonTest.parseFrom(bytes);            System.out.println(String.format                    (&quot;反序列化得到的信息:姓名：%s，性别：%d，手机号：%s&quot;,                            personTestResult.getName(),                            personTestResult.getSexValue(),                            personTestResult.getPhone(0).                                    getNumber()));    &amp;#125;    public static void start(String zookeeper_quorum, String zookeeper_timeout, String group_id) &amp;#123;        try &amp;#123;            Properties props = new Properties();            props.put(&quot;zookeeper.connect&quot;, zookeeper_quorum);            props.put(&quot;group.id&quot;, group_id);            props.put(&quot;zookeeper.session.timeout.ms&quot;, zookeeper_timeout);            props.put(&quot;zookeeper.sync.time.ms&quot;, &quot;200&quot;);            props.put(&quot;auto.commit.interval.ms&quot;, &quot;1000&quot;);            //props.put(&quot;auto.offset.reset&quot;, &quot;smallest&quot;);            ConsumerConfig config = new ConsumerConfig(props);            consumer = kafka.consumer.Consumer.createJavaConsumerConnector(config);            thread = new Thread(new Runnable() &amp;#123;                @Override                public void run() &amp;#123;                    try &amp;#123;                        Map&lt;String, Integer&gt; topicCountMap = new HashMap&lt;String, Integer&gt;();                        topicCountMap.put(TOPIC, new Integer(1));                        StringDecoder keyDecoder = new StringDecoder(new VerifiableProperties());                        StringDecoder valueDecoder = new StringDecoder(new VerifiableProperties());                        Map&lt;String, List&lt;KafkaStream&lt;String, String&gt;&gt;&gt; consumerMap =                                consumer.createMessageStreams(topicCountMap, keyDecoder, valueDecoder);                        KafkaStream&lt;String, String&gt; partition = consumerMap.get(TOPIC).get(0);                        ConsumerIterator&lt;String, String&gt; it = partition.iterator();                        while(!isExit &amp;&amp; it.hasNext()) &amp;#123;                            try &amp;#123;                                MessageAndMetadata&lt;String, String&gt; item = it.next();                                String receive_msg = item.message();                                unSerialize(stringToBytes(receive_msg));                            &amp;#125; catch (Exception e) &amp;#123;                                //e.printStackTrace();                                LOG.error(new StringBuilder().append(&quot;consumer error happen! cause:&quot;).append(ExceptionUtils.getFullStackTrace(e)));                                continue;                            &amp;#125;                        &amp;#125;                        if(consumer != null)    &amp;#123;                            consumer.shutdown();                            consumer = null;                        &amp;#125;                    &amp;#125; catch (Exception e) &amp;#123;                        //e.printStackTrace();                        LOG.error(new StringBuilder().append(&quot;consumer exit! cause:&quot;).append(ExceptionUtils.getFullStackTrace(e)));                    &amp;#125;                &amp;#125;            &amp;#125;, &quot;my_kafka_consumer&quot;);            thread.setDaemon(false);            thread.start();        &amp;#125; catch (Exception e) &amp;#123;            e.printStackTrace();            LOG.error(&quot;consumer start exception! cause:&quot; + ExceptionUtils.getFullStackTrace(e));        &amp;#125;    &amp;#125;    public void stop() &amp;#123;        try &amp;#123;            isExit = true;            TimeUnit.MILLISECONDS.sleep(3000);            if(thread.isAlive()) &amp;#123;                thread.interrupt();            &amp;#125;        &amp;#125; catch (InterruptedException e) &amp;#123;            LOG.error(ExceptionUtils.getFullStackTrace(e));        &amp;#125; finally &amp;#123;            if(consumer != null) &amp;#123;                consumer.shutdown();                consumer = null;            &amp;#125;        &amp;#125;    &amp;#125;    public static void main(String[] args) &amp;#123;        int messageNo = 1000;        final int COUNT = 10000;        //ProtobufKafkaConsumerUtil.start(&quot;168.2.4.56:2181,168.2.4.57:2181,168.2.4.58:2181&quot;, &quot;3000&quot;, &quot;myGroupID&quot;);        ProtobufKafkaConsumerUtil.start(&quot;10.0.0.16:2181&quot;, &quot;3000&quot;, &quot;myGroupID&quot;);        while (messageNo &lt; COUNT) &amp;#123;            try &amp;#123;                Thread.sleep(1000 * 30);            &amp;#125; catch (InterruptedException e) &amp;#123;                e.printStackTrace();            &amp;#125;        &amp;#125;    &amp;#125;&amp;#125;</code></pre><h3 id="1-proto文件"><a href="#1-proto文件" class="headerlink" title="1.proto文件"></a>1.proto文件</h3><pre><code>syntax = &quot;proto3&quot;;import &quot;google/protobuf/any.proto&quot;;package pjy.protobuf;option java_package = &quot;com.pjy.serial&quot;;option java_outer_classname=&quot;PersonTestProtos&quot;;message PersonTest &amp;#123;      int32 id = 1;    string name = 2;    string email = 3;      Sex sex = 4;    repeated PhoneNumber phone = 5;    map&lt;string, string&gt; tags = 6;    repeated google.protobuf.Any details = 7;    enum Sex &amp;#123;              DEFAULT = 0;              MALE = 1;              Female = 2;      &amp;#125;      message PhoneNumber &amp;#123;            string number = 1;            PhoneType type = 2;            enum PhoneType &amp;#123;                  MOBILE = 0;                  HOME = 1;                  WORK = 2;            &amp;#125;           &amp;#125;&amp;#125;</code></pre><h3 id="2-Maven坐标"><a href="#2-Maven坐标" class="headerlink" title="2.Maven坐标"></a>2.Maven坐标</h3><pre><code class="markdown"> &lt;dependencies&gt;      &lt;dependency&gt;      &lt;groupId&gt;commons-lang&lt;/groupId&gt;      &lt;artifactId&gt;commons-lang&lt;/artifactId&gt;      &lt;version&gt;2.6&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;com.google.protobuf&lt;/groupId&gt;      &lt;artifactId&gt;protobuf-java&lt;/artifactId&gt;      &lt;version&gt;3.13.0&lt;/version&gt;    &lt;/dependency&gt;      &lt;dependency&gt;          &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;          &lt;artifactId&gt;kafka_2.10&lt;/artifactId&gt;          &lt;version&gt;0.8.0&lt;/version&gt;      &lt;/dependency&gt;    &lt;!-- 日志包 --&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;      &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;      &lt;version&gt;1.7.5&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;      &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;      &lt;version&gt;1.7.5&lt;/version&gt;    &lt;/dependency&gt;  &lt;/dependencies&gt;</code></pre><p>3.PersonTestProtos.java（根据第一个文件自动生成的java类）</p><h1 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h1><p>看官方文档看到了负载这个词，特别熟悉但又觉得特别陌生，所以就查了一下负载的释译：</p><p>机械设备以及生理组织等在单位时间内所担负的工作量。也指机件及建筑构件承受的重量。 </p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h3><ol><li><p>Broker：Kafka集群包含一个或多个服务器，这种服务器被称为broker。</p></li><li><p>Topic：每条发布到Kafka集群的消息都有一个主题名称，这个主题名称就被称为Topic。</p></li><li><p>Partition：物理上的概念，每个Topic包含一个或多个Partition。</p></li><li><p>Producer：消息生产者，负责发布消息到Kafka Broker。</p></li><li><p>Consumer：消息消费者，向Kafka broker读取消息的客户端</p></li><li><p>Consumer Group：每个Consumer属于一个特定的Consumer Group，group name可单独设定，若不设定则属于默认的group。</p></li></ol><h3 id="为什么选择kafka-kafka的优点"><a href="#为什么选择kafka-kafka的优点" class="headerlink" title="为什么选择kafka(kafka的优点)"></a>为什么选择kafka(kafka的优点)</h3><p> 参考原文：<a href="https://my.oschina.net/u/4288942/blog/4061346">https://my.oschina.net/u/4288942/blog/4061346</a></p><p><strong>多个生产者</strong></p><p>从多个前端系统（不同生产者）接收数据，并以统一的格式对外提供数据。</p><p><strong>多个消费者</strong></p><p>支持多个消费者从一个单独的消息流上读取数据，而且消费者之间互不影响。</p><p>这与其他队列系统不同，其他队列系统的消息一旦被一个客户端读取，其他客户端就无法再读取它。</p><p>另外，多个消费者可以组成一个群组，它们共享一个消息流，并保证整个群组对每个给定的消息只处理一次。</p><p><strong>基于磁盘的数据存储</strong></p><p>允许消费者非实时地读取消息（数据保留特性）消息被提交到磁盘，根据设置的保留规则进行保存。每个主题可以设置单独的保留规则，以便满足不同消费者的需求，各个主题可以保留不同数量的消息。</p><p>消费者可能会因为处理速度慢或突发的流量高峰导致无法及时读取消息，而持久化数据可以保证数据不会丢失。消费者可以被关闭，但消息会继续保留在kafka里。消费者可以从上次中断的地方继续处理消息。</p><p><strong>伸缩性</strong></p><p>用户在开发阶段可以先使用单个broker，再扩展到包含三个broker的小型开发集群，然后随着数据量不断增长，部署到生产环境的集群可能包含上百个broker。对在线集群进行扩展，丝毫不影响整体系统的可用性。</p><p><strong>高性能</strong></p><p>通过横向扩展生产者、消费者和broker，kafka可以轻松处理巨大的消息流。在处理大量数据的同时，它还能保证亚秒级的消息延迟。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;protobuf字节数组的数据传输（Demo）&quot;&gt;&lt;a href=&quot;#protobuf字节数组的数据传输（Demo）&quot; class=&quot;headerlink&quot; title=&quot;protobuf字节数组的数据传输（Demo）&quot;&gt;&lt;/a&gt;protobuf字节数组的数据传输</summary>
      
    
    
    
    <category term="后端" scheme="https://xiaopantongxue816.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="kafka" scheme="https://xiaopantongxue816.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>eclipse</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/02/Eclipse/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/02/Eclipse/</id>
    <published>2020-09-02T08:14:39.000Z</published>
    <updated>2020-09-15T02:48:58.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eclipse创建maven项目"><a href="#Eclipse创建maven项目" class="headerlink" title="Eclipse创建maven项目"></a>Eclipse创建maven项目</h1><p>原文教程：<a href="https://blog.csdn.net/nioqnw/article/details/87177475">https://blog.csdn.net/nioqnw/article/details/87177475</a>  </p><p>超级详细，相比idea有点浪费时间，要配的东西很多</p><h2 id="一-环境"><a href="#一-环境" class="headerlink" title="一.环境"></a>一.环境</h2><p><code>eclipse  ，jdk 1.8，maven 3.6，tomcat 8.5 </code></p><h2 id="二-创建步骤"><a href="#二-创建步骤" class="headerlink" title="二.创建步骤"></a>二.创建步骤</h2><p>1.打开<code>eclipse，file—》new —》project，选择Maven—》Maven Project</code></p><p><code>点击Next--&gt;点击Next：在Filter输入webapp--&gt;点击Next：</code></p><p>groupId设置为<code>cn.pjy</code>，artifactId(项目名)设置为Demo，</p><p>依照这个设置，你的包结构最好是<code>cn.pjy.Demo</code>打头的，如果有个<code>StudentDao</code>，它的全路径就是<code>cn.pjy.Demo.dao.StudentDao</code>。</p><p>点击Finish，完成创建!</p><h2 id="三-配置向导"><a href="#三-配置向导" class="headerlink" title="三.配置向导"></a>三.配置向导</h2><p><strong>1.配置项目JDK：</strong></p><p>右击项目名称，<code>Bulid Path—》Configure Bulid Path 选择Libraries</code></p><p>选中默认jre ，点击Edit，选择自己的<code>jdk（Workspace default JRE（jdk1.8.0 91））</code>点击Finish</p><p><strong>2.创建默认Maven目录</strong></p><p>默认Maven项目目录应该包含文件夹：<code>src/main/java</code>, <code>src/main/resources</code> , <code>src/test/java</code> , <code>src/test/resources</code></p><p>创建缺失的文件夹，<code>右击项目—》New—》Source Floder</code>，folder name输入：<code>src/test/resources</code>，点击Finish,修改OutPut folder ，<code>Bulid Path —》Configure Bulid Path 选择Source</code>，默认</p><p><code>src/main/java</code>，<code>src/main/resources</code>，选择target/classes;<br><code>src/test/java</code> ，<code>src/test/resources</code>, 选择target/test-classes;</p><p>双击OutPut folder修改：target/test-classes</p><p>Q1：创建Source Floder失败？</p><p>答:<code>Bulid Path —》Configure Bulid Path</code> 选择Source,将已存在但显示 Missing 或红叉的文件夹删除，在创建。</p><p>Q2：Source Floder颜色偏暗？</p><p>答：<code>Bulid Path —》Configure Bulid Path</code> 选择Source，将偏暗的Source Floder下Contains test sources 的值Yes改为No。</p><p><strong>3.配置Project Facets</strong></p><p>右击项目，<code>Properties—》Project Facets</code>：</p><p>3.2修改content directory</p><p>取消Dynamic Web Module前的勾，apply，关闭再进入，勾选，</p><p>点击进一步设置：Content directory：<code>src/main/webapp</code></p><p>Q3：Java Resources红叉报错？</p><p>答：1. 在Java Build Path的libraries中，在Java Compiler 中，在Project Facet中统一java版本，统一设置成1.8</p><p>​       2.其它Java项目第一步设置就没问题了，但是maven项目最好在pom.xml中加入如下代码：</p><pre><code>&lt;plugin&gt;    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;    &lt;version&gt;3.1&lt;/version&gt;     &lt;configuration&gt;        &lt;source&gt;1.8&lt;/source&gt;             &lt;target&gt;1.8&lt;/target&gt;      &lt;/configuration&gt;&lt;/plugin&gt;</code></pre><p>右键项目选maven的Update Project 即可。</p><p>Q4：index.jsp红叉报错？</p><p>答：<code>Bulid Path—》Libraries</code>，点击Add Library，选择Server Runtime，选择配置的tomcat，Finish。</p><p>Q5:<code>web.xml is missing and &#39;failOnMissingWebXml&#39; is set to true</code>报错？</p><p>答：pom.xml加入如下代码：</p><pre><code>      &lt;plugin&gt;             &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;             &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;             &lt;version&gt;3.1&lt;/version&gt;             &lt;configuration&gt;                 &lt;source&gt;1.8&lt;/source&gt;                     &lt;target&gt;1.8&lt;/target&gt;              &lt;/configuration&gt;       &lt;/plugin&gt;</code></pre><p>将项目添加到tomcat，启动，访问成功！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Eclipse创建maven项目&quot;&gt;&lt;a href=&quot;#Eclipse创建maven项目&quot; class=&quot;headerlink&quot; title=&quot;Eclipse创建maven项目&quot;&gt;&lt;/a&gt;Eclipse创建maven项目&lt;/h1&gt;&lt;p&gt;原文教程：&lt;a href=&quot;</summary>
      
    
    
    
    <category term="工具" scheme="https://xiaopantongxue816.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="eclipse" scheme="https://xiaopantongxue816.github.io/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>Protobuf</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/02/Protobuf/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/02/Protobuf/</id>
    <published>2020-09-02T02:14:03.000Z</published>
    <updated>2020-09-15T07:05:13.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h1><p>序列化工具下载地址：<a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a> </p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p><strong>1.下载之后，解压到本地，然后配置环境变量</strong></p><pre><code class="bash">D:\Program Files\protoc-3.13.0-win64\bin</code></pre><p><strong>2.准备一个User.proto文件，内容如下：</strong> </p><pre><code># 我们定一个User类，下面有4个属性，分别是id,name,age,mobileoption java_outer_classname=&quot;UserProtoBuf&quot;;  //生成java类名option java_package=&quot;com.pjy.serial&quot;;        //对应的包名packagemessage User&amp;#123;                        //message关键字定义了User对象，最后定义了四个属性字段    required int32 id=1;    required string name=2;    optional int32 age=3;    optional string mobile=4;&amp;#125;</code></pre><p><strong>3.在命令行下通过如下命令，生成一个Java类（UserProtoBuf.java）</strong></p><pre><code class="bash">D:\EclipseWorkspace\ProtobufDemo\src\main\java&gt;protoc --java_out=. com\pjy\serial\User.proto</code></pre><p><strong>4.在maven工程中加入protobuf-java依赖</strong>（要使用protoc创建的java类，必须要加入protobuf-java这个依赖 ）</p><p><em>！！！注意version要和protoc.exe版本一致，否则会报错</em></p><pre><code class="xml">&lt;dependency&gt;      &lt;groupId&gt;com.google.protobuf&lt;/groupId&gt;      &lt;artifactId&gt;protobuf-java&lt;/artifactId&gt;      &lt;version&gt;3.13.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><p><strong>5.测试序列化之后的UserProtoBuf类</strong> </p><pre><code class="java">package com.pjy.serial;import com.pjy.serial.UserProtoBuf.User;public class UserProtoMain &amp;#123;    public static void main(String[] args) &amp;#123;        UserProtoBuf.User.Builder builder = UserProtoBuf.User.newBuilder();        builder.setId(1);        builder.setName(&quot;protoc-java&quot;);        builder.setAge(18);        builder.setMobile(&quot;15011186302&quot;);        User user = builder.build();        System.out.println(user.toString());    &amp;#125;&amp;#125;</code></pre><p>运行成功会打印信息。</p><h3 id="GenProtobuf-idea-插件"><a href="#GenProtobuf-idea-插件" class="headerlink" title="GenProtobuf (idea 插件)"></a>GenProtobuf (idea 插件)</h3><p>搜索Genprotobuf插件下载，在main目录下新建proto目录</p><p>右击proto目录<code> Mark Directory As -&gt;Resouces Root</code>,把编写好的JetProtos.proto文件放在该目录下</p><pre><code class="proto">pjysyntax = &quot;proto3&quot;; // PB协议版本import &quot;google/protobuf/any.proto&quot;; // 引用外部的message，可以是本地的，也可以是此处比较特殊的 Anypackage pjy.protobuf; // 包名，其他 proto 在引用此 proto 的时候，就可以使用 test.protobuf.PersonTest 来使用，// 注意：和下面的 java_package 是两种易混淆概念，同时定义的时候，java_package 具有较高的优先级option java_package = &quot;com.pjy.serial&quot;; // 生成类的包名，注意：会在指定路径下按照该包名的定义来生成文件夹option java_outer_classname=&quot;PersonTestProtos&quot;; // 生成类的类名，注意：下划线的命名会在编译的时候被自动改为驼峰命名message PersonTest &amp;#123;      int32 id = 1; // int 类型      string name = 2; // string 类型      string email = 3;      Sex sex = 4; // 枚举类型      repeated PhoneNumber phone = 5; // 引用下面定义的 PhoneNumber 类型的 message      map&lt;string, string&gt; tags = 6; // map 类型      repeated google.protobuf.Any details = 7; // 使用 google 的 any 类型      // 定义一个枚举      enum Sex &amp;#123;              DEFAULT = 0;              MALE = 1;              Female = 2;      &amp;#125;      // 定义一个 message      message PhoneNumber &amp;#123;            string number = 1;            PhoneType type = 2;            enum PhoneType &amp;#123;                  MOBILE = 0;                  HOME = 1;                  WORK = 2;            &amp;#125;      &amp;#125;&amp;#125;</code></pre><p>菜单栏-》Tools-》Confiure Genprotobuf-&gt;设置生成语言（java）和生成目录<code>（D:\ideaWorkPlace\ProtobufDemo\src\main\java）</code></p><p>菜单栏-》Tools-》Generate all Protobufs（在目的路径下编译生成java文件）</p><p>Maven引入指定包</p><pre><code class="xml">&lt;!-- protobuf --&gt;&lt;dependency&gt;         &lt;groupId&gt;com.google.protobuf&lt;/groupId&gt;         &lt;artifactId&gt;protobuf-java&lt;/artifactId&gt;         &lt;version&gt;3.7.1&lt;/version&gt;&lt;/dependency&gt;</code></pre><pre><code class="java">Main.javapackage com.pjy.serial;import com.google.protobuf.InvalidProtocolBufferException;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;public class ProtoTestMain &amp;#123;    public static void main(String[] args) &amp;#123;            try &amp;#123;                /** Step1：生成 personTest 对象 */                // personTest 构造器                PersonTestProtos.PersonTest.Builder personBuilder = PersonTestProtos.PersonTest.newBuilder();                // personTest 赋值                personBuilder.setName(&quot;Jet Chen&quot;);                personBuilder.setEmail(&quot;ckk505214992@gmail.com&quot;);                personBuilder.setSex(PersonTestProtos.PersonTest.Sex.MALE);                // 内部的 PhoneNumber 构造器                PersonTestProtos.PersonTest.PhoneNumber.Builder phoneNumberBuilder = PersonTestProtos.PersonTest.PhoneNumber.newBuilder();                // PhoneNumber 赋值                phoneNumberBuilder.setType(PersonTestProtos.PersonTest.PhoneNumber.PhoneType.MOBILE);                phoneNumberBuilder.setNumber(&quot;17717037257&quot;);                // personTest 设置 PhoneNumber                personBuilder.addPhone(phoneNumberBuilder);                // 生成 personTest 对象                PersonTestProtos.PersonTest personTest = personBuilder.build();                /** Step2：序列化和反序列化 */                // 方式一 byte[]：                // 序列化//            byte[] bytes = personTest.toByteArray();                // 反序列化//            PersonTestProtos.PersonTest personTestResult = PersonTestProtos.PersonTest.parseFrom(bytes);//            System.out.println(String.format(&quot;反序列化得到的信息，姓名：%s，性别：%d，手机号：%s&quot;, personTestResult.getName(), personTest.getSexValue(), personTest.getPhone(0).getNumber()));                // 方式二 ByteString：                // 序列化//            ByteString byteString = personTest.toByteString();//            System.out.println(byteString.toString());                // 反序列化//            PersonTestProtos.PersonTest personTestResult = PersonTestProtos.PersonTest.parseFrom(byteString);//            System.out.println(String.format(&quot;反序列化得到的信息，姓名：%s，性别：%d，手机号：%s&quot;, personTestResult.getName(), personTest.getSexValue(), personTest.getPhone(0).getNumber()));                // 方式三 InputStream                // 粘包,将一个或者多个protobuf 对象字节写入 stream                // 序列化                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();                personTest.writeDelimitedTo(byteArrayOutputStream);                // 反序列化，从 steam 中读取一个或者多个 protobuf 字节对象                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());                PersonTestProtos.PersonTest personTestResult = PersonTestProtos.PersonTest.parseDelimitedFrom(byteArrayInputStream);                System.out.println(String.format(&quot;反序列化得到的信息，姓名：%s，性别：%d，手机号：%s&quot;, personTestResult.getName(), personTest.getSexValue(), personTest.getPhone(0).getNumber()));            &amp;#125; catch (InvalidProtocolBufferException e) &amp;#123;                e.printStackTrace();            &amp;#125;catch (IOException e) &amp;#123;                e.printStackTrace();            &amp;#125;        &amp;#125;&amp;#125;</code></pre><p>运行输出:</p><pre><code>反序列化得到的信息，姓名：Jet Chen，性别：1，手机号：17717037257</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Protobuf&quot;&gt;&lt;a href=&quot;#Protobuf&quot; class=&quot;headerlink&quot; title=&quot;Protobuf&quot;&gt;&lt;/a&gt;Protobuf&lt;/h1&gt;&lt;p&gt;序列化工具下载地址：&lt;a href=&quot;https://github.com/protocol</summary>
      
    
    
    
    <category term="后端" scheme="https://xiaopantongxue816.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="序列化" scheme="https://xiaopantongxue816.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Linux软件安装</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/01/Linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/01/Linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</id>
    <published>2020-09-01T02:46:17.000Z</published>
    <updated>2020-09-15T07:30:16.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h1><p>实验过程中如果出现⼀些诸如客户端不能连通或访问等问题，可尝试考虑关闭防⽕墙：</p><pre><code class="bash"> systemctl stop firewalld.service  systemctl disable firewalld.service </code></pre><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><strong>1、准备Git安装包</strong></p><p>github下载地址：<a href="https://github.com/git/git/releases">https://github.com/git/git/releases</a> </p><p>下载好的安装包 git-2.28.0.tar.gz 直接放在了 root ⽬录下 然后将其本地解压，得到 git-2.28.0 ⽬录： </p><pre><code class="bash">[root@localhost ~]# tar -zxvf git-2.28.0.tar.gz</code></pre><p><strong>2、提前安装可能需要的依赖</strong></p><pre><code class="bash">yum install curl-devel expat-devel gettext-devel openssl-devel zlibdevel gcc-c++ perl-ExtUtils-MakeMaker</code></pre><p><strong>3、编译安装Git</strong></p><p>进⼊到对应⽬录，执⾏配置、编译、安装命令即可 </p><pre><code class="bash">[root@localhost ~]# cd git-2.28.0/[root@localhost git-2.26.2]# make configure[root@localhost git-2.26.2]# ./configure --prefix=/usr/local/git[root@localhost git-2.26.2]# make profix=/usr/local/git[root@localhost git-2.26.2]# make install</code></pre><p><strong>4、将Git加入环境变量</strong></p><p>将 Git 的可执⾏程序加⼊环境变量，便于后续使⽤ </p><p>编辑配置⽂件</p><pre><code class="bash">vim /etc/profile</code></pre><p>尾部加⼊ Git 的 bin 路径配置</p><pre><code class="bash">export GIT_HOME=/usr/local/gitexport PATH=$PATH:$GIT_HOME/bin</code></pre><p>使环境变量⽣效</p><pre><code class="bash">source /etc/profile </code></pre><p><strong>5、查看安装结果</strong></p><pre><code class="bash">git --version</code></pre><h3 id=""><a href="#" class="headerlink" title="***"></a>***</h3><ol><li><p>configure是一个shell脚本，生成合适的Makefile文件</p><p>Linux中的Configure选项配置参数详解：<a href="https://www.jb51.net/LINUXjishu/363271.html">https://www.jb51.net/LINUXjishu/363271.html</a> </p></li><li><p>可能出现错误：</p><pre><code class="bash">GIT_VERSION = 2.19.0GEN configure/bin/sh: autoconf: 未找到命令 make: *** [configure] 错误 127</code></pre><pre><code class="bash"># 如果出现可以通过执行：（安装autoconf安装包及对应的依赖）yum -y install autoconf（autoconf命令的主要作用是创建configure）</code></pre></li><li><p>./configure –prefix=/usr/local/git 安装在/usr/local/git 下面，执行文件就会安装在/usr/local/git/bin （而不是默认的 /usr/local/bin)，资源文件就会安装在 /usr/local/git/share（而不是默认的/usr/local/share） </p><p>“./configure是用来检测你的安装平台的目标特征的。比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，它是个shell脚本。 ”——-所以应该就是用来检测是windows、Linux、还是Mac的吧</p></li><li><p>make profix=/usr/local/git </p><p>“make是用来编译的，它从Makefile中读取指令，然后编译。 ”</p></li><li><p>make install</p><p>“make install是用来安装的，它也从Makefile中读取指令，安装到指定的位置。 ”</p></li></ol><h1 id="JDK（JAVA环境）"><a href="#JDK（JAVA环境）" class="headerlink" title="JDK（JAVA环境）"></a>JDK（JAVA环境）</h1><p><strong>1.准备JDK安装包</strong></p><p>下载地址：</p><p>官网 ：<a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a>  </p><p>华为镜像 ：<a href="https://repo.huaweicloud.com/java/jdk/">https://repo.huaweicloud.com/java/jdk/</a>  </p><p>下载了jdk-8u181-linux-x64.tar.gz 安装包，直接放在了 root ⽬录下 </p><p><strong><em>2.卸载已有的OPENJDK（如果有）</em></strong></p><p>如果系统⾃带有 OpenJDK ，可以按照如下步骤提前卸载。</p><p> ⾸先查找已经安装的 OpenJDK 包：</p><pre><code class="bash"> rpm -qa | grep java </code></pre><p> 接下来可以将 java 开头的安装包均卸载即可：</p><pre><code class="bash">yum -y remove java-1.7.0-openjdk-1.7.0.141-2.6.10.5.el7.x86_64yum -y remove java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64... 省略 ...</code></pre><p><strong>3.创建⽬录并解压</strong></p><p>1、在 /usr/local/ 下创建 java ⽂件夹并进⼊ </p><pre><code class="bash">cd /usr/local/mkdir javacd java</code></pre><p>2、将上⾯准备好的 JDK 安装包解压到 /usr/local/java 中即可 </p><pre><code class="bash">tar -zxvf /root/jdk-8u181-linux-x64.tar.gz -C ./</code></pre><p>解压完之后， /usr/local/java ⽬录中会出现⼀个 jdk1.8.0_181 的⽬录 </p><p><strong>4.配置JDK环境变量</strong></p><p>编辑 /etc/profile ⽂件，在⽂件尾部加⼊如下 JDK 环境配置</p><pre><code class="bash">JAVA_HOME=/usr/local/java/jdk1.8.0_181CLASSPATH=$JAVA_HOME/lib/PATH=$PATH:$JAVA_HOME/binexport PATH JAVA_HOME CLASSPATH</code></pre><p>然后执⾏如下命令让环境变量⽣效 </p><pre><code class="bash">source /etc/profile</code></pre><p><strong>5.验证JDK安装结果</strong></p><p>输⼊如下命令即可检查安装结果： </p><pre><code class="bash">java -versionjavac</code></pre><h3 id="-1"><a href="#-1" class="headerlink" title="***"></a>***</h3><ol><li><p>tar -zxvf /root/jdk-8u181-linux-x64.tar.gz -C ./ </p><table><thead><tr><th align="center">指令</th><th>含义</th></tr></thead><tbody><tr><td align="center">-z</td><td>通过gzip指令压缩/解压缩文件，文件名最好为*.tar.gz</td></tr><tr><td align="center">-x</td><td>从归档文件中提取文件</td></tr><tr><td align="center">-v</td><td>显示指令执行过程</td></tr><tr><td align="center">-f&lt;备份文件&gt;</td><td>指定备份文件</td></tr><tr><td align="center">-C &lt;目录&gt;</td><td>切换工作目录，先进入指定目录再执行压缩/解压缩操作，可用于仅压缩特定目录里的内容或解压缩到特定目录</td></tr></tbody></table></li></ol><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p><strong>1.⾸先准备安装包</strong></p><p>下载地址：<a href="https://mirrors.huaweicloud.com/mysql/Downloads/MySQL-5.7/">https://mirrors.huaweicloud.com/mysql/Downloads/MySQL-5.7/</a> </p><p> 这⾥下载的是 mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz 安装包，直接放在了 root ⽬录下 </p><p><strong><em>2.卸载系统⾃带的MARIADB（如果有）</em></strong></p><p>如果系统之前⾃带 Mariadb ，可以先卸载</p><p>查询已安装的 Mariadb 安装包： </p><pre><code class="bash">rpm -qa|grep mariadb</code></pre><p>将其均卸载： </p><pre><code class="bash">yum -y remove mariadb-server-5.5.56-2.el7.x86_64yum -y remove mariadb-5.5.56-2.el7.x86_64yum -y remove mariadb-devel-5.5.56-2.el7.x86_64yum -y remove mariadb-libs-5.5.56-2.el7.x86_64</code></pre><p><strong>3.解压MYSQL安装包</strong></p><p>将上⾯准备好的 MySQL 安装包解压到 /usr/local/ ⽬录，并重命名为 mysql </p><pre><code class="bash">tar -zxvf /root/mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz -C /usr/local/mv mysql-5.7.31-linux-glibc2.12-x86_64 mysql</code></pre><p><strong>4.创建MYSQL⽤户和⽤户组</strong></p><pre><code class="bash">groupadd mysqluseradd -g mysql mysql</code></pre><p>同时新建 /usr/local/mysql/data ⽬录，后续备⽤ </p><p><strong>5.修改MYSQL⽬录的归属⽤户</strong></p><pre><code class="bash">[root@localhost mysql]# chown -R mysql:mysql ./</code></pre><p><strong>6.准备MYSQL的配置⽂件</strong></p><p>在 /etc ⽬录下新建 my.cnf ⽂件 </p><p>写⼊如下简化配置： </p><pre><code class="bash">[mysql]# 设置mysql客户端默认字符集default-character-set=utf8socket=/var/lib/mysql/mysql.sock[mysqld]skip-name-resolve#设置3306端⼝port = 3306socket=/var/lib/mysql/mysql.sock# 设置mysql的安装⽬录basedir=/usr/local/mysql# 设置mysql数据库的数据的存放⽬录datadir=/usr/local/mysql/data# 允许最⼤连接数max_connections=200# 服务端使⽤的字符集默认为8⽐特编码的latin1字符集character-set-server=utf8# 创建新表时将使⽤的默认存储引擎default-storage-engine=INNODBlower_case_table_names=1max_allowed_packet=16M</code></pre><p>同时使⽤如下命令创建 /var/lib/mysql ⽬录，并修改权限： </p><pre><code class="bash">mkdir /var/lib/mysqlchmod 777 /var/lib/mysql</code></pre><p><strong>7.正式开始安装MYSQL</strong></p><p>执⾏如下命令正式开始安装： </p><pre><code class="bash">cd /usr/local/mysql./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</code></pre><p><strong>注意：记住上⾯打印出来的 root 的密码，后⾯⾸次登陆需要使⽤</strong> b=iqYXuZh5YX</p><p><strong>8.复制启动脚本到资源⽬录</strong></p><p>执⾏如下命令复制 ：</p><pre><code class="bash">[root@localhost mysql]# cp ./support-files/mysql.server /etc/init.d/mysqld</code></pre><p>并修改 /etc/init.d/mysqld ，修改其 basedir 和 datadir 为实际对应⽬录： </p><pre><code class="bash">basedir=/usr/local/mysqldatadir=/usr/local/mysql/data</code></pre><p><strong>9.设置MYSQL系统服务并开启⾃启</strong></p><p>⾸先增加 mysqld 服务控制脚本执⾏权限： </p><pre><code class="bash">chmod +x /etc/init.d/mysqld</code></pre><p>同时将 mysqld 服务加⼊到系统服务： </p><pre><code class="bash">chkconfig --add mysqld</code></pre><p>最后检查 mysqld 服务是否已经⽣效即可：</p><pre><code class="bash">chkconfig --list mysqld</code></pre><p>这样就表明 mysqld 服务已经⽣效了，在2、3、4、5运⾏级别随系统启动⽽⾃动启动，以后可以直接使 </p><p>⽤ service 命令控制 mysql 的启停。</p><p><strong>10.启动MYSQLD</strong></p><p>直接执⾏ ：</p><pre><code class="bash">service mysqld start</code></pre><p><strong>11.将 MYSQL 的 BIN ⽬录加⼊ PATH 环境变量</strong></p><p>这样⽅便以后在任意⽬录上都可以使⽤ mysql 提供的命令。 </p><p>编辑 ~/.bash_profile ⽂件，在⽂件末尾处追加如下信息:</p><pre><code class="bash">export PATH=$PATH:/usr/local/mysql/bin</code></pre><p>最后执⾏如下命令使环境变量⽣效 ：</p><pre><code class="bash">source ~/.bash_profile</code></pre><p><strong>12.⾸次登陆MYSQL</strong></p><p>以 root 账户登录 mysql ，使⽤上⽂安装完成提示的密码进⾏登⼊</p><pre><code class="bash">mysql -u root -p</code></pre><p><strong>13.接下来修改ROOT账户密码</strong></p><p>在mysql的命令⾏执⾏如下命令即可，密码可以换成你想⽤的密码</p><pre><code class="bash">mysql&gt;alter user user() identified by &quot;root&quot;;mysql&gt;flush privileges;</code></pre><p>⽐如这⾥将密码设置成简单的“root”了</p><p><strong>14.设置远程主机登录</strong></p><pre><code class="bash">mysql&gt; use mysql;mysql&gt; update user set user.Host=&#39;%&#39; where user.User=&#39;root&#39;;mysql&gt; flush privileges;</code></pre><h3 id="-2"><a href="#-2" class="headerlink" title="***"></a>***</h3><p>1.在执行 service mysqld start  的时候报错</p><pre><code class="bash">mysqld_safe Directory &#39;/var/lib/mysql&#39; for UNIX socket file don&#39;t exists.The server quit without updating PID file (/usr/local/mysql/data/localhost.localdomain.pid).</code></pre><p>解决方案一：selinux惹的祸，如果是centos系统，默认会开启selinux 解决方法：关闭它，打开/etc/selinux/config，把SELINUX=enforcing改为SELINUX=disabled后存盘退出重启机器试试。 （没用）</p><p>解决方案二：可能进程里已经存在mysql进程 解决方法：用命令“ps -ef|grep mysqld”查看是否有mysqld进程，如果有使用“kill -9  进程号”杀死，然后重新启动mysqld！ （重新连接机器 mysqld还是会自动启）</p><p>解决方案三：3.可能是第二次在机器上安装mysql，有残余数据影响了服务的启动。 解决方法：去mysql的数据目录/data看看，如果存在mysql-bin.index，就赶快把它删除掉吧，它就是罪魁祸首了。 （查看了没有）</p><p>解决方案四：skip-federated字段问题 解决方法：检查一下/etc/my.cnf文件中有没有没被注释掉的skip-federated字段，如果有就立即注释掉。（没有该字段） </p><p>…..后来我发现是安装漏掉了两步错误就在打出的日志上不知道我为什么选择视而不见</p><pre><code class="bash">mkdir /var/lib/mysqlchmod 777 /var/lib/mysql</code></pre><p>参考文章：</p><p>Linux下改动mysql的存储目录后，mysql无法启动：<a href="https://bbs.csdn.net/topics/340205817">https://bbs.csdn.net/topics/340205817</a> </p><p>The server quit without updating PID file (/usr/local/<a href="https://edu.aliyun.com/jiaocheng/1107">my</a><a href="https://edu.aliyun.com/jiaocheng/1043">sql</a>/var/xxx.pid). … failed错误解决 ：</p><p> <a href="https://blog.csdn.net/zhou75771217/article/details/82893997">https://blog.csdn.net/zhou75771217/article/details/82893997</a> </p><p>2.在远程连接数据库时出现问题</p><pre><code class="bash">错误码：2003Can’t connect to MySQL server on </code></pre><p>导致这个问题可能有两个原因：</p><ol><li><p>远程访问没有启动（错误号码：2003）实际已启动（在第14步）</p></li><li><p>虚拟机防火墙没有关闭</p><pre><code class="bash">CentOS7 的防火墙配置# 查看防火墙状态systemctl status firewalld# 关闭防火墙：systemctl stop firewalld.service# 开启防火墙：systemctl start firewalld.service# 关闭开机启动：systemctl disable firewalld.service# 开启开机启动：systemctl enable firewalld.service</code></pre><p>参考原文：<a href="https://blog.csdn.net/xc_zhou/article/details/80879810">https://blog.csdn.net/xc_zhou/article/details/80879810</a> </p></li></ol><h1 id="Maven项⽬构建和管理⼯具安装"><a href="#Maven项⽬构建和管理⼯具安装" class="headerlink" title="Maven项⽬构建和管理⼯具安装"></a>Maven项⽬构建和管理⼯具安装</h1><p><strong>1.准备MAVEN安装包并解压</strong></p><p>下载地址（华为云镜像）：<a href="https://mirrors.huaweicloud.com/apache/maven/maven-3/3.6.3/binaries/">https://mirrors.huaweicloud.com/apache/maven/maven-3/3.6.3/binaries/</a></p><p>将下载的 apache-maven-3.6.3-bin.tar.gz 安装包，放置于提前创建好的 /opt/maven ⽬录下。</p><p> 执⾏命令解压：</p><pre><code class="bash">tar zxvf apache-maven-3.6.3-bin.tar.gz</code></pre><p> 即可在当前⽬录得到 /opt/maven/apache-maven-3.6.3 ⽬录 </p><p><strong>2.配置MAVEN加速镜像源</strong></p><p>这⾥配置的是阿⾥云的maven镜像源。编辑修改 /opt/maven/apache-maven-3.6.3/conf/settings.xml ⽂件，在标签对⾥添加：</p><pre><code class="xml">&lt;mirror&gt;    &lt;id&gt;alimaven&lt;/id&gt;    &lt;name&gt;aliyun maven&lt;/name&gt;    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;&lt;/mirror&gt;</code></pre><p><strong>3.配置环境变量</strong></p><p>因为下载的是⼆进制版安装包，所以解压完，配置好环境变量即可使⽤了。 编辑修改 /etc/profile ⽂件，在⽂件尾部添加如下内容，配置 maven 的安装路径 :</p><pre><code class="bash">export MAVEN_HOME=/opt/maven/apache-maven-3.6.3export PATH=$MAVEN_HOME/bin:$PATH</code></pre><p> 刷新环境变量，让 maven 环境的路径配置⽣效</p><pre><code class="bash"> source /etc/profile</code></pre><p>检验安装结果 ,能打印出 maven 版本信息说明安装、配置成功 </p><pre><code class="bash">mvn –v</code></pre><h1 id="应⽤服务器Tomcat"><a href="#应⽤服务器Tomcat" class="headerlink" title="应⽤服务器Tomcat"></a>应⽤服务器Tomcat</h1><p><strong>1.准备安装包</strong></p><p>下载地址：<a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a></p><p>这⾥使⽤的是 8.5.57 版： apache-tomcat-8.5.57.tar.gz ，直接将其放在了 /root ⽬录下 </p><p>在 /usr/local/ 下创建 tomcat ⽂件夹并进⼊ </p><pre><code class="bash">cd /usr/local/mkdir tomcatcd tomcat</code></pre><p>将 Tomcat 安装包解压到 /usr/local/tomcat </p><pre><code class="bash">[root@localhost tomcat]# tar -zxvf /root/apache-tomcat-8.5.57.tar.gz -C ./</code></pre><p>解压完之后， /usr/local/tomcat ⽬录中会出现⼀个 apache-tomcat-8.5.57 的⽬录 </p><p><strong>2.启动TOMCAT</strong></p><p>直接进 apache-tomcat-8.5.57 ⽬录，执⾏其中 bin ⽬录下的启动脚本即可 </p><pre><code class="bash">8.5.57[root@localhost apache-tomcat-8.5.57]# cd bin/[root@localhost bin]# ./startup.sh</code></pre><p>浏览器访问： 你的主机IP:8080 </p><p><strong>3.配置快捷操作和开机启动</strong></p><p>⾸先进⼊ /etc/rc.d/init.d ⽬录，创建⼀个名为 tomcat 的⽂件，并赋予执⾏权限 </p><pre><code class="bash">[root@localhost ~]# cd /etc/rc.d/init.d/[root@localhost init.d]# touch tomcat[root@localhost init.d]# chmod +x tomcat</code></pre><p>接下来编辑 tomcat ⽂件，并在其中加⼊如下内容： </p><pre><code class="bash">#!/bin/bash#chkconfig:- 20 90#description:tomcat#processname:tomcatTOMCAT_HOME=/usr/local/tomcat/apache-tomcat-8.5.57case $1 in start) su root $TOMCAT_HOME/bin/startup.sh;; stop) su root $TOMCAT_HOME/bin/shutdown.sh;; *) echo &quot;require start|stop&quot; ;;esac</code></pre><p>这样后续对于Tomcat的开启和关闭只需要执⾏如下命令即可： </p><pre><code class="bash">service tomcat startservice tomcat stop</code></pre><p>最后加⼊开机启动即可： </p><pre><code class="bash">chkconfig --add tomcatchkconfig tomcat on</code></pre><h3 id="-3"><a href="#-3" class="headerlink" title="***"></a>***</h3><p>1.报错：</p><pre><code class="bash">Neither the JAVA_HOME nor the JRE_HOME environment variable is definedAt least one of these environment variable is needed to run this program</code></pre><p>解决：</p><pre><code class="bash">cd /usr/local/tomcat/apache-tomcat-8.5.57/binvim setclasspath.sh # 加入两行export JAVA_HOME=/usr/local/java/jdk1.8.0_181export JRE_HOME=/usr/local/java/jdk1.8.0_181/jre保存退出</code></pre><p>原文：<a href="https://blog.csdn.net/zoiery/article/details/83589489?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">https://blog.csdn.net/zoiery/article/details/83589489?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a></p><h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><p>下载地址：<a href="https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.1">https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.1</a></p><p><strong>1.准备安装包</strong></p><p> 下载apache-zookeeper-3.6.1-bin.tar.gz 压缩包，并将其放在 了 /root ⽬录下 </p><p><strong>2.解压并安装</strong></p><p> 在 /usr/local/ 下创建 zookeeper ⽂件夹并进⼊ </p><pre><code class="bash">cd /usr/local/mkdir zookeepercd zookeeper</code></pre><p>将 ZooKeeper 安装包解压到 /usr/local/zookeeper 中</p><pre><code class="bash">[root@localhost zookeeper]# tar -zxvf /root/apache-zookeeper-3.6.1-bin.tar.gz -C ./</code></pre><p>解压完之后， /usr/local/zookeerper ⽬录中会出现⼀个 apache-zookeeper-3.6.1-bin 的⽬录 </p><p><strong>3.创建DATA⽬录</strong> </p><p>直接在 /usr/local/zookeeper/apache-zookeeper-3.6.1-bin ⽬录中创建⼀个 data ⽬录 ,等下该 data ⽬录地址要配到 ZooKeeper 的配置⽂件中</p><pre><code class="bash">/usr/local/zookeeper/apache-zookeeper-3.6.1-bin/data</code></pre><p><strong>4.创建配置⽂件并修改</strong> </p><p>进⼊到 zookeeper 的 conf ⽬录，复制 zoo_sample.cfg 得到 zoo.cfg ： </p><pre><code class="ssh">[root@localhost apache-zookeeper-3.6.1-bin]# cd conf/[root@localhost conf]# cp zoo_sample.cfg zoo.cfg</code></pre><p>修改配置⽂件 zoo.cfg ，将其中的 dataDir 修改为上⾯刚创建的 data ⽬录，其他选项可以按需配置 </p><p><strong>5.启动ZOOKEEPER</strong> </p><pre><code class="ssh">[root@localhost apache-zookeeper-3.6.1-bin]# ./bin/zkServer.sh start</code></pre><p>启动后可以通过如下命令来检查启动后的状态： </p><pre><code class="ssh">[root@localhost apache-zookeeper-3.6.1-bin]# ./bin/zkServer.sh status</code></pre><p>从图中也可以看出zookeeper默认会绑定端⼝ 2181 </p><p><strong>6.配置环境变量</strong></p><p> 编辑配置⽂件： </p><pre><code class="ssh">vim /etc/profile</code></pre><p>尾部加⼊ ZooKeeper 的 bin 路径配置：</p><pre><code class="ssh">export ZOOKEEPER_HOME=/usr/local/zookeeper/apache-zookeeper-3.6.1-binexport PATH=$PATH:$ZOOKEEPER_HOME/bin</code></pre><p>最后执⾏ source /etc/profile 使环境变量⽣效。</p><p><strong>7.设置开机⾃启</strong> </p><p>⾸先进⼊ /etc/rc.d/init.d ⽬录，创建⼀个名为 zookeeper 的⽂件，并赋予执⾏权限 </p><pre><code class="ssh">[root@localhost ~]# cd /etc/rc.d/init.d/[root@localhost init.d]# touch zookeeper[root@localhost init.d]# chmod +x zookeeper</code></pre><p>接下来编辑 zookeeper ⽂件，并在其中加⼊如下内容： </p><pre><code class="ssh">#!/bin/bash#chkconfig:- 20 90#description:zookeeper#processname:zookeeperZOOKEEPER_HOME=/usr/local/zookeeper/apache-zookeeper-3.6.1-binexport JAVA_HOME=/usr/local/java/jdk1.8.0_161 # 此处根据你的实际情况更换对应case $1 in start) su root $ZOOKEEPER_HOME/bin/zkServer.sh start;; stop) su root $ZOOKEEPER_HOME/bin/zkServer.sh stop;; status) su root $ZOOKEEPER_HOME/bin/zkServer.sh status;; restart) su root $ZOOKEEPER_HOME/bin/zkServer.sh restart;; *) echo &quot;require start|stop|status|restart&quot; ;;esac</code></pre><p>最后加⼊开机启动即可： </p><pre><code class="ssh">chkconfig --add zookeeperchkconfig zookeeper on</code></pre><h3 id="-4"><a href="#-4" class="headerlink" title="***"></a>***</h3><p>1.启动的时候显示成功了,查看状态的时候却报错了: </p><pre><code class="ssh">[root@localhost ~]# zkServer.sh startZooKeeper JMX enabled by defaultUsing config: /usr/local/zookeeper/apache-zookeeper-3.6.1-bin/bin/../conf/zoo.cfgStarting zookeeper ... STARTED[root@localhost ~]# zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: /usr/local/zookeeper/apache-zookeeper-3.6.1-bin/bin/../conf/zoo.cfgClient port found: 2181. Client address: localhost.Error contacting service. It is probably not running.</code></pre><p>rm version-2</p><p>[root@localhost conf]# ps -ef|grep 2181<br>root       2550   1849  0 09:26 pts/0    00:00:00 grep –color=auto 2181</p><p>kill -9 1849</p><h1 id="消息队列Kafka"><a href="#消息队列Kafka" class="headerlink" title="消息队列Kafka"></a>消息队列Kafka</h1><p>因为 Kafka 的运⾏环境依赖于 ZooKeeper ，所以⾸先得安装并运⾏ ZooKeeper 。 </p><p>下载地址：<a href="http://archive.apache.org/dist/kafka">http://archive.apache.org/dist/kafka</a></p><p><strong>2.准备KAFKA安装包</strong></p><p>这⾥下载的是 2.5.0 版： kafka_2.12-2.5.0.tgz ，将下载后的安装包放在了 /root ⽬录下 </p><p><strong>3.解压并安装</strong> </p><p> /usr/local/ 下创建 kafka ⽂件夹并进⼊ </p><pre><code class="ssh">cd /usr/local/mkdir kafkacd kafka</code></pre><p>将Kafka安装包解压到 /usr/local/kafka 中</p><pre><code class="ssh">[root@localhost kafka]# tar -zxvf /root/kafka_2.12-2.5.0.tgz -C ./</code></pre><p>解压完之后， /usr/local/kafka ⽬录中会出现⼀个 kafka_2.12-2.5.0 的⽬录 </p><p><strong>4.创建LOGS⽬录</strong></p><p> 这⾥直接在 /usr/local/kafka/kafka_2.12-2.5.0 ⽬录中创建⼀个 logs ⽬录, 等下该 logs ⽬录地址要配到Kafka的配置⽂件中。 </p><pre><code class="ssh">/usr/local/kafka/kafka_2.12-2.5.0/logs</code></pre><p><strong>5.修改配置⽂件</strong> </p><p>进⼊到 Kafka 的 config ⽬录，编辑配置⽂件 server.properties </p><pre><code class="ssh">[root@localhost kafka_2.12-2.5.0]# cd config/[root@localhost config]# vim server.properties</code></pre><p>修改配置⽂件，⼀是将其中的 log.dirs 修改为上⾯刚创建的 logs ⽬录，其他选项可以按需配置 </p><p>另外关注⼀下连接 ZooKeeper 的相关配置，根据实际情况进⾏配置： </p><p><strong>6.启动KAFKA</strong> </p><p>执⾏</p><pre><code class="ssh">./bin/kafka-server-start.sh ./config/server.properties</code></pre><p>如果需要后台启动，则加上 -daemon 参数即可 </p><p><strong>7.实验验证</strong></p><p> ⾸先创建⼀个名为 codesheep 的 topic ： </p><pre><code class="ssh">./bin/kafka-topics.sh --create --bootstrap-server 192.168.220.10:9092 --replication-factor 1 --partitions 1 --topic codesheep</code></pre><p>创建完成以后，可以使⽤命令来列出⽬前已有的 topic 列表 </p><pre><code class="ssh">./bin/kafka-topics.sh --list --bootstrap-server 192.168.220.10:9092</code></pre><p>用两个终端模拟生产者和消费者：</p><p>创建⼀个⽣产者，⽤于在 codesheep 这个 topic 上⽣产消息： </p><pre><code class="ssh">&gt;^C[root@localhost kafka_2.12-2.5.0]# ./bin/kafka-console-producer.sh --bootstrap-server 192.168.220.10:9092 --topic codesheep&gt;hello world!&gt;hello code sheep</code></pre><p>⽽后接着创建⼀个消费者，⽤于在 codesheep 这个 topic 上获取消息： </p><pre><code class="ssh"> [root@localhost kafka_2.12-2.5.0]# ./bin/kafka-console-consumer.sh --bootstrap-server 192.168.220.10:9092 --topic codesheephello world!hello code sheep</code></pre><p>此时⽣产者发出的消息，在消费者端可以获取到。</p><h3 id="-5"><a href="#-5" class="headerlink" title="***"></a>***</h3><p>1.启动kafka时报错</p><pre><code class="ssh">[2020-09-08 09:01:57,172] INFO Socket error occurred: 192.168.220.10/192.168.220.10:2181: 拒绝连接 (org.apache.zookeeper.ClientCnxn)[2020-09-08 09:01:58,300] INFO Opening socket connection to server 192.168.220.10/192.168.220.10:2181. Will not attempt to authenticate using SASL (unknown error) (org.apache.zookeeper.ClientCnxn)</code></pre><p>防火墙已关</p><pre><code class="ssh">[root@localhost zookeeper]# systemctl status firewalld● firewalld.service - firewalld - dynamic firewall daemon   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)   Active: inactive (dead)     Docs: man:firewalld(1)</code></pre><p>到目录下查看日志</p><pre><code class="ssh">cd /usr/local/zookeeper/apache-zookeeper-3.6.1-bin/logs vim zookeeper-root-server-localhost.localdomain.out </code></pre><pre><code># 报错内容Caused by: java.io.IOException: Failed to bind to /0.0.0.0:8080        at org.eclipse.jetty.server.ServerConnector.openAcceptChannel(ServerConnector.java:346)        at org.eclipse.jetty.server.ServerConnector.open(ServerConnector.java:307)        Caused by: java.net.BindException: 地址已在使用        at sun.nio.ch.Net.bind0(Native Method)        at sun.nio.ch.Net.bind(Net.java:433)        at sun.nio.ch.Net.bind(Net.java:425)        at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)        at org.eclipse.jetty.server.ServerConnector.openAcceptChannel(ServerConnector.java:342)        ... 12 more Unable to start AdminServer, exiting abnormally2020-09-08 10:21:37,612 [myid:] - INFO  [main:ZKAuditProvider@42] - ZooKeeper audit is disabled.2020-09-08 10:21:37,614 [myid:] - ERROR [main:ServiceUtils@42] - Exiting JVM with code 4</code></pre><p>端口被占用</p><p>解决：在zoo.cfg文件中添加一行</p><pre><code class="ssh">admin.serverPort=9090（未使用的端口）</code></pre><p>原文：<a href="https://www.pianshen.com/article/8473965843/">https://www.pianshen.com/article/8473965843/</a></p><p>2.启动kafka时报错</p><pre><code class="ssh">[2020-09-08 10:31:59,624] WARN [Controller id=0, targetBrokerId=0] Connection to node 0 (/192.168.220.10:9092) could not be established. Broker may not be available. (org.apache.kafka.clients.NetworkClient)</code></pre><p>解决：添加 listeners=PLAINTEXT://192.168.220.10:9092</p><pre><code class="ssh">cd /usr/local/kafka/kafka_2.12-2.5.0/configvim server.properties </code></pre><p>将localhost改成ip即可，可能localhost没配置，kafka不认。 </p><p>3.创建⼀个名为 codesheep 的 topic 时报错</p><pre><code class="ssh">[2020-09-08 10:52:35,149] WARN [AdminClient clientId=adminclient-1] Connection to node -1 (localhost/127.0.0.1:9092) could not be established. Broker may not be available. (org.apache.kafka.clients.NetworkClient)</code></pre><p>我输入的命令是：</p><pre><code class="ssh">./bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic codesheep</code></pre><p>正确的应该是：</p><pre><code class="ssh">./bin/kafka-topics.sh --create --bootstrap-server 192.168.220.10:9092 --replication-factor 1 --partitions 1 --topic codesheep</code></pre><h1 id="python环境"><a href="#python环境" class="headerlink" title="python环境"></a>python环境</h1><p>CentOS 7.4 默认⾃带了⼀个 Python2.7 环境： </p><pre><code class="ssh">python(可以直接查看版本)2.7.5</code></pre><p>下载地址：<a href="https://www.python.org/downloads/release">https://www.python.org/downloads/release</a></p><p><strong>1.准备PYTHON3安装包并解压</strong> </p><p>下载了 Python-3.8.3.tgz 安装包，并将其直接放在了 /root ⽬录下解压，得到⽂件夹： Python-3.8.3 </p><pre><code class="ssh">tar zxvf Python-3.8.3.tgz</code></pre><p><strong>2.安装相关预备环境</strong> </p><pre><code class="ssh">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlitedevel readline-devel tk-devel gcc make</code></pre><p><strong>3.编译并安装</strong> </p><p>指定了安装⽬录为 /usr/local/python3 ，有需要可以⾃定义 </p><pre><code class="ssh">cd Python-3.8.3/./configure prefix=/usr/local/python3make &amp;&amp; make install（这个要等一会了）</code></pre><p>等安装过程完毕， /usr/local/python3 ⽬录就会⽣成了 </p><p><strong>4.添加软链接</strong> （我还是不知道这个到底是干什么用的）</p><p>将刚刚安装⽣成的⽬录 /usr/local/python3 ⾥的 python3 可执⾏⽂件做⼀份软链接，链 接到 /usr/bin 下，⽅便后续使⽤python3 </p><pre><code class="ssh">ln -s /usr/local/python3/bin/python3 /usr/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</code></pre><p><strong>5.验证安装</strong> </p><p>命令⾏输⼊ python3 ，即可查看 Python3 版本的安装结果 </p><p>⽽输⼊ python ，依然还是 python2.7.5 环境 </p><h1 id="anaconda3"><a href="#anaconda3" class="headerlink" title="anaconda3"></a>anaconda3</h1><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>（删除的时候 除了删除包还要删除.condarc 文件）</p><pre><code class="ssh">conda info        #找到基本文件所在位置</code></pre><pre><code>rm -rf anaconda3/        # 删除anaconda3文件夹</code></pre><pre><code class="ssh">rm /root/.condarc        # 删除.condarc 文件vim  ~/.bashrc            # 删除以下内容# &gt;&gt;&gt; conda initialize &gt;&gt;&gt;# !! Contents within this block are managed by &#39;conda init&#39; !!__conda_setup=&quot;$(&#39;/opt/anaconda3/bin/conda&#39; &#39;shell.bash&#39; &#39;hook&#39; 2&gt; /dev/null)&quot;if [ $? -eq 0 ]; then    eval &quot;$__conda_setup&quot;else    if [ -f &quot;/opt/anaconda3/etc/profile.d/conda.sh&quot; ]; then        . &quot;/opt/anaconda3/etc/profile.d/conda.sh&quot;    else        export PATH=&quot;/opt/anaconda3/bin:$PATH&quot;    fifiunset __conda_setup# &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</code></pre><p>效果</p><pre><code class="ssh">(base) [root@SANDBOX opt]# conda -V-bash: /opt/anaconda3/bin/conda: 没有那个文件或目录(base) [root@SANDBOX opt]# conda info-bash: /opt/anaconda3/bin/conda: 没有那个文件或目录</code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code class="ssh">bash Anaconda3-5.3.1-Linux-x86_64.sh </code></pre><p>执行上面命令然后一路<code>enter(1)|yes(2)</code> 中间可以在这个时候输入位置不安装默认，因为我一开始安装到默认但是找不到anaconda3这个文件夹</p><pre><code class="ssh">Anaconda3 will now be installed into this location:/root/anaconda3  - Press ENTER to confirm the location  - Press CTRL-C to abort the installation  - Or specify a different location below[/root/anaconda3] &gt;&gt;&gt; /opt/anaconda3</code></pre><p>接着再输入：</p><pre><code class="ssh">Do you wish the installer to initialize Anaconda3in your /root/.bashrc ? [yes|no][no] &gt;&gt;&gt; yes.........................................................................Do you wish to proceed with the installation of Microsoft VSCode? [yes|no]&gt;&gt;&gt; no</code></pre><p>安装完成后，直接输入<code>conda</code>应该会提示下面消息，再执行：<code>source ~/.bashrc</code>，之后就可以用了。 </p><pre><code class="ssh">-bash: /opt/yes/bin/conda: 没有那个文件或目录</code></pre><p>参考原文：<a href="https://blog.csdn.net/jh0218/article/details/85097061">https://blog.csdn.net/jh0218/article/details/85097061</a></p><h3 id="导入redis模块"><a href="#导入redis模块" class="headerlink" title="导入redis模块"></a>导入redis模块</h3><pre><code class="ssh">conda install redis-py</code></pre><p><strong>更换镜像源</strong></p><p>找不到.condarc 文件，输入<code>conda info</code>可以看到文件位置，然后修改.condarc 文件</p><pre><code>channels:  - defaultsshow_channel_urls: truechannel_alias: https://mirrors.tuna.tsinghua.edu.cn/anacondadefault_channels:  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2custom_channels:  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</code></pre><p>但是redis并没有被导入</p><p>在这块我大概折腾了一天半，来解决报的这个错然并没有卵用，继续报错，于是我把anaconda卸了重新安装了一个版本依旧</p><p>报错2020-4</p><pre><code>Collecting package metadata (current_repodata.json): failedCondaHTTPError: HTTP 000 CONNECTION FAILED for url &lt;https://repo.anaconda.com/pkgs/main/linux-64/current                                 _repodata.json&gt;Elapsed: -An HTTP error occurred when trying to retrieve this URL.HTTP errors are often intermittent, and a simple retry will get you on your way.If your current network has https://www.anaconda.com blocked, please filea support request with your network engineering team.&#39;https://repo.anaconda.com/pkgs/main/linux-64&#39;</code></pre><p>报错5.3.1</p><pre><code class="ssh">Solving environment: failedCondaHTTPError: HTTP 000 CONNECTION FAILED for url &lt;https://repo.anaconda.com/pkgs/main/noarch/repodata.json.bz2&gt;Elapsed: -An HTTP error occurred when trying to retrieve this URL.HTTP errors are often intermittent, and a simple retry will get you on your way.If your current network has https://www.anaconda.com blocked, please filea support request with your network engineering team.ConnectionError(MaxRetryError(&quot;HTTPSConnectionPool(host=&#39;repo.anaconda.com&#39;, port=443): Max retries exceeded with url: /pkgs/main/noarch/repodata.json.   bz2 (Caused by NewConnectionError(&#39;&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x7fcf10f42cc0&gt;: Failed to establish a new connection: [Errno    -2] Name or service not known&#39;))&quot;))ConnectionError(MaxRetryError(&quot;HTTPSConnectionPool(host=&#39;mirrors.tuna.tsinghua.edu.cn&#39;, port=443): Max retries exceeded with url: /anaconda/pkgs/msys2/linux-64/repodata.json (Caused by NewConnectionError(&#39;&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x7fb1f18d43c8&gt;: Failed to establish a new connection: [Errno -2] Name or service not known&#39;))&quot;))ConnectionError(MaxRetryError(&quot;HTTPConnectionPool(host=&#39;mirrors.tuna.tsinghua.edu.cn&#39;, port=80): Max retries exceeded with url: /anaconda/pkgs/msys2/noarch/repodata.json (Caused by NewConnectionError(&#39;&lt;urllib3.connection.HTTPConnection object at 0x7fa7b0536f98&gt;: Failed to establish a new connection: [Errno -2] Name or service not known&#39;))&quot;))</code></pre><p>查看配置信息</p><pre><code class="ssh"> conda config --show</code></pre><p>原因可能是防火墙的问题（还是报上面的错）</p><pre><code class="ssh">conda config --set ssl_verify false</code></pre><pre><code class="ssh">(base) [root@SANDBOX opt]# wget https://bootstrap.pypa.io/get-pip.py--2020-09-11 14:54:13--  https://bootstrap.pypa.io/get-pip.py正在解析主机 bootstrap.pypa.io (bootstrap.pypa.io)... 失败：未知的名称或服务。wget: 无法解析主机地址 “bootstrap.pypa.io”但是这个网址是可以打开的</code></pre><p><a href="https://blog.csdn.net/u012848709/article/details/82989276">https://blog.csdn.net/u012848709/article/details/82989276</a></p><pre><code class="ssh">(base) [root@SANDBOX etc]# vim resolv.conf</code></pre><p>添加（最后还是失败）</p><pre><code class="ssh">nameserver 8.8.8.8nameserver 8.8.4.4</code></pre><p>………………………………………………………………….（解决方案）</p><h3 id="pip-install-offline"><a href="#pip-install-offline" class="headerlink" title="pip install offline"></a>pip install offline</h3><p>在做了许多努力后我开始怀疑是不是服务器没有网，于是去问了一下我的小伙伴，emm以后要多和小伙伴沟通呀</p><p>然后师傅告诉我两句话，瞬间像溺水后获救了一样</p><pre><code>pip install offline你可以在自己的机器上离线下载，然后拷贝进去安装</code></pre><p>到网站  <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a> 下载whl文件上传到服务器上</p><p>先检查一下有没有redis</p><pre><code class="ssh"> conda list</code></pre><p>然后进到whl文件所在文件夹下执行</p><pre><code class="ssh">pip install redis-3.5.3-py3-none-any.whl</code></pre><p>然后好了……………………………………………………………………………………………………………………………………………….</p><p>知识在于积累呀！</p><h1 id="Centos的iso镜像搭建本地yum仓库"><a href="#Centos的iso镜像搭建本地yum仓库" class="headerlink" title="Centos的iso镜像搭建本地yum仓库"></a>Centos的iso镜像搭建本地yum仓库</h1><p>把准备好的iso文件拷到 /usr/local/src/下</p><pre><code class="ssh">scp  -r root@160.0.3.9:/usr/local/src /usr/local    #会把整个src目录拷到local下</code></pre><p><strong>挂载iso镜像</strong></p><p>①、新建挂载目录：</p><pre><code>mkdir -p /mnt/cdrom1</code></pre><p>②、直接编辑/etc/fstab文件，在后面添加：</p><pre><code># 备份fstab文件cp fstab fstab.bak# 挂载iso/usr/local/src/CentOS-7-x86_64-DVD-1810.iso /mnt/cdrom1 iso9660 loop,defaults 0 0</code></pre><pre><code class="ssh">mount -a         # 自动检测并激活挂载（未报错：mount: /dev/loop0 写保护，将以只读方式挂载）</code></pre><pre><code>df -h             # 看结果</code></pre><pre><code>文件系统                 容量  已用  可用 已用% 挂载点devtmpfs                  16G     0   16G    0% /devtmpfs                     16G     0   16G    0% /dev/shmtmpfs                     16G  9.6M   16G    1% /runtmpfs                     16G     0   16G    0% /sys/fs/cgroup/dev/mapper/centos-root 1007G   19G  988G    2% //dev/sda1               1014M  185M  830M   19% /boottmpfs                    3.2G   12K  3.2G    1% /run/user/42tmpfs                    3.2G     0  3.2G    0% /run/user/0/dev/loop0               4.3G  4.3G     0  100% /mnt/cdrom1</code></pre><p><strong>配置并刷新yum仓库</strong></p><p>①、新增yum配置文件：</p><p>Ps：完全离线使用，新增之前建议先删除(移走)所有在线yum源：</p><pre><code class="ssh">mv -f /etc/yum.repos.d/*  /home/vim /etc/yum.repos.d/local.repo</code></pre><p>粘贴以下内容，第3行表示iso挂载目录：</p><pre><code>[local-yum]name=Local Repositorybaseurl=file:///mnt/cdrom1enabled=1gpgcheck=0</code></pre><p>②、刷新查看yum是否生效：</p><pre><code>yum clean all &amp;&amp; yum list</code></pre><p>以上要是没要报错，那么本地yum仓库就搭建好了，就可以使用【 yum install 软件名】来安装所需软件，而不需要联网了。</p><p>参考原文：<a href="https://zhang.ge/4099.html">https://zhang.ge/4099.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;实验过程中如果出现⼀些诸如客户端不能连通或访问等问题，可尝试考虑关闭防⽕墙：&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="运维" scheme="https://xiaopantongxue816.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="linux" scheme="https://xiaopantongxue816.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>远程连接工具</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/01/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/01/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7/</id>
    <published>2020-09-01T01:49:52.000Z</published>
    <updated>2020-09-14T01:43:39.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SecureCRT"><a href="#SecureCRT" class="headerlink" title="SecureCRT"></a>SecureCRT</h1><h3 id="设置字体和编码"><a href="#设置字体和编码" class="headerlink" title="设置字体和编码"></a>设置字体和编码</h3><p>选项-&gt;会话选项-&gt;仿真-&gt;终端-&gt;Linux</p><p>选项-&gt;会话选项-&gt;外观-&gt;字体-&gt;新宋体、常规、12、中文GB2312</p><p>选项-&gt;会话选项-&gt;外观-&gt;字符编码-&gt;UTF-8</p><h1 id="WinSCP"><a href="#WinSCP" class="headerlink" title="WinSCP"></a>WinSCP</h1><p>传输文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SecureCRT&quot;&gt;&lt;a href=&quot;#SecureCRT&quot; class=&quot;headerlink&quot; title=&quot;SecureCRT&quot;&gt;&lt;/a&gt;SecureCRT&lt;/h1&gt;&lt;h3 id=&quot;设置字体和编码&quot;&gt;&lt;a href=&quot;#设置字体和编码&quot; class=&quot;he</summary>
      
    
    
    
    <category term="工具" scheme="https://xiaopantongxue816.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="linux" scheme="https://xiaopantongxue816.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>关于博客主题</title>
    <link href="https://xiaopantongxue816.github.io/2020/08/28/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/"/>
    <id>https://xiaopantongxue816.github.io/2020/08/28/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/</id>
    <published>2020-08-28T11:18:31.000Z</published>
    <updated>2020-09-15T07:36:10.654Z</updated>
    
    <content type="html"><![CDATA[<p>​    突然不知道该说啥，上周五在这里总结了好多话，周一来了上传到博客只有一个标题啥也没有，也不是停电断电突然关了电脑，怎么就没保存下来呢，笑哭…….</p><p>​    虽然很气但是也没有办法了，那就简简单单把我记着的细节在记录一下（其实我突然没了记录的心情，就像你写的日记，当时的那刻的超多记录突然就被格式化了……）</p><p>​    就是换了大概四五个主题，从简易好看到好看到更简易好看到最简易最好到功能完善一目了然也就是这个3-hexo主题，学会了什么呢，就是没有一次做好的东西，要先搭建起来再一步一步完善成它最好的最合适的状态。</p><p>​    还是想哭┭┮﹏┭┮。</p><p>为什么换一个没有bug的主题这么难，我这个强迫症啊。</p><p>2020-09-15</p><p>每个博客主题都有或多或少的问题现在用的3-hexo很完善了，但代码块解析花括号我还没有找到解决办法</p><p>博客生成到今天差不多一个月了，总算是整整齐齐的了，耶！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    突然不知道该说啥，上周五在这里总结了好多话，周一来了上传到博客只有一个标题啥也没有，也不是停电断电突然关了电脑，怎么就没保存下来呢，笑哭…….&lt;/p&gt;
&lt;p&gt;​    虽然很气但是也没有办法了，那就简简单单把我记着的细节在记录一下（其实我突然没了记录的心情，就像你</summary>
      
    
    
    
    <category term="生活" scheme="https://xiaopantongxue816.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="日记" scheme="https://xiaopantongxue816.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>linux环境搭建</title>
    <link href="https://xiaopantongxue816.github.io/2020/08/27/linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://xiaopantongxue816.github.io/2020/08/27/linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-08-27T10:37:16.000Z</published>
    <updated>2020-09-15T06:51:57.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主机和节点-虚拟机"><a href="#主机和节点-虚拟机" class="headerlink" title="主机和节点(虚拟机)"></a>主机和节点(虚拟机)</h1><h3 id="192-168-220-10（主机）"><a href="#192-168-220-10（主机）" class="headerlink" title="192.168.220.10（主机）"></a>192.168.220.10（主机）</h3><h3 id="192-168-220-11（克隆机）"><a href="#192-168-220-11（克隆机）" class="headerlink" title="192.168.220.11（克隆机）"></a>192.168.220.11（克隆机）</h3><h3 id="192-168-220-12（节点机）"><a href="#192-168-220-12（节点机）" class="headerlink" title="192.168.220.12（节点机）"></a>192.168.220.12（节点机）</h3><p>redis（安装成功） /anaconda（安装失败）</p><h1 id="基于虚拟机方式的linux环境搭建"><a href="#基于虚拟机方式的linux环境搭建" class="headerlink" title="基于虚拟机方式的linux环境搭建"></a>基于虚拟机方式的linux环境搭建</h1><p><code>Linux---&gt;ifconfig</code></p><p><code>windows---&gt;ipconfig</code></p><p>Centos下载地址：<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">http://mirrors.aliyun.com/centos/7/isos/x86_64/</a> </p><p>参考原文：</p><p>虚拟机与本地主机不能互ping： <a href="https://www.cnblogs.com/wangkun122/articles/12083396.html">https://www.cnblogs.com/wangkun122/articles/12083396.html</a> </p><p>Vmware虚拟机网络配置(固定IP) ：<a href="https://www.jianshu.com/p/6fdbba039d79">https://www.jianshu.com/p/6fdbba039d79</a></p><h3 id="网络IP的设置（重要）"><a href="#网络IP的设置（重要）" class="headerlink" title="网络IP的设置（重要）"></a><strong>网络IP的设置（重要）</strong></h3><p>对于多个节点的Linux环境，需要保证节点和宿主机之间互通，节点与外网互通以及节点之间的互通</p><h5 id="配置虚拟网络编辑器"><a href="#配置虚拟网络编辑器" class="headerlink" title="配置虚拟网络编辑器"></a>配置虚拟网络编辑器</h5><ol><li>编辑-&gt;虚拟网络编辑器</li><li>VMnet8(NET模式)-&gt;设置子网IP（<code>192.168.220.0/192.168.x.0</code>）和子网掩码（<code>255.255.255.0</code>）</li><li>选中NET模式并点击NET设置（网关ip：<code>192.168.220.2</code>）</li><li>DNS设置(去掉自动检测可用的DNS服务器的勾，在首选和备选DNS服务器中配置和真机相同的DNS服务器)</li><li>确定回到虚拟网络编辑器（选中将主机虚拟适配器连接到此网络和使用本地DHCP服务将ip地址分配给虚拟机）</li><li>点击DHCP设置（配置起始ip地址：<code>192.168.220.128</code>和结束ip地址：<code>192.168.220.254</code>（主要用于分配IP的分配区间 ））</li><li>确定即可</li></ol><h5 id="配置主机"><a href="#配置主机" class="headerlink" title="配置主机"></a>配置主机</h5><ol><li>打开网络与共享中心-&gt;更改适配器设置-&gt;选中VMnet8右击属性</li><li>双击IPVC4（配置IP地址<code>192.168.220.1/192.168.x.1</code>）和子网掩码（<code>255.255.255.0</code>），DNS服务器？？？）</li><li>确定即可</li></ol><h5 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h5><p>选中虚拟机右击-&gt;设置（选择网络适配器-&gt;NET模式）-&gt;确定即可</p><h5 id="为虚拟机设置静态ip"><a href="#为虚拟机设置静态ip" class="headerlink" title="为虚拟机设置静态ip"></a>为虚拟机设置静态ip</h5><pre><code class="bash">cd / #到根目录# 找到网络配置文件ifcfg-ensXXX 配置虚拟机网卡，文件名可能会有点不一样，可以进去到network-scripts文件夹查看vi /etc/sysconfig/network-scripts/ifcfg-ens33  </code></pre><pre><code># 修改或添加一下命令行TYPE=Ethernet#PROXY_METHOD=none#BROWSER_ONLY=no#BOOTPROTO=dhcp#DEFROUTE=yes#IPV4_FAILURE_FATAL=no#IPV6INIT=yes#IPV6_AUTOCONF=yes#IPV6_DEFROUTE=yes#IPV6_FAILURE_FATAL=no#IPV6_ADDR_GEN_MODE=stable-privacyBOOTPROTO=staticIPADDR=192.168.220.10NETMASK=255.255.255.0GATEWAY=192.168.220.2DNS1=211.136.150.66DNS2=211.136.112.50NAME=ens33UUID=1db01eda-dfeb-4574-ea6d-a9f1b29af25fDEVICE=ens33ONBOOT=yes~</code></pre><pre><code># 设置完后重启生效即可 [pjy@localhost ~]service network restart</code></pre><pre><code># 测试[pjy@localhost ~]ping www.baidu.com</code></pre><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h5 id="克隆后新旧机子的网卡都失效了"><a href="#克隆后新旧机子的网卡都失效了" class="headerlink" title="克隆后新旧机子的网卡都失效了"></a>克隆后新旧机子的网卡都失效了</h5><p>参考原文：<a href="https://blog.csdn.net/qlj324513/article/details/80291548">https://blog.csdn.net/qlj324513/article/details/80291548</a></p><p>旧机关闭并重启网卡，新机修改静态ip后关闭并重启网卡</p><p>修改虚拟机静态ip</p><pre><code class="ssh">vi /etc/sysconfig/network-scripts/ifcfg-ens33  IPADDR=192.168.220.x</code></pre><p>测试ifconfig失效，关闭网卡</p><pre><code class="ssh">systemctl stop NetworkManagersystemctl disable NetworkManager.........</code></pre><p>重启网卡</p><pre><code class="ssh">systemctl restart network</code></pre><p>再次测试：ifconfig，就有了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;主机和节点-虚拟机&quot;&gt;&lt;a href=&quot;#主机和节点-虚拟机&quot; class=&quot;headerlink&quot; title=&quot;主机和节点(虚拟机)&quot;&gt;&lt;/a&gt;主机和节点(虚拟机)&lt;/h1&gt;&lt;h3 id=&quot;192-168-220-10（主机）&quot;&gt;&lt;a href=&quot;#192-1</summary>
      
    
    
    
    <category term="运维" scheme="https://xiaopantongxue816.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="linux" scheme="https://xiaopantongxue816.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://xiaopantongxue816.github.io/2020/08/24/Redis/"/>
    <id>https://xiaopantongxue816.github.io/2020/08/24/Redis/</id>
    <published>2020-08-24T01:25:49.000Z</published>
    <updated>2020-09-15T06:59:31.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-连接redis数据库"><a href="#C-连接redis数据库" class="headerlink" title="C# 连接redis数据库"></a>C# 连接redis数据库</h1><p><strong>查看源码真的很重要</strong></p><p> 在项目类库引用上右键NuGet 搜索redis 安装二个框架 ：（上网搜吧，我忘了）</p><p>在ip:port前面加上@用来表示密码，比如password@ip:port    ，现在才知道能看到源码的程序真的很幸福。</p><pre><code>private void Showdata_Click(object sender, EventArgs e)//160.0.3.5  ArrayList&lt;byte&gt; = get(20122)        &#123;            MemoryStream memx=null;            BinaryWriter binwritex=null;            BinaryReader binreadx=null;            try &#123;                byte[] data = new byte[4096];                 RedisClient client = new RedisClient(&quot;160.0.3.5&quot;, 6379,&quot;12345&quot;,0);                data = client.Get&lt;byte[]&gt;(this.lbTelName.Text);                if (data != null)                &#123;                    memx = new MemoryStream();                    binwritex = new BinaryWriter(memx);                    binreadx = new BinaryReader(memx);                    binwritex.Write(data);                    for (int i = 0; i &lt; this.dgvTelegram.RowCount - 1; i++)                    &#123;                        short offset = Convert.ToInt16(dgvTelegram.Rows[i].Cells[&quot;OFFSET&quot;].Value);                        short length = Convert.ToInt16(dgvTelegram.Rows[i].Cells[&quot;LENGTH&quot;].Value);                        string type = Convert.ToString(dgvTelegram.Rows[i].Cells[&quot;TYPE&quot;].Value);                        if (offset + length &lt; data.Length)                        &#123;                            memx.Position = offset;                            if (type == &quot;DINT&quot; || type == &quot;DWORD&quot;)            //int                            &#123;                                dgvTelegram.Rows[i].Cells[&quot;SNAPSHOOT&quot;].Value = binreadx.ReadInt32();                            &#125;                            else if (type == &quot;FLOAT&quot;)            //float                             &#123;                                dgvTelegram.Rows[i].Cells[&quot;SNAPSHOOT&quot;].Value = binreadx.ReadSingle();                            &#125;                            else if (type == &quot;INT&quot; || type == &quot;WORD&quot;)             //short                            &#123;                                dgvTelegram.Rows[i].Cells[&quot;SNAPSHOOT&quot;].Value = binreadx.ReadInt16();                            &#125;                            else if (type == &quot;BOOL&quot;)             //short                            &#123;                                dgvTelegram.Rows[i].Cells[&quot;SNAPSHOOT&quot;].Value = binreadx.ReadInt16();                            &#125;                            else if (type == &quot;string&quot; || type == &quot;String&quot;)             //short                            &#123;                                string str2 = binreadx.ReadString();                                str2=str2.Substring(0,str2.Length);                                dgvTelegram.Rows[i].Cells[&quot;SNAPSHOOT&quot;].Value = str2;                            &#125;                            else                            &#123;                                MessageBox.Show(&quot;row:&quot; + i + &quot; type execption &quot;+ type);                            &#125;                        &#125;                    &#125;                &#125;                else                &#123;                    MessageBox.Show(&quot;telegramId exist&quot;);                &#125;            &#125;            catch (System.Exception ex)            &#123;                MessageBox.Show(ex.Message);            &#125;            finally            &#123;                if (binwritex != null)                    binwritex.Close();                if (binreadx != null)                    binreadx.Close();                if (memx != null)                    memx.Close();            &#125;        &#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-连接redis数据库&quot;&gt;&lt;a href=&quot;#C-连接redis数据库&quot; class=&quot;headerlink&quot; title=&quot;C# 连接redis数据库&quot;&gt;&lt;/a&gt;C# 连接redis数据库&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;查看源码真的很重要&lt;/strong&gt;&lt;/</summary>
      
    
    
    
    <category term="数据库" scheme="https://xiaopantongxue816.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://xiaopantongxue816.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>开源网站相关</title>
    <link href="https://xiaopantongxue816.github.io/2020/08/21/%E5%BC%80%E6%BA%90%E7%BD%91%E7%AB%99%E7%9B%B8%E5%85%B3/"/>
    <id>https://xiaopantongxue816.github.io/2020/08/21/%E5%BC%80%E6%BA%90%E7%BD%91%E7%AB%99%E7%9B%B8%E5%85%B3/</id>
    <published>2020-08-21T06:34:04.000Z</published>
    <updated>2020-09-15T06:19:44.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="github"><a href="#github" class="headerlink" title="github"></a>github</h1><h3 id="关于github访问速度慢"><a href="#关于github访问速度慢" class="headerlink" title="关于github访问速度慢"></a>关于github访问速度慢</h3><p>参考：<a href="https://zhuanlan.zhihu.com/p/93436925">https://zhuanlan.zhihu.com/p/93436925</a> </p><p><strong>1. 修改本地hosts文件</strong></p><pre><code class="markdown">windows系统的hosts文件的位置如下：C:\Windows\System32\drivers\etc\hostsmac/linux系统的hosts文件的位置如下：/etc/hosts</code></pre><p><strong>2. 在hosts文件中增加<a href="http://github.global.ssl.fastly.net和http//github.com%E7%9A%84%E6%98%A0%E5%B0%84">http://github.global.ssl.fastly.net和http://github.com的映射</a></strong></p><pre><code>获取Github相关网站的ip访问https://www.ipaddress.com分别输入github.global.ssl.fastly.net和github.com，查询ip地址下面是我的配置199.232.69.194        github.global.ssl.fastly.net140.82.113.3        GitHub.com</code></pre><p>ping   github.com  确实是可以收到回复了，但是网站访问也好像还是很慢的样子</p><h3 id="hexo向github-deploy时出现错误"><a href="#hexo向github-deploy时出现错误" class="headerlink" title="hexo向github deploy时出现错误"></a>hexo向github deploy时出现错误</h3><p><code>error: RPC failed; curl 56 OpenSSL SSL_read: Connection was reset, errno 10054</code></p><p>弄了好久吧，浏览器打开了几十个页面</p><p>最后：没有用！还是报错</p><p>可能不是我的问题是github被墙了。。。因为过段时间或者第二天就可以了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;github&quot;&gt;&lt;a href=&quot;#github&quot; class=&quot;headerlink&quot; title=&quot;github&quot;&gt;&lt;/a&gt;github&lt;/h1&gt;&lt;h3 id=&quot;关于github访问速度慢&quot;&gt;&lt;a href=&quot;#关于github访问速度慢&quot; class=&quot;he</summary>
      
    
    
    
    <category term="工具" scheme="https://xiaopantongxue816.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="学习" scheme="https://xiaopantongxue816.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令记录</title>
    <link href="https://xiaopantongxue816.github.io/2020/08/21/Linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://xiaopantongxue816.github.io/2020/08/21/Linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2020-08-21T01:34:19.000Z</published>
    <updated>2020-09-15T07:13:13.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><pre><code class="bash"># 软件安装目录/usr/local</code></pre><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>Linux命令大全(手册)：<a href="https://www.linuxcool.com/">https://www.linuxcool.com/</a> </p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><pre><code class="bash"># 新建目录mkdir 目录名</code></pre><pre><code class="bash"># 无法创建目录&quot;xxxx&quot;: 权限不够root用户登录或者chmodchmod +x ./*         //为当前文件夹下所有文件赋予可执行权限chmod 777 install </code></pre><pre><code class="bash"># 删除空目录rmdir 目录名</code></pre><p>递归地删除目录，使用递归选项-r或-R，如果目录是受写保护的，则会提示是否继续删除目录和目录中的文件作为一个整体。（慎重）</p><pre><code class="bash"># 删除非空目录rm -rf 目录名/      //-f 强制删除而不被提示# 单个命令中删除多个目录，如下面的命令所示。命令删除所有目录和它们的子目录，而不提示删除 rm -rf dir1 dir2 dir3</code></pre><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><pre><code class="bash"># 查看所有进程ps -ef    -e：显示系统内所有进程的信息。与 -A 选项功能相同    -f：使用完整 (full) 的格式显示进程信息，如果只有 ps -e 则输出进程信息的格式和只使用 ps 一样# 根据特定情况过滤ps -ef | grep mmp-front  //mmp-front是进程关键字 grep 是搜索ps -aux | grep java      //-aux 显示所有状态kill -9 [PID]            //-9 表示强迫进程立即停止</code></pre><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><pre><code class="bash">CentOS7 的防火墙配置    # 查看防火墙状态    systemctl status firewalld    # 关闭防火墙：    systemctl stop firewalld.service    # 开启防火墙：    systemctl start firewalld.service    # 关闭开机启动：    systemctl disable firewalld.service    # 开启开机启动：    systemctl enable firewalld.service</code></pre><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a><strong>安装软件</strong></h3><pre><code class="bash"># 解压安装包tar -zxvf xxx.tar.gzbash</code></pre><pre><code class="bash"># 编辑配置文件vim /etc/profile</code></pre><pre><code class="bash"># 添加环境变量（profile）尾部加⼊ xx 的 bin 路径配置export xx_HOME=/usr/local/xxexport PATH=$PATH:$xx_HOME/bin</code></pre><pre><code class="bash"># 使环境变量⽣效source /etc/profile </code></pre><p>#工作常用命令</p><pre><code class="bash">pwd            #当前所在文件路径/save        #搜索save关键字：e           #刷新shift+G        #到最后一行4yy            #复制4行p            #粘贴mv /etc/snmp/snmpd.conf /etc/snmp/snmpd.conf.bak    #移动文件scp  -r root@160.0.3.9:/usr/local/src /usr/local    #拷贝目录从远程到本地/usr/local/src目录下sudo netstat -ntpl                                  #使用netstat查看本地端口的使用情况# 为当前文件夹下所有文件赋予可执行权限，文件有可执行权限后是绿色的chmod +x ./*   # 用ldd命令可以看该程序需要的库的信息，把缺省的拷贝过去ldd SystemInfoCollector（执行文件）#将20241目录下的所有文件复制到20242文件夹中cp PDAHandle_20241/* PDAHandler_20242/        # 拷贝文件从160.0.3.5到服务器160.0.3.9scp libhiredis.so root@160.0.3.9:/lib64     #拷贝文件scp -r /home/space/music/ root@www.runoob.com:/home/root/others/     #拷贝目录在增加新的节点时需要修改三个文件：main.cpp/makefile/installcd到指定文件夹下（例如PDAHandler_20242）mm        #编译./install        #发布（输入密码）如果提交失败，尚未纳入版本控制，cd..退回上一级执行命令[xxx@VM_DEV HFD]$   svn  add  PDAHandler_20242[xxx@VM_DEV test]$ chmod 777 install  （如果install权限不够）</code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h1&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;# 软件安装目录
/usr/local
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=</summary>
      
    
    
    
    <category term="运维" scheme="https://xiaopantongxue816.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="linux" scheme="https://xiaopantongxue816.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>IDEA</title>
    <link href="https://xiaopantongxue816.github.io/2020/08/19/IDEA/"/>
    <id>https://xiaopantongxue816.github.io/2020/08/19/IDEA/</id>
    <published>2020-08-19T02:26:28.000Z</published>
    <updated>2020-09-15T07:20:15.355Z</updated>
    
    <content type="html"><![CDATA[<p>搞不好什么时候就要重装电脑，所以就来记录一下好了</p><h1 id="JDK环境变量配置"><a href="#JDK环境变量配置" class="headerlink" title="JDK环境变量配置"></a>JDK环境变量配置</h1><p><strong>一个小知识点</strong>（<em>JDK卸载的时候有两个程序需要卸载</em>）</p><p><code>①java 8 update 171（64-bit）</code>；<code>②java SE Development Kit8 update 171（64-bit） </code></p><pre><code>4 #在用户变量新建变量JAVA_HOME值D:\Program Files\Java\jdk1.8.0_181（jdk安装目录）5 #在系统变量    1.新建变量JAVA_HOME值&quot;D:\Program Files\Java\jdk1.8.0_181&quot;(没有这一步最后在cmd运行javac会出错)    2.新建变量CLASSPATH值&quot;.;%Java_Home%\bin;%Java_Home%\lib\dt.jar;%Java_Home%\lib\tools.jar&quot;    3.选中”Path“点击”编辑“选项,新建%Java_Home%\bin和%Java_Home%\jre\bin（如果出现变量值在前面添加“%Java_Home%\bin;%Java_Home%\jre\bin;”）6 #一路确定重新cmd，输入java/javac/java -version三个命令进行验证</code></pre><h1 id="IDEA安装破解配置（2017版本）"><a href="#IDEA安装破解配置（2017版本）" class="headerlink" title="IDEA安装破解配置（2017版本）"></a>IDEA安装破解配置（2017版本）</h1><p>安装到最后一步不要running，先把激活文件拷到文件夹下（<code>D:\Program Files\JetBrains\IntelliJ IDEA 2017.3.2\lib</code>）</p><p>然后找到安装目录下的bin目录（<code>D:\Program Files\JetBrains\IntelliJ IDEA 2017.3.2\bin</code>）修改<code>idea.exe.vmoptions</code>、<code>idea64.exe.vmoptions</code>两个文件</p><p>在最后一行空一行加上</p><pre><code>&quot;-javaagent:D:/Program Files/JetBrains/IntelliJ IDEA 2017.3.2/lib/JetbrainsCrack-3.1-release-enc .jar&quot;</code></pre><p>然后在打开IDEA选择Activation code并粘贴激活码</p><p>——-如果idea打不开就到c盘下（C:\Users\Administrator.IntelliJIdea2017.3\config）修改idea64.exe.vmoptions文件</p><pre><code>ThisCrackLicenseId-&amp;#123;&quot;licenseId&quot;:&quot;ThisCrackLicenseId&quot;,&quot;licenseeName&quot;:&quot;你的名字&quot;,&quot;assigneeName&quot;:&quot;&quot;,&quot;assigneeEmail&quot;:&quot;你的邮箱&quot;,&quot;licenseRestriction&quot;:&quot;For This Crack, Only Test! Please support genuine!!!&quot;,&quot;checkConcurrentUse&quot;:false,&quot;products&quot;:[&amp;#123;&quot;code&quot;:&quot;II&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;DM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;AC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;RS0&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;WS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;DPN&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;RC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;PS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;DC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;RM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;CL&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;PC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;],&quot;hash&quot;:&quot;2911276/0&quot;,&quot;gracePeriodDays&quot;:7,&quot;autoProlongated&quot;:false&amp;#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;搞不好什么时候就要重装电脑，所以就来记录一下好了&lt;/p&gt;
&lt;h1 id=&quot;JDK环境变量配置&quot;&gt;&lt;a href=&quot;#JDK环境变量配置&quot; class=&quot;headerlink&quot; title=&quot;JDK环境变量配置&quot;&gt;&lt;/a&gt;JDK环境变量配置&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;一个</summary>
      
    
    
    
    <category term="工具" scheme="https://xiaopantongxue816.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="idea" scheme="https://xiaopantongxue816.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>博客生成记录</title>
    <link href="https://xiaopantongxue816.github.io/2020/08/16/%E5%8D%9A%E5%AE%A2%E7%94%9F%E6%88%90%E8%AE%B0%E5%BD%95/"/>
    <id>https://xiaopantongxue816.github.io/2020/08/16/%E5%8D%9A%E5%AE%A2%E7%94%9F%E6%88%90%E8%AE%B0%E5%BD%95/</id>
    <published>2020-08-16T02:12:34.000Z</published>
    <updated>2020-09-15T07:32:59.221Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎━(<em>｀∀´</em>)ノ亻!光临呐！</p><h1 id="下载安装node-js-cnpm-hexo"><a href="#下载安装node-js-cnpm-hexo" class="headerlink" title="下载安装node.js+cnpm+hexo"></a>下载安装node.js+cnpm+hexo</h1><p>参考视频：<a href="https://www.bilibili.com/video/BV1Yb411a7ty">https://www.bilibili.com/video/BV1Yb411a7ty</a></p><p>参考教程：<a href="https://yelog.org/2017/03/17/windows-hexo/">https://yelog.org/2017/03/17/windows-hexo/</a></p><p>环境：<code>W10</code></p><p>官网：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a> （下载了LTS版本）</p><p>Win+R输入cmd打开命令提示符依次输入<code>node -v #查看node版本 </code>、<code>npm -v  #查看npm版本  </code>然后执行</p><pre><code class="命令提示符">npm install -g cnpm --registry=http://registry.npm.taobao.org #安装淘宝的cnpm 管理器cnpm -v #查看cnpm版本 cnpm install -g hexo-cli #安装hexo框架hexo -v #查看hexo版本 mkdir XiaoPanTongXue #创建XiaoPanTongXue目录cd XiaoPanTongXue #进入XiaoPanTongXue目录hexo init #生成博客 初始化博客hexo s  #启动本地博客服务http://localhost:4000/ #本地访问地址hexo n &quot;我的博客生成记录&quot; #创建新的文章</code></pre><h1 id="发布到GitHub"><a href="#发布到GitHub" class="headerlink" title="发布到GitHub"></a>发布到GitHub</h1><p><strong><em>如果用gitee的话要在对应仓库开启 Gitee Pages 服务</em></strong></p><p>在github注册自己的账号记住自己的邮箱账号和密码，因为各种网站各种账号密码，我记忆已经混乱，都记录在自己手机的记事本上。（主要是一些密码要求的格式比较复杂，还要大小写特殊字符什么的就容易忘）</p><p>下载安装git：<a href="https://git-scm.com/downloads/">https://git-scm.com/downloads/</a> </p><p>一路默认，安装完成后，打开文件夹    <code>C:\Users\Administrator\.ssh（Administrator是当前用户名）</code>，在空白处点鼠标右键选择<code>“Git Bush Here”</code> ，打开gitbush。</p><p>配置用户名和邮箱：</p><pre><code class="ssh">git config --global user.name “用户名”git config --global user.email “邮箱”执行生成公钥和私钥的命令：ssh-keygen -t rsa #按照提示回车3下（会在.ssh文件夹里面生成一个私钥 id_rsa和一个公钥id_rsa.pub。）# 执行查看公钥的命令：# cat ~/.ssh/id_rsa.pub  </code></pre><p>到github上去添加公钥</p><p>起一个公钥title把id_rsa.pub文件里的公钥复制到key里Add SSH key</p><p>*加公钥就不需要每一次在博客hexo deploy的时候输入github的账号密码了，也防止了没有秘钥的人deploy，安全一点</p><p>注意创建仓库时仓库名称</p><p><strong>xiaopantongxue816</strong>.github.io 黑体部分要和github用户名一致，不然访问不到</p><pre><code># 在XiaoPanTongXue目录下安装git部署插件cnpm install --save hexo-deployer-git</code></pre><p>配置_config.yml （在XiaoPanTongXue目录下）</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/xiaopantongxue816/xiaopantongxue816.github.io/（注意和仓库地址不一致） branch: master</code></pre><p>注意每一个属性冒号后面都有一个空格 ，第二级属性换行后也有空格</p><pre><code>#部署到Github仓库里hexo c #清理一下hexo g #生成hexo d #部署到远程Github仓库#访问这个地址可以查看博客https://YourGithubName.github.io/ #下载yilia主题到本地官网主题地址：https://hexo.io/themes/git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia #修改hexo根目录下的 _config.yml 文件 ： theme: yiliahexo c #清理一下hexo g #生成hexo d #部署到远程Github仓库https://YourGithubName.github.io/ #查看博客这里有一个很坑的问题，因为用谷歌浏览器缓冲功能太强大导致我怎么刷新页面都不更新，如果hexo d之后页面没有更新就shift+ctrl+delete清除缓冲就会更新页面了。</code></pre><p> 码云地址： <a href="http://panjiayuan.gitee.io/panjiayuan.gitee.io/">http://panjiayuan.gitee.io/panjiayuan.gitee.io/</a>     我放弃gitee了怎么都是部署失败页面效果出不来o(╥﹏╥)o，他好像把渲染的插件全部给我过滤了</p><p><strong>主题更新</strong></p><pre><code>cd themes/3-hexogit pull</code></pre><h1 id="每一篇记录的基本格式"><a href="#每一篇记录的基本格式" class="headerlink" title="每一篇记录的基本格式"></a>每一篇记录的基本格式</h1><pre><code>tags:- 标签（细分）categories:- 分类（粗分，目前有以下7种，填两个就是二级标签）    - 工作方案    - 后端    - 前端    - 数据库    - 运维    - 工具    - 生活    - 其它例如：- 后端- JAVA就是后端-&gt;JAVA</code></pre><pre><code class="markdown">标题1（#h1）    标题3（#h3）        标题5（#h5）        标题5（#h5）    标题3（#h3）    标题3（#h3）......参考：--------------**尽量就不用图片了</code></pre><h1 id="3-Hexo使用攻略"><a href="#3-Hexo使用攻略" class="headerlink" title="3-Hexo使用攻略"></a>3-Hexo使用攻略</h1><h3 id="添加分类及标签（所有主题）"><a href="#添加分类及标签（所有主题）" class="headerlink" title="添加分类及标签（所有主题）"></a>添加分类及标签（所有主题）</h3><p>参考原文：</p><p> <a href="https://yelog.org/2017/03/23/3-hexo-instruction/">https://yelog.org/2017/03/23/3-hexo-instruction/</a></p><p><a href="https://www.jianshu.com/p/e17711e44e00">https://www.jianshu.com/p/e17711e44e00</a>     </p><p>在博客文件夹下命令行执行</p><pre><code>hexo new page categories</code></pre><p>根据目录找到index.md文件打开默认是：</p><pre><code>title: categoriesdate: 2020-08-28 13:02:09</code></pre><p>在后面加上一行</p><pre><code>type: &quot;categories&quot; </code></pre><p>打开需要分类的文章添加categories属性，例如</p><pre><code>title: 博客记录date: 2020-08-16 10:12:34categories:- 其它- hexo</code></pre><p>其它是一级分类，hexo为二级分类，依次递减。</p><p>添加标签的步骤类似</p><pre><code>hexo new page tags</code></pre><p>………………..</p><p>在博客文件夹更目录下scaffolds/post.md文件中可以修改初始化文件样式（添加后两行）</p><pre><code>title: &amp;#123;&amp;#123; title &amp;#125;&amp;#125;date: &amp;#123;&amp;#123; date &amp;#125;&amp;#125;tags:categories:</code></pre><h3 id="置顶文章"><a href="#置顶文章" class="headerlink" title="置顶文章"></a>置顶文章</h3><p>使用 <code>top</code> 将会置顶文章，多个置顶文章时，<code>top</code> 定义的值越大，越靠前。</p><pre><code class="md">---title: 每天一个 linux 命令date: 2017-01-23 11:41:48top: 1categories:- 运维tags:- linux 命令---</code></pre><h3 id="图片显示方法"><a href="#图片显示方法" class="headerlink" title="图片显示方法"></a>图片显示方法</h3><p>测试图片存放目录</p><p>1.相对路径</p><p><img src="%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/cat.png"></p><p> 2.HTML语法 （没有显示，以后再说）</p><p><code>&lt;img src=&quot;img/pic/ceshi.jpg&quot; width=&quot;200&quot; height=&quot;200&quot;/&gt;</code></p><p>3.云存储</p><p>4.标签插件语法</p><p><strong>第一种：相对路径</strong></p><ol><li>在博客根目录下修改_config.yml文件中的 post_asset_folder: true</li><li>hexo n ‘测试图片’生成新的md文件时在_post文件夹下会生成测试图片文件夹</li><li>把要插入的图片放到该同名文件夹下，图片名字（测试图片/cat.png）</li></ol><p><strong>第二种：HTML语法</strong></p><ol><li><p>在md文件中直接在需要放图片的地方插入html语句</p></li><li><p>图片放在_post文件夹下新建目录img即可，我又在img中建了一个子目录pic</p></li><li><p><code>&lt;img src=&quot;/img/pic/ceshi.jpg &quot; width=&quot;200&quot; height=&quot;200&quot;/&gt;</code></p></li></ol><p><strong>第三种：云存储</strong></p><p>七牛云，阿里云都可以</p><p><strong>第四种</strong>：标签插件语法</p><p>我还没看懂那个语法是咋回事</p><p>参考：<a href="https://blog.csdn.net/sinat_35026778/article/details/89789547?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param">https://blog.csdn.net/sinat_35026778/article/details/89789547?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param</a> </p><h1 id="next使用攻略"><a href="#next使用攻略" class="headerlink" title="next使用攻略"></a>next使用攻略</h1><h3 id="目录分类标签不显示"><a href="#目录分类标签不显示" class="headerlink" title="目录分类标签不显示"></a>目录分类标签不显示</h3><p>参考原文：<a href="https://www.jianshu.com/p/f138032e7539">https://www.jianshu.com/p/f138032e7539</a></p><p>修改文件 <code>E:\XiaoPanTongXue\source\categories</code>下的<code>index.html</code></p><pre><code class="md"># 修改前title: categoriesdate: 2020-09-08 12:25:56type: &#39;categorie&#39;# 修改后title: categoriesdate: 2020-09-08 12:25:56type: &quot;categories&quot;</code></pre><p>tags同理（之前修修改改搞错了）</p><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><h3 id="Cannot-read-property-‘on’-of-undefined-已解决"><a href="#Cannot-read-property-‘on’-of-undefined-已解决" class="headerlink" title="Cannot read property ‘on’ of undefined(已解决)"></a>Cannot read property ‘on’ of undefined(已解决)</h3><p>修改配置文件导致</p><pre><code>E:\XiaoPanTongXue\themes\3-hexo&gt;hexo gINFO  Validating configINFO  Start processingINFO  Files loaded in 289 msERROR TypeError: E:\XiaoPanTongXue\themes\3-hexo\layout\post.ejs:28    26| &lt;div id=&quot;post&quot;&gt;    27|     &lt;div class=&quot;pjax&quot;&gt; &gt;&gt; 28|         &lt;%- partial(&#39;_partial/article&#39;, &amp;#123;post: page, index: false&amp;#125;) %&gt;    29|     &lt;/div&gt;    30|     &lt;div class=&quot;copyright&quot;&gt;    31|         &lt;%- fragment_cache(&#39;copyright&#39;, function()&amp;#123;E:\XiaoPanTongXue\themes\3-hexo\layout\_partial\article.ejs:9    7|         &lt;span class=&quot;top&quot;&gt;&lt;a&gt;置顶&lt;/a&gt;&lt;/span&gt;    8|         &lt;%&amp;#125;%&gt; &gt;&gt; 9|         &lt;% if (theme.author.on==true &amp;&amp; post.author) &amp;#123;%&gt;    10|         &lt;span class=&quot;author&quot;&gt;&lt;a&gt;&lt;%=post.author %&gt;&lt;/a&gt;&lt;/span&gt;    11|         &lt;%&amp;#125;%&gt;    12|         &lt;% if (post.categories &amp;&amp; post.categories.length)&amp;#123; %&gt;Cannot read property &#39;on&#39; of undefined    at eval (E:\XiaoPanTongXue\themes\3-hexo\layout\_partial\article.ejs:31:25)    at article (E:\XiaoPanTongXue\node_modules\ejs\lib\ejs.js:682:17)    at _View._compiledSync (E:\XiaoPanTongXue\node_modules\hexo\lib\theme\view.js:132:24)    at _View.renderSync (E:\XiaoPanTongXue\node_modules\hexo\lib\theme\view.js:59:25)    at Object.partial (E:\XiaoPanTongXue\node_modules\hexo\lib\plugins\helper\partial.js:34:15)    at eval (E:\XiaoPanTongXue\themes\3-hexo\layout\post.ejs:36:17)    at post (E:\XiaoPanTongXue\node_modules\ejs\lib\ejs.js:682:17)    at _View._compiled (E:\XiaoPanTongXue\node_modules\hexo\lib\theme\view.js:136:50)    at _View.render (E:\XiaoPanTongXue\node_modules\hexo\lib\theme\view.js:39:17)    at E:\XiaoPanTongXue\node_modules\hexo\lib\hexo\index.js:64:21    at tryCatcher (E:\XiaoPanTongXue\node_modules\bluebird\js\release\util.js:16:23)    at E:\XiaoPanTongXue\node_modules\bluebird\js\release\method.js:15:34    at RouteStream._read (E:\XiaoPanTongXue\node_modules\hexo\lib\hexo\router.js:30:5)    at RouteStream.Readable.read (_stream_readable.js:467:10)    at resume_ (_stream_readable.js:981:12)    at processTicksAndRejections (internal/process/task_queues.js:84:21) &amp;#123;  path: &#39;E:\\XiaoPanTongXue\\themes\\3-hexo\\layout\\post.ejs&#39;&amp;#125;</code></pre><p>我之前把这个给注释掉了导致配置文件读取不到author了，取消注释把on的key值改为false就行了</p><pre><code>##########多作者模式############# author:  # on: false  # authors:    # author1: 阁主    # author2: 小马哥</code></pre><h3 id="代码块内的花括号转义成了-amp-123-和-amp-125-未解决"><a href="#代码块内的花括号转义成了-amp-123-和-amp-125-未解决" class="headerlink" title="代码块内的花括号转义成了 &amp;#123;和&amp;#125; (未解决)"></a>代码块内的花括号转义成了 <code>&amp;#123;</code>和<code>&amp;#125; </code>(未解决)</h3><p>1.<strong>可能是版本不兼容的问题</strong>，降到了hexo版本到<code>4.1.1</code>（下载了很久很久）</p><pre><code>npm i hexo@4.1.1</code></pre><p>花括号还是被转移了，所以我开始升级版本<code>5.1.0</code></p><p>MathJax 数学公式支持也关闭了</p><pre><code>mathjax:  on: false #是否启用  per_page: false # 若只渲染单个页面，此选项设为false，页面内加入 mathjax: true</code></pre><p>救命啊，网上搜不到解决方案啊哭了</p><p>2.<strong>在官网上看到转义内容如下：</strong></p><p>HEXO使用<a href="http://mozilla.github.io/nunjucks/">Nunjucks</a>渲染职位（<a href="http://paularmstrong.github.io/swig/">痛饮</a>在旧版本，共享类似的语法使用）。用<code>&#123;&#123; &#125;&#125;</code>或包裹的内容<code>&#123;% %&#125;</code>将被解析，并可能导致问题。您可以使用<a href="https://hexo.io/docs/tag-plugins#Raw"><code>raw</code></a>标签插件，单引号<code>&#123;&#123; &#125;&#125;</code>或三引号将其包装，从而跳过解析过程。可替代地，标签Nunjucks可以通过禁用<a href="https://hexo.io/api/renderer#Disable-Nunjucks-tags">渲染器</a>或<a href="https://hexo.io/api/rendering#Disable-Nunjucks-tags">手动禁用</a>用户。</p><pre><code>&amp;#123;％raw％&amp;#125; 您好&amp;#123;&amp;#123;world&amp;#125;&amp;#125; &amp;#123;％endraw％&amp;#125;​``` 你好&amp;#123;&amp;#123;世界&amp;#125;&amp;#125; ​```</code></pre><p>所以以后带有花括号或者其它一些特殊字符的代码最好放在<code>&#123;&#125;</code>英文格式下的点点点代码块中</p><p>……</p><p>Redis这篇中可行了，但是IDEA那篇还是如故┭┮﹏┭┮为什么？？？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欢迎━(&lt;em&gt;｀∀´&lt;/em&gt;)ノ亻!光临呐！&lt;/p&gt;
&lt;h1 id=&quot;下载安装node-js-cnpm-hexo&quot;&gt;&lt;a href=&quot;#下载安装node-js-cnpm-hexo&quot; class=&quot;headerlink&quot; title=&quot;下载安装node.js+cnpm+h</summary>
      
    
    
    
    <category term="工具" scheme="https://xiaopantongxue816.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="hexo" scheme="https://xiaopantongxue816.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xiaopantongxue816.github.io/2020/08/16/hello-world/"/>
    <id>https://xiaopantongxue816.github.io/2020/08/16/hello-world/</id>
    <published>2020-08-16T01:50:43.907Z</published>
    <updated>2020-09-14T04:50:22.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>. </p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><pre><code class="bash">E:\XiaoPanTongXue&gt;hexo n&quot;我的新博客&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><pre><code class="bash">#启动本地hexoE:\XiaoPanTongXue&gt;hexo s</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><pre><code class="bash">#生成文件E:\XiaoPanTongXue&gt;hexo g</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><pre><code class="bash">#部署文件E:\XiaoPanTongXue&gt;hexo d</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Clean"><a href="#Clean" class="headerlink" title="Clean"></a>Clean</h3><pre><code class="bash">$ hexo clean</code></pre><pre><code class="bash">#清除文件E:\XiaoPanTongXue&gt;hexo c</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.i</summary>
      
    
    
    
    <category term="其它" scheme="https://xiaopantongxue816.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="xxx" scheme="https://xiaopantongxue816.github.io/tags/xxx/"/>
    
  </entry>
  
</feed>
