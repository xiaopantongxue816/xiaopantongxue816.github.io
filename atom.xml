<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小潘同学的教室</title>
  
  <subtitle>黎明来临之前没有人知道还要等多久</subtitle>
  <link href="https://xiaopantongxue816.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiaopantongxue816.github.io/"/>
  <updated>2020-10-13T09:00:28.549Z</updated>
  <id>https://xiaopantongxue816.github.io/</id>
  
  <author>
    <name>小潘同学</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux内网时间同步配置</title>
    <link href="https://xiaopantongxue816.github.io/2020/10/12/linux%E5%86%85%E7%BD%91%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE/"/>
    <id>https://xiaopantongxue816.github.io/2020/10/12/linux%E5%86%85%E7%BD%91%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE/</id>
    <published>2020-10-12T08:34:06.000Z</published>
    <updated>2020-10-13T09:00:28.549Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/su-root/p/11380198.html">linux 内网时间同步配置</a></p><a id="more"></a> <p>server：192.168.100.5</p><h1 id="两层结构"><a href="#两层结构" class="headerlink" title="两层结构"></a>两层结构</h1><h2 id="一、确认Linux环境（server-client都要确认）"><a href="#一、确认Linux环境（server-client都要确认）" class="headerlink" title="一、确认Linux环境（server+client都要确认）"></a><strong>一、确认Linux环境（server+client都要确认）</strong></h2><pre><code class="bash">1、确认ntp是否安装rpm -qa|grep ntp#若只有ntpdate而未见ntp，执行以下操作yum -y remove ntpdate-4.2.6p5-22.el7.x86_64        #删除原有ntpdateyum -y install ntp2、ntp设置为自启动systemctl enable ntpdsystemctl stop chronydsystemctl disable chronyd                     //chronyd服务和ntpd冲突会导致开机启动不生效3、关闭防火墙和selinux                         //或配置防火墙过滤规则systemctl stop firewalldsystemctl disable firewalldvi /etc/selinux/config将SELINUX=enforcing改为SELINUX=disabled</code></pre><h2 id="二、Linux系统server端配置"><a href="#二、Linux系统server端配置" class="headerlink" title="二、Linux系统server端配置"></a>二、Linux系统server端配置</h2><pre><code class="bash">1.修改配置文件vi /etc/ntp.conf# Hosts on local network are less restricted.restrict 192.168.100.0 mask 255.255.255.0 nomodify notrap              #允许192.168.100.0网段的服务器连接同步时间# Use public servers from the pool.ntp.org project.# Please consider joining the pool (http://www.pool.ntp.org/join.html).#server 0.rhel.pool.ntp.org iburst#server 1.rhel.pool.ntp.org iburst#server 2.rhel.pool.ntp.org iburst#server 3.rhel.pool.ntp.org iburstserver 127.127.1.0fudge  127.127.1.0 stratum 10#broadcast 192.168.1.255 autokey        # broadcast server#broadcastclient                        # broadcast client#broadcast 224.0.1.1 autokey            # multicast server#multicastclient 224.0.1.1              # multicast client#manycastserver 239.255.254.254         # manycast server#manycastclient 239.255.254.254 autokey # manycast client 2.启动ntp服务systemctl start ntpd</code></pre><h2 id="三、Linux系统client端配置"><a href="#三、Linux系统client端配置" class="headerlink" title="三、Linux系统client端配置"></a>三、Linux系统client端配置</h2><pre><code class="bash">1.修改配置文件vi /etc/ntp.conf# For more information about this file, see the man pages# ntp.conf(5), ntp_acc(5), ntp_auth(5), ntp_clock(5), ntp_misc(5), ntp_mon(5). driftfile /var/lib/ntp/drift# Permit time synchronization with our time source, but do not# permit the source to query or modify the service on this system.restrict 192.168.100.5 nomodify notrap noquery          # 配置允许上游时间服务器主动修改本机的时间# Permit all access over the loopback interface.  This could# be tightened as well, but to do so would effect some of# the administrative functions.restrict 127.0.0.1restrict ::1# Hosts on local network are less restricted.# Use public servers from the pool.ntp.org project.# Please consider joining the pool (http://www.pool.ntp.org/join.html).#server 0.rhel.pool.ntp.org iburst#server 1.rhel.pool.ntp.org iburst#server 2.rhel.pool.ntp.org iburst#server 3.rhel.pool.ntp.org iburstserver 192.168.100.5 prefer    #时间服务器地址#broadcast 192.168.1.255 autokey        # broadcast server2.执行同步命令：//第一配置时执行一下就行，后续不要写到定时任务里！！！ntpdate -u 192.168.100.5systemctl start ntpd   #启ntp服    </code></pre><h2 id="四、每分钟同步一次"><a href="#四、每分钟同步一次" class="headerlink" title="四、每分钟同步一次"></a>四、每分钟同步一次</h2><p><strong>1.client机器上编写一个定时脚本<code>jobs.cron</code>：</strong> </p><pre><code class="bash">####ntpd  Synchronize every 1 minute00-59/60 * * * * /usr/sbin/ntpdate -u 192.168.100.5 &gt;/dev/null 2&gt;&amp;1</code></pre><p><strong>2.开启定时任务</strong></p><pre><code class="bash">cd /usr/local/test #进到定时任务所在目录crontab jobs.croncrontab -l</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/su-root/p/11380198.html&quot;&gt;linux 内网时间同步配置&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="工作方案" scheme="https://xiaopantongxue816.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%A1%88/"/>
    
    
    <category term="linux" scheme="https://xiaopantongxue816.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>服务器目录保存到DB2</title>
    <link href="https://xiaopantongxue816.github.io/2020/10/12/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%AE%E5%BD%95%E4%BF%9D%E5%AD%98%E5%88%B0DB2/"/>
    <id>https://xiaopantongxue816.github.io/2020/10/12/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%AE%E5%BD%95%E4%BF%9D%E5%AD%98%E5%88%B0DB2/</id>
    <published>2020-10-11T23:59:49.000Z</published>
    <updated>2020-10-13T08:44:18.711Z</updated>
    
    <content type="html"><![CDATA[<p>读取10.0.0.*下<code>/mnt/iPDS</code>的中文目录保存到DB2并在目录结构发生变化时更新数据库信息。</p><a id="more"></a> <h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://blog.csdn.net/jiajiren11/article/details/80465316">python中确定两个列表(list)之间是否为子集关系</a></p><h1 id="代码4-0（可删除数据库垃圾目录，读取nametree-text跳过空行）"><a href="#代码4-0（可删除数据库垃圾目录，读取nametree-text跳过空行）" class="headerlink" title="代码4.0（可删除数据库垃圾目录，读取nametree.text跳过空行）"></a>代码4.0（可删除数据库垃圾目录，读取nametree.text跳过空行）</h1><pre><code class="python"># coding=utf-8import ibm_dbimport osimport sysimport timefrom datetime import datetimeconn_H225 = ibm_db.connect(&quot;DATABASE=PDMS;HOSTNAME=10.0.0.*;PORT=50000;PROTOCOL=TCPIP;UID=pdmsplat;PWD=*******;&quot;, &quot;&quot;, &quot;&quot;)newaddpath=[]DB2NameTreeList=[]def saveNameTreeToText(list_data):    with open(&quot;/usr/local/pjy/dirNameTree.txt&quot;, &#39;a&#39;) as f:        for item in list_data:            f.write(str(item))            f.write(&#39;\n&#39;)    f.close()def readTextNameTree():    nameList = []    with open(&quot;/usr/local/pjy/dirNameTree.txt&quot;, &#39;r&#39;) as f:        for line in f:            if line.isspace():                continue            l=line.strip(&#39;\n&#39;)            nameList.append(l)    f.close()    return nameList# ------------------------------------------------------------# 删除DB2垃圾目录# ------------------------------------------------------------        def delDB2Name(conn,delPathlist):    for delPath in delPathlist:                rows=delectDirFromDB2(conn,delPath)                # 提交事务                ibm_db.commit(conn)# ------------------------------------------------------------# 保存根目录到DB2# ------------------------------------------------------------        def saveRootNameToDB2(path,conn,textNameTreeList):    allfilelist=os.listdir(path)    # 遍历该文件夹下的所有目录或者文件    for file in allfilelist:        filepath=os.path.join(path,file)        # 如果是文件夹，递归调用函数        if os.path.isdir(filepath) and file==&#39;iPDS&#39;:            if filepath in textNameTreeList:                #print(&quot;已储存目录；&quot;+filepath)                saveRootNameToDB2(filepath,conn,textNameTreeList)            else:                print(&quot;有新目录：&quot;+filepath)                #print(&quot;filepath:&quot;+filepath)                #绝对路径                newaddpath.append(filepath)                #print(&quot;filename:&quot;+file)                #父id                #FID=select_FID(conn)                # 父目录                parentfilepath = os.path.dirname(filepath)                PFID=selectFIDByFaPath(conn,parentfilepath)                #插入数据库                rows=insertDirToDB2(conn,filepath,file,PFID)                # 提交事务                ibm_db.commit(conn)# ------------------------------------------------------------# 保存目录到DB2目录# ------------------------------------------------------------        def saveNameTreeToDB2(path,conn,textNameTreeList):    allfilelist=os.listdir(path)    # 遍历该文件夹下的所有目录或者文件    for file in allfilelist:        filepath=os.path.join(path,file)        # 如果是文件夹，递归调用函数        if os.path.isdir(filepath) and file!=&#39;#recycle&#39;:            if filepath in textNameTreeList:                #print(&quot;已储存目录；&quot;+filepath)                saveNameTreeToDB2(filepath,conn,textNameTreeList)            else:                print(&quot;有新目录：&quot;+filepath)                #print(&quot;filepath:&quot;+filepath)                #绝对路径                newaddpath.append(filepath)                #print(&quot;filename:&quot;+file)                #父id                #FID=select_FID(conn)                # 父目录                parentfilepath = os.path.dirname(filepath)                PFID=selectFIDByFaPath(conn,parentfilepath)                #插入数据库                rows=insertDirToDB2(conn,filepath,file,PFID)                # 提交事务                ibm_db.commit(conn)                saveNameTreeToDB2(filepath,conn,textNameTreeList)# ------------------------------------------------------------# ------------------------------------------------------------# 删除DB2目录信息# ------------------------------------------------------------    def delectDirFromDB2(conn,delPath):    sql_delectDirFromDB2 = &quot;DELETE from H225.T_NES where FOLDER_PATH=&#39;%s&#39;&quot; % (delPath)    stmt = ibm_db.exec_immediate(conn,sql_delectDirFromDB2)    rows=ibm_db.num_rows(stmt)    print(&quot;删除垃圾目录：&quot;+delPath)    return rows# ------------------------------------------------------------# 插入DB2目录信息# ------------------------------------------------------------    def insertDirToDB2(conn,filepath,file,PFID):    sql_insertDirToDB2 = &quot;INSERT INTO H225.T_NES (NAME,FOLDER_PATH,P_FID) VALUES (&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;)&quot; % (file,filepath,PFID)    stmt = ibm_db.exec_immediate(conn,sql_insertDirToDB2)    rows=ibm_db.num_rows(stmt)    return rows# ------------------------------------------------------------# 查询最新自动插入FID# ------------------------------------------------------------    def selectAutoFID(conn):    sql_selectAutoFID = &quot;SELECT IDENTITY_VAL_LOCAL() as FID FROM SYSIBM.SYSDUMMY1&quot;    FID = ibm_db.exec_immediate(conn,sql_selectAutoFID)    #rows=ibm_db.num_rows(stmt)    return FID  # ------------------------------------------------------------# 根据父目录绝对路径查询父目录FID# ------------------------------------------------------------    def selectFIDByFaPath(conn,filepath):    sql_select_FID = &quot;SELECT FID from H225.T_NES where FOLDER_PATH=&#39;%s&#39;&quot; % (filepath)    stmt = ibm_db.exec_immediate(conn,sql_select_FID)    #rows=ibm_db.num_rows(stmt)    result_FID = ibm_db.fetch_both(stmt)    while result_FID !=False:        FID=result_FID[&quot;FID&quot;]        return FID # ------------------------------------------------------------# 查询数据库全部目录结构# ------------------------------------------------------------    def selectDB2NameTreeList(conn):    sql_selectDB2NameTreeList = &quot;SELECT FOLDER_PATH from H225.T_NES&quot;     stmt = ibm_db.exec_immediate(conn,sql_selectDB2NameTreeList)    #rows=ibm_db.num_rows(stmt)    result_DB2NameTreeList = ibm_db.fetch_both(stmt)    while result_DB2NameTreeList !=False:        DB2NameTreeList.append(result_DB2NameTreeList[&#39;FOLDER_PATH&#39;])        result_DB2NameTreeList = ibm_db.fetch_both(stmt)    return DB2NameTreeList def main():    root=&quot;/mnt&quot;    rootdir = &quot;/mnt/iPDS&quot;    textNameTreeList=readTextNameTree()    #print(textNameTreeList)    if conn_H225:        saveRootNameToDB2(root,conn_H225,textNameTreeList)        saveNameTreeToDB2(rootdir,conn_H225,textNameTreeList)        #最后记得关闭数据库连接        print(&quot;新增目录:&quot;)        print(newaddpath)        saveNameTreeToText(newaddpath)        DB2NameTreeList=selectDB2NameTreeList(conn_H225)        newTextNameTreeList=readTextNameTree()        # 判断数据库是否存在被删除目录        #print(set(DB2NameTreeList))        #print(&quot;***************************************分割线************************************&quot;)        #print(set(newTextNameTreeList))        if set(DB2NameTreeList) &gt; set(newTextNameTreeList):            #删除            print(&quot;存在垃圾目录&quot;)            delPathlist=(list(set(DB2NameTreeList).difference(set(newTextNameTreeList)))) # 数据库中有而text中没有的             delDB2Name(conn_H225,delPathlist)    ibm_db.close(conn_H225)if __name__ == &#39;__main__&#39;:    main()</code></pre><h1 id="代码3-0（保存父目录NAME改为ID）"><a href="#代码3-0（保存父目录NAME改为ID）" class="headerlink" title="代码3.0（保存父目录NAME改为ID）"></a>代码3.0（保存父目录NAME改为ID）</h1><pre><code class="python"># coding=utf-8import ibm_dbimport osimport sysimport timefrom datetime import datetimeconn_H225 = ibm_db.connect(&quot;DATABASE=PDMS;HOSTNAME=10.0.0.26;PORT=50000;PROTOCOL=TCPIP;UID=pdmsplat;PWD=pdms123;&quot;, &quot;&quot;, &quot;&quot;)newaddpath=[]def saveNameTree(list_data):    with open(&quot;/usr/local/pjy/dirNameTree.txt&quot;, &#39;a&#39;) as f:        for item in list_data:            f.write(str(item))            f.write(&#39;\n&#39;)    f.close()def readNameTree():    nameList = []    with open(&quot;/usr/local/pjy/dirNameTree.txt&quot;, &#39;r&#39;) as f:        for line in f:            l=line.strip(&#39;\n&#39;)            nameList.append(l)    f.close()    return nameListdef getallfile(path,conn,readList):    allfilelist=os.listdir(path)    # 遍历该文件夹下的所有目录或者文件    for file in allfilelist:        filepath=os.path.join(path,file)        # 如果是文件夹，递归调用函数        if os.path.isdir(filepath) and file!=&#39;#recycle&#39;:            if filepath in readList:                print(&quot;已储存目录&quot;)                getallfile(filepath,conn,readList)            else:                print(&quot;有新目录&quot;)                #print(&quot;filepath:&quot;+filepath)                #绝对路径                newaddpath.append(filepath)                # 父目录                parentfilepath = os.path.dirname(filepath)                PFID=select_FIDByFaPath(conn,parentfilepath)                #插入数据库                rows=insertDirInfo(conn,filepath,file,PFID)                # 提交事务                ibm_db.commit(conn)                getallfile(filepath,conn,readList)# ------------------------------------------------------------# ------------------------------------------------------------# 插入DB2目录信息# ------------------------------------------------------------    def insertDirInfo(conn,filepath,file,PFID):    sql_insertDirInfo = &quot;INSERT INTO H225.T_NES (NAME,FOLDER_PATH,P_FID) VALUES (&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;)&quot; % (file,filepath,PFID)    stmt = ibm_db.exec_immediate(conn,sql_insertDirInfo)    rows=ibm_db.num_rows(stmt)    return rows# ------------------------------------------------------------# 查询最新自动插入FID# ------------------------------------------------------------    def select_autoFID(conn):    sql_select_autoFID = &quot;SELECT IDENTITY_VAL_LOCAL() as FID FROM SYSIBM.SYSDUMMY1&quot;    FID = ibm_db.exec_immediate(conn,sql_select_autoFID)    #rows=ibm_db.num_rows(stmt)    return FID  # ------------------------------------------------------------# 根据父目录绝对路径查询FID# ------------------------------------------------------------    def select_FIDByFaPath(conn,filepath):    sql_select_FID = &quot;SELECT FID from H225.T_NES where FOLDER_PATH=&#39;%s&#39;&quot; % (filepath)    stmt = ibm_db.exec_immediate(conn,sql_select_FID)    #rows=ibm_db.num_rows(stmt)    result_FID = ibm_db.fetch_both(stmt)    while result_FID !=False:        FID=result_FID[&quot;FID&quot;]        return FID def main():    rootdir = &quot;/mnt/iPDS&quot;    readList=readNameTree()    #print(readList)    if conn_H225:        getallfile(rootdir,conn_H225,readList)        #最后记得关闭数据库连接    ibm_db.close(conn_H225)    saveNameTree(newaddpath)if __name__ == &#39;__main__&#39;:    main()</code></pre><h1 id="代码2-0（可新增目录同步数据库）"><a href="#代码2-0（可新增目录同步数据库）" class="headerlink" title="代码2.0（可新增目录同步数据库）"></a>代码2.0（可新增目录同步数据库）</h1><p>全部目录已保存再次新增时</p><pre><code class="python"># coding=utf-8import ibm_dbimport osimport sysimport timefrom datetime import datetimeconn_H225 = ibm_db.connect(&quot;DATABASE=PDMS;HOSTNAME=10.0.0.*;PORT=50000;PROTOCOL=TCPIP;UID=pdmsplat;PWD=pdms123;&quot;, &quot;&quot;, &quot;&quot;)newaddpath=[]def saveNameTree(list_data):    with open(&quot;/usr/local/pjy/dirNameTree.txt&quot;, &#39;a&#39;) as f:        for item in list_data:            f.write(str(item))            f.write(&#39;\n&#39;)    f.close()def readNameTree():    nameList = []    with open(&quot;/usr/local/pjy/dirNameTree.txt&quot;, &#39;r&#39;) as f:        for line in f:            l=line.strip(&#39;\n&#39;)            nameList.append(l)    f.close()    return nameListdef getallfile(path,conn,readList):    allfilelist=os.listdir(path)    # 遍历该文件夹下的所有目录或者文件    for file in allfilelist:        filepath=os.path.join(path,file)        # 如果是文件夹，递归调用函数        if os.path.isdir(filepath) and file!=&#39;#recycle&#39;:            if filepath in readList:                print(&quot;已储存目录&quot;)                getallfile(filepath,conn,readList)            else:                print(&quot;有新目录&quot;)                #print(&quot;filepath:&quot;+filepath)                #绝对路径                newaddpath.append(filepath)                #print(&quot;filename:&quot;+file)                # 父目录                parentfilepath = os.path.dirname(filepath)                fanamelist=parentfilepath.split(&#39;/&#39;)                parentfile=fanamelist[-1]                #print(&quot;fatherfilename:&quot;+parentfile)                #print(&quot;-------------------------&quot;)                #插入数据库                rows=insertDirInfo(conn,filepath,file,parentfile)                # 提交事务                ibm_db.commit(conn)                getallfile(filepath,conn,readList)# ------------------------------------------------------------# ------------------------------------------------------------# 插入DB2目录信息# ------------------------------------------------------------    def insertDirInfo(conn,filepath,file,parentfile):    sql_insertDirInfo = &quot;INSERT INTO H225.T_NES (NAME,FOLDER_PATH,P_FID) VALUES (&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;)&quot; % (file,filepath,parentfile)    stmt = ibm_db.exec_immediate(conn,sql_insertDirInfo)    rows=ibm_db.num_rows(stmt)    return rowsdef main():    rootdir = &quot;/mnt/iPDS&quot;    readList=readNameTree()    #print(readList)    if conn_H225:        getallfile(rootdir,conn_H225,readList)        #最后记得关闭数据库连接    ibm_db.close(conn_H225)    saveNameTree(newaddpath)if __name__ == &#39;__main__&#39;:    main()</code></pre><h1 id="代码1-0（全部目录保存但不更新）"><a href="#代码1-0（全部目录保存但不更新）" class="headerlink" title="代码1.0（全部目录保存但不更新）"></a>代码1.0（全部目录保存但不更新）</h1><pre><code class="python"># coding=utf-8import ibm_dbimport osimport timefrom datetime import datetimeconn_H225 = ibm_db.connect(&quot;DATABASE=PDMS;HOSTNAME=10.0.0.26;PORT=50000;PROTOCOL=TCPIP;UID=pdmsplat;PWD=pdms123;&quot;, &quot;&quot;, &quot;&quot;)def getallfile(path,conn):    allfilelist=os.listdir(path)    # 遍历该文件夹下的所有目录或者文件    for file in allfilelist:        filepath=os.path.join(path,file)        # 如果是文件夹，递归调用函数        if os.path.isdir(filepath) and file!=&#39;#recycle&#39;:            print(&quot;filepath:&quot;+filepath)            print(&quot;filename:&quot;+file)            # 父目录            parentfilepath = os.path.dirname(filepath)            fanamelist=parentfilepath.split(&#39;/&#39;)            parentfile=fanamelist[-1]            print(&quot;fatherfilename:&quot;+parentfile)            print(&quot;-------------------------&quot;)            #插入数据库            rows=insertDirInfo(conn,filepath,file,parentfile)            # 提交事务            ibm_db.commit(conn)            getallfile(filepath,conn)    #return allpath, allname# ------------------------------------------------------------# ------------------------------------------------------------# 插入DB2目录信息# ------------------------------------------------------------    def insertDirInfo(conn,filepath,file,parentfile):    sql_insertDirInfo = &quot;INSERT INTO H225.T_NES (NAME,FOLDER_PATH,P_FID) VALUES (&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;)&quot; % (file,filepath,parentfile)    stmt = ibm_db.exec_immediate(conn,sql_insertDirInfo)    rows=ibm_db.num_rows(stmt)    return rowsdef main():    rootdir = &quot;/mnt/iPDS&quot;    #files, names = getallfile(rootdir)    if conn_H225:        #print(conn_H225)        getallfile(rootdir,conn_H225)        #最后记得关闭数据库连接    ibm_db.close(conn_H225)if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;读取10.0.0.*下&lt;code&gt;/mnt/iPDS&lt;/code&gt;的中文目录保存到DB2并在目录结构发生变化时更新数据库信息。&lt;/p&gt;</summary>
    
    
    
    <category term="工作方案" scheme="https://xiaopantongxue816.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%A1%88/"/>
    
    
    <category term="linux" scheme="https://xiaopantongxue816.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="https://xiaopantongxue816.github.io/2020/10/02/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://xiaopantongxue816.github.io/2020/10/02/%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-10-02T00:41:12.000Z</published>
    <updated>2020-10-13T08:51:37.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DB2"><a href="#DB2" class="headerlink" title="DB2"></a>DB2</h1><p>连接</p><pre><code class="sql">string DataDbName = &quot;xxx&quot;;string DataDbUser = &quot;xx&quot;;string DataDbUsing = &quot;xxxxxx&quot;;</code></pre><h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><pre><code class="sql">--删除H225.T_NES表中全部数据DELETE FROM H225.T_NES--查找前100条数据 Select * from CORS.FM_USER fetch（取来） first 100 rows only;--根据end倒序排序取只前两条数据select * from ap.AP_SHIFT order by end desc fetch first 2 rows only-- DB2 9.7以前的版本只能用CHAR不能用TO_CHAR，9.7以后的版本相反，只能用TO_CHAR不能用CHAR--正序只取第一条数据start=2020-10-01select * from ap.AP_SHIFT a where to_char(start,&#39;yyyy-mm-dd&#39;)=&#39;&amp;#123;2020-10-01&amp;#125;&#39; order by start asc fetch first 1 rows only（SELECT TO_CHAR(CURRENT_TIMESTAMP, &#39;YYYYMMDD HH24&#39;) FROM SYSIBM.SYSDUMMY1;）--来自百度--查询日期在&#39;2020-10-01 07:45:00&#39; and &#39;2020-10-01 19:45:00&#39;之间的数据select * from ap.FUC_STRIP_DATA_ARC where toc between &#39;2020-10-01 07:45:00&#39; and &#39;2020-10-01 19:45:00&#39;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DB2&quot;&gt;&lt;a href=&quot;#DB2&quot; class=&quot;headerlink&quot; title=&quot;DB2&quot;&gt;&lt;/a&gt;DB2&lt;/h1&gt;&lt;p&gt;连接&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;string DataDbName = &amp;quot;xxx&amp;quot;;</summary>
      
    
    
    
    <category term="后端" scheme="https://xiaopantongxue816.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="数据库" scheme="https://xiaopantongxue816.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>阅读</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/24/%E9%98%85%E8%AF%BB/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/24/%E9%98%85%E8%AF%BB/</id>
    <published>2020-09-24T06:40:16.000Z</published>
    <updated>2020-10-03T08:21:41.238Z</updated>
    
    <content type="html"><![CDATA[<p>遇到自己疲态时期，没办法休息又不想浪费时间就会想读点东西，去看一些前辈的话可以找到很多自己从前可能不知道的方法，又或是关于人生，工作的一些新的看法和理解。看着别人几年前甚至是十年前发表的文章，评论或者其他，就觉得时间真的好神奇，尽管只是我自己单向的阅读，但就是有一种我在看电影，看记录片，看他们在讨论，在交流的感觉。</p><hr><a id="more"></a> <h1 id="文章链接"><a href="#文章链接" class="headerlink" title="文章链接"></a>文章链接</h1><ul><li><a href="http://mindhacks.cn/2009/12/20/dark-time/">暗时间-【刘未鹏】（”在路上想出答案，也是一种愉悦的体验“，就是车上读书这个太难了，不会晕车吗）</a></li><li><a href="ruanyifeng.com/road/2004/2004-12-11-orwell.html">奥威尔-【阮一峰 】（就像一个短短的人物传记，但是很有趣，会想要看完他）</a></li><li><a href="http://www.ruanyifeng.com/road/2005/2005-09-26-zeng-guofan.html">曾国藩家书-【阮一峰】（有想看曾国藩家书全集的冲动）</a></li><li><a href="http://www.ruanyifeng.com/road/2005/2005-08-01-eternal-sunshine.html">美丽心灵的永恒阳光-【阮一峰】（原来故事里的故事还有故事，深入剖析是这么有趣的一件事）</a></li></ul><p>​        </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;遇到自己疲态时期，没办法休息又不想浪费时间就会想读点东西，去看一些前辈的话可以找到很多自己从前可能不知道的方法，又或是关于人生，工作的一些新的看法和理解。看着别人几年前甚至是十年前发表的文章，评论或者其他，就觉得时间真的好神奇，尽管只是我自己单向的阅读，但就是有一种我在看电影，看记录片，看他们在讨论，在交流的感觉。&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="生活" scheme="https://xiaopantongxue816.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="点滴" scheme="https://xiaopantongxue816.github.io/tags/%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/23/JavaScript/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/23/JavaScript/</id>
    <published>2020-09-23T05:15:57.000Z</published>
    <updated>2020-09-23T05:56:40.965Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://c.runoob.com/codedemo">菜鸟工具编程实例</a></p><h1 id="百分比进度条"><a href="#百分比进度条" class="headerlink" title="百分比进度条"></a>百分比进度条</h1><p><strong>html</strong></p><pre><code class="html">&lt;h1&gt;JavaScript 百分比进度条&lt;/h1&gt;&lt;div id=&quot;myProgress&quot;&gt;  &lt;div id=&quot;myBar&quot;&gt;10%&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;button onclick=&quot;move()&quot;&gt;点我&lt;/button&gt;</code></pre><p><strong>CSS</strong></p><pre><code class="css">#myProgress &amp;#123;  width: 100%;  background-color: #ddd;&amp;#125;#myBar &amp;#123;  width: 10%;  height: 30px;  background-color: #4CAF50;  text-align: center;  line-height: 30px;  color: white;&amp;#125;</code></pre><p><strong>JavaScript</strong> </p><pre><code class="javascript">function move() &amp;#123;  var elem = document.getElementById(&quot;myBar&quot;);     var width = 10;  var id = setInterval(frame, 10);  function frame() &amp;#123;    if (width &gt;= 100) &amp;#123;      clearInterval(id);    &amp;#125; else &amp;#123;      width++;       elem.style.width = width + &#39;%&#39;;       elem.innerHTML = width * 1  + &#39;%&#39;;    &amp;#125;  &amp;#125;&amp;#125;</code></pre><h1 id="echarts使用实例"><a href="#echarts使用实例" class="headerlink" title="echarts使用实例"></a>echarts使用实例</h1><pre><code class="javascript">&lt;script type=&quot;text/javascript&quot;&gt;var myChart = echarts.init(document.getElementById(&#39;myDiv&#39;));function loadData() &amp;#123;        $.get( &#39;&#39;, function (data) &amp;#123;            myChart_Mem_Used.setOption(option = &amp;#123;                title: &amp;#123;                    text: &#39;cpu使用概览&#39;,                    subtext: &#39;160.0.3.*&#39;                &amp;#125;,                tooltip: &amp;#123;                    trigger: &#39;axis&#39;,                    axisPointer: &amp;#123;                        type: &#39;cross&#39;                    &amp;#125;                &amp;#125;,                toolbox: &amp;#123;                    show: true,                    feature: &amp;#123;                        saveAsImage: &amp;#123;&amp;#125;                    &amp;#125;                &amp;#125;,                xAxis: &amp;#123;                    type: &#39;category&#39;,                    boundaryGap: false,                    data: [&#39;160.0.3.1&#39;, &#39;160.0.3.2&#39;, &#39;160.0.3.3&#39;, &#39;160.0.3.4&#39;, &#39;160.0.3.5&#39;, &#39;160.0.3.6&#39;, &#39;160.0.3.7&#39;]                &amp;#125;,                yAxis: &amp;#123;                    type: &#39;value&#39;,                    axisLabel: &amp;#123;                        formatter: &#39;&amp;#123;value&amp;#125; &#39;                    &amp;#125;,                    axisPointer: &amp;#123;                        snap: true                    &amp;#125;                &amp;#125;,                visualMap: &amp;#123;                    show: false,                    dimension: 1.0,                    pieces: [&amp;#123;                        lte: 0.8,                        color: &#39;green&#39;                    &amp;#125;, &amp;#123;                        gt: 0.8,                        lte: 0.9,                        color: &#39;green&#39;                    &amp;#125;,&amp;#123;                        gt: 0.9,                        color: &#39;green&#39;                    &amp;#125;]                &amp;#125;,                series: [                    &amp;#123;                        name: &#39;用量&#39;,                        type: &#39;line&#39;,                        smooth: true,                        data: [0.22, 0.33, 0.23, 0.93, 0.17,0.11,0.13],                        markArea: &amp;#123;                            data: [ [&amp;#123;                                name: &#39;warning&#39;,                                yAxis: &#39;0.90&#39;                            &amp;#125;, &amp;#123;                                yAxis: &#39;1.00&#39;                            &amp;#125;] ]                        &amp;#125;                    &amp;#125;                ]        &amp;#125;)&amp;#125;)     loadData();    &lt;/script&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://c.runoob.com/codedemo&quot;&gt;菜鸟工具编程实例&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;百分比进度条&quot;&gt;&lt;a href=&quot;#百分比进度条&quot; class=&quot;headerlink&quot; title=&quot;百分比进度条&quot;&gt;&lt;/a&gt;百分比进度条&lt;/h</summary>
      
    
    
    
    <category term="前端" scheme="https://xiaopantongxue816.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/23/CSS/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/23/CSS/</id>
    <published>2020-09-23T05:15:30.000Z</published>
    <updated>2020-09-23T05:51:21.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字体大小-，加粗"><a href="#字体大小-，加粗" class="headerlink" title="字体大小 ，加粗"></a>字体大小 ，加粗</h1><h2 id="标签内设置"><a href="#标签内设置" class="headerlink" title="标签内设置"></a>标签内设置</h2><pre><code class="css">.span&amp;#123;        font-size:14px；        font-weight:bold；&amp;#125;</code></pre><pre><code class="html">&lt;div style=&quot;font-size:12px&quot;&gt;设置div内字体大小为12px&lt;/div&gt; </code></pre><h1 id="h1默认属性"><a href="#h1默认属性" class="headerlink" title="h1默认属性"></a>h1默认属性</h1><pre><code class="css">font-size:32px；margin：21.44px 0px；</code></pre><h1 id="清除浮动（防止div重叠）"><a href="#清除浮动（防止div重叠）" class="headerlink" title="清除浮动（防止div重叠）"></a>清除浮动（防止div重叠）</h1><pre><code class="css">clear:both #清除上层带来的浮动</code></pre><h1 id="div不换行"><a href="#div不换行" class="headerlink" title="div不换行"></a>div不换行</h1><pre><code class="css">float:left #向左浮动</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字体大小-，加粗&quot;&gt;&lt;a href=&quot;#字体大小-，加粗&quot; class=&quot;headerlink&quot; title=&quot;字体大小 ，加粗&quot;&gt;&lt;/a&gt;字体大小 ，加粗&lt;/h1&gt;&lt;h2 id=&quot;标签内设置&quot;&gt;&lt;a href=&quot;#标签内设置&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="前端" scheme="https://xiaopantongxue816.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/23/HTML/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/23/HTML/</id>
    <published>2020-09-23T05:15:16.000Z</published>
    <updated>2020-09-23T05:22:46.207Z</updated>
    
    
    
    
    <category term="前端" scheme="https://xiaopantongxue816.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/23/Maven/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/23/Maven/</id>
    <published>2020-09-23T04:50:22.000Z</published>
    <updated>2020-09-23T04:56:19.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用依赖"><a href="#常用依赖" class="headerlink" title="常用依赖"></a>常用依赖</h1><h2 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h2><pre><code class="xml">    &lt;dependency&gt;      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;      &lt;version&gt;3.0.1&lt;/version&gt;      &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;      &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;      &lt;version&gt;2.1&lt;/version&gt;      &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;      &lt;artifactId&gt;jstl&lt;/artifactId&gt;      &lt;version&gt;1.2&lt;/version&gt;    &lt;/dependency&gt;</code></pre><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><pre><code class="xml">   &lt;dependency&gt;      &lt;groupId&gt;redis.clients&lt;/groupId&gt;      &lt;artifactId&gt;jedis&lt;/artifactId&gt;      &lt;version&gt;2.9.0&lt;/version&gt;    &lt;/dependency&gt;</code></pre><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><pre><code class="xml">  &lt;!--json--&gt;    &lt;dependency&gt;      &lt;groupId&gt;com.alibaba&lt;/groupId&gt;      &lt;artifactId&gt;fastjson&lt;/artifactId&gt;      &lt;version&gt;1.2.41&lt;/version&gt;    &lt;/dependency&gt;</code></pre><h1 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h1><h2 id="java编译插件"><a href="#java编译插件" class="headerlink" title="java编译插件"></a>java编译插件</h2><pre><code class="xml">      &lt;!-- java编译插件 --&gt;      &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;        &lt;version&gt;3.2&lt;/version&gt;        &lt;configuration&gt;          &lt;source&gt;1.8&lt;/source&gt;          &lt;target&gt;1.8&lt;/target&gt;          &lt;encoding&gt;UTF-8&lt;/encoding&gt;        &lt;/configuration&gt;      &lt;/plugin&gt;</code></pre><h2 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h2><pre><code class="xml">    &lt;plugin&gt;        &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;        &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;        &lt;configuration&gt;          &lt;!-- 指定端口 --&gt;          &lt;port&gt;82&lt;/port&gt;          &lt;!-- 请求路径 --&gt;          &lt;path&gt;/&lt;/path&gt;        &lt;/configuration&gt;      &lt;/plugin&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用依赖&quot;&gt;&lt;a href=&quot;#常用依赖&quot; class=&quot;headerlink&quot; title=&quot;常用依赖&quot;&gt;&lt;/a&gt;常用依赖&lt;/h1&gt;&lt;h2 id=&quot;servlet&quot;&gt;&lt;a href=&quot;#servlet&quot; class=&quot;headerlink&quot; title=&quot;ser</summary>
      
    
    
    
    <category term="后端" scheme="https://xiaopantongxue816.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="项目管理" scheme="https://xiaopantongxue816.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>protobuf传输数据</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/18/protobuf%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/18/protobuf%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/</id>
    <published>2020-09-18T05:31:36.000Z</published>
    <updated>2020-09-18T07:59:40.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编写proto文件（C-）"><a href="#编写proto文件（C-）" class="headerlink" title="编写proto文件（C++）"></a>编写proto文件（C++）</h1><pre><code class="protobuf">syntax = &quot;proto3&quot;;package hsm;message StructWdsdMessage &amp;#123;   //4*9=36字节  float Z1_wdsd=1;            //长度4字节  float Z2_wdsd=2;  float Z3_wdsd=3;  float Z4_wdsd=4;  float Z5_wdsd=5;  float Z6_wdsd=6;  float Z7M_wdsd=7;  float Z7LR_wdsd=8;  float Z8_wdsd=9;&amp;#125;message StructBpxxMessage &amp;#123;     //32+32+32=96字节  GJH gjh=1;                 //32字节  PH ph=2;                  //32字节  uint32 GZFL=3;           //4字节  float BPWZ=4;  float BPCD=5;  float BPKD=6;  float BPHD=7;  float BPJSWD=8;  float BPMBWD=9;  uint32 DH=10;  message GJH &amp;#123;          fixed32 Gjh0 = 1;          fixed32 Gjh1 = 2;          fixed32 Gjh2 = 3;          fixed32 Gjh3 = 4;          fixed32 Gjh4 = 5;          fixed32 Gjh5 = 6;          fixed32 Gjh6 = 7;          fixed32 Gjh7 = 8;      &amp;#125;  message PH &amp;#123;          fixed32 Ph0 = 1;          fixed32 Ph1 = 2;          fixed32 Ph2 = 3;          fixed32 Ph3 = 4;          fixed32 Ph4 = 5;          fixed32 Ph5 = 6;          fixed32 Ph6 = 7;          fixed32 Ph7 = 8;      &amp;#125;&amp;#125;</code></pre><h2 id="数据类型映射"><a href="#数据类型映射" class="headerlink" title="数据类型映射"></a>数据类型映射</h2><table><thead><tr><th>protobuf</th><th>c++/字节</th><th>java</th></tr></thead><tbody><tr><td>float/4</td><td>float/4</td><td></td></tr><tr><td>fixed32（4）*8/32</td><td>char/32</td><td></td></tr><tr><td>uint32/4</td><td>uint/4</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="linux编译执行"><a href="#linux编译执行" class="headerlink" title="linux编译执行"></a>linux编译执行</h1><a id="more"></a> <h2 id="proto编译报错"><a href="#proto编译报错" class="headerlink" title="proto编译报错"></a>proto编译报错</h2><p> <a href="http://www.mamicode.com/info-detail-1337673.html">linux下安装protobuf教程+示例（详细包括makefile文件）</a> </p><p>不知道为啥，好像是makefile文件不对</p><pre><code class="bash">/bin/bash: -c:行0: `if test -e EventMessage FurnaceTrackInfo.proto; then if ( test EventMessage FurnaceTrackInfo.proto -nt .work/EventMessage FurnaceTrackInfo.pb.cc ) ; then echo &quot;[SC] HSM/EventMessage FurnaceTrackInfo.proto&quot;; protoc --cpp_out=.work EventMessage FurnaceTrackInfo.proto; if ! test -d ../../include/HSM ; then mkdir ../../include/HSM;fi; cp .work/EventMessage FurnaceTrackInfo.pb.h ../../include/HSM; fi fi @if test -e EventMessage FurnaceTrackInfo.proto; then if ( test EventMessage FurnaceTrackInfo.proto -nt .work/EventMessage FurnaceTrackInfo.pb.cc ) ; then echo &quot;[SC] HSM/EventMessage FurnaceTrackInfo.proto&quot;; protoc --cpp_out=.work EventMessage FurnaceTrackInfo.proto; if ! test -d ../../include/HSM ; then mkdir ../../include/HSM;fi; cp .work/EventMessage FurnaceTrackInfo.pb.h ../../include/HSM; fi fi;&#39;make: *** [.work/EventMessage.pb.cc] 错误 </code></pre><p>不用make命令直接执行  <code>protoc --c++_out=. FurnaceTrackInfo.proto</code>也会报错</p><pre><code class="bash">protoc-gen-c++: program not found or is not executablePlease specify a program using absolute path or make sure the program is available in your PATH system variable--c++_out: protoc-gen-c++: Plugin failed with status code 1.</code></pre><p>但是直接执行<code> protoc -I=. --cpp_out=. FurnaceTrackInfo.proto</code>就正常生成<code>xx.*.cc</code>和<code>xx.*.h</code>文件了</p><p>编写makefile文件（注意是tab不是空格）</p><pre><code class="bash">proto_msg:    protoc -I=. --cpp_out=. FurnaceTrackInfo.proto</code></pre><p>执行make会有一个警告</p><pre><code class="bash">make: Warning: File `makefile&#39; has modification time 17 s in the futureprotoc -I=. --cpp_out=. FurnaceTrackInfo.protomake: 警告：检测到时钟错误。您的创建可能是不完整的。</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;编写proto文件（C-）&quot;&gt;&lt;a href=&quot;#编写proto文件（C-）&quot; class=&quot;headerlink&quot; title=&quot;编写proto文件（C++）&quot;&gt;&lt;/a&gt;编写proto文件（C++）&lt;/h1&gt;&lt;pre&gt;&lt;code class=&quot;protobuf&quot;&gt;
syntax = &amp;quot;proto3&amp;quot;;
package hsm;

message StructWdsdMessage &amp;amp;#123;   //4*9=36字节
  float Z1_wdsd=1;            //长度4字节
  float Z2_wdsd=2;
  float Z3_wdsd=3;
  float Z4_wdsd=4;
  float Z5_wdsd=5;
  float Z6_wdsd=6;
  float Z7M_wdsd=7;
  float Z7LR_wdsd=8;
  float Z8_wdsd=9;
&amp;amp;#125;
message StructBpxxMessage &amp;amp;#123;     //32+32+32=96字节
  GJH gjh=1;                 //32字节
  PH ph=2;                  //32字节
  uint32 GZFL=3;           //4字节
  float BPWZ=4;
  float BPCD=5;
  float BPKD=6;
  float BPHD=7;
  float BPJSWD=8;
  float BPMBWD=9;
  uint32 DH=10;


  message GJH &amp;amp;#123;
          fixed32 Gjh0 = 1;
          fixed32 Gjh1 = 2;
          fixed32 Gjh2 = 3;
          fixed32 Gjh3 = 4;
          fixed32 Gjh4 = 5;
          fixed32 Gjh5 = 6;
          fixed32 Gjh6 = 7;
          fixed32 Gjh7 = 8;
      &amp;amp;#125;
  message PH &amp;amp;#123;
          fixed32 Ph0 = 1;
          fixed32 Ph1 = 2;
          fixed32 Ph2 = 3;
          fixed32 Ph3 = 4;
          fixed32 Ph4 = 5;
          fixed32 Ph5 = 6;
          fixed32 Ph6 = 7;
          fixed32 Ph7 = 8;
      &amp;amp;#125;
&amp;amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;数据类型映射&quot;&gt;&lt;a href=&quot;#数据类型映射&quot; class=&quot;headerlink&quot; title=&quot;数据类型映射&quot;&gt;&lt;/a&gt;数据类型映射&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;protobuf&lt;/th&gt;
&lt;th&gt;c++/字节&lt;/th&gt;
&lt;th&gt;java&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;float/4&lt;/td&gt;
&lt;td&gt;float/4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fixed32（4）*8/32&lt;/td&gt;
&lt;td&gt;char/32&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uint32/4&lt;/td&gt;
&lt;td&gt;uint/4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&quot;linux编译执行&quot;&gt;&lt;a href=&quot;#linux编译执行&quot; class=&quot;headerlink&quot; title=&quot;linux编译执行&quot;&gt;&lt;/a&gt;linux编译执行&lt;/h1&gt;</summary>
    
    
    
    <category term="工作方案" scheme="https://xiaopantongxue816.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%A1%88/"/>
    
    
    <category term="序列化" scheme="https://xiaopantongxue816.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Utils</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/17/Utils/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/17/Utils/</id>
    <published>2020-09-17T01:13:15.000Z</published>
    <updated>2020-09-27T04:05:17.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ServerConfig"><a href="#ServerConfig" class="headerlink" title="ServerConfig"></a>ServerConfig</h1><pre><code class="java">@Componentpublic class ServerConfig&amp;#123;    /**     * 获取完整的请求路径，包括：域名，端口，上下文访问路径     *      * @return 服务地址     */    public String getUrl()    &amp;#123;        HttpServletRequest request = ServletUtils.getRequest();        return getDomain(request);    &amp;#125;    public static String getDomain(HttpServletRequest request)    &amp;#123;        StringBuffer url = request.getRequestURL();        String contextPath = request.getServletContext().getContextPath();        return url.delete(url.length() - request.getRequestURI().length(), url.length()).append(contextPath).toString();    &amp;#125;&amp;#125;</code></pre><h1 id="上传下载"><a href="#上传下载" class="headerlink" title="上传下载"></a>上传下载</h1><h2 id="fileDownload"><a href="#fileDownload" class="headerlink" title="fileDownload"></a>fileDownload</h2><pre><code class="java">/**     * 通用下载请求     *      * @param fileName 文件名称     * @param delete 是否删除     */    @GetMapping(&quot;common/download&quot;)    public void fileDownload(String fileName, Boolean delete, HttpServletResponse response, HttpServletRequest request)    &amp;#123;        try        &amp;#123;            if (!FileUtils.isValidFilename(fileName))            &amp;#123;                throw new Exception(StringUtils.format(&quot;文件名称(&amp;#123;&amp;#125;)非法，不允许下载。 &quot;, fileName));            &amp;#125;            String realFileName = System.currentTimeMillis() + fileName.substring(fileName.indexOf(&quot;_&quot;) + 1);            String filePath = Global.getDownloadPath() + fileName;            response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);            FileUtils.setAttachmentResponseHeader(response, realFileName);            FileUtils.writeBytes(filePath, response.getOutputStream());            if (delete)            &amp;#123;                FileUtils.deleteFile(filePath);            &amp;#125;        &amp;#125;        catch (Exception e)        &amp;#123;            log.error(&quot;下载文件失败&quot;, e);        &amp;#125;    &amp;#125;</code></pre><h2 id="uploadFile"><a href="#uploadFile" class="headerlink" title="uploadFile"></a>uploadFile</h2><pre><code class="java">    @Autowired    private ServerConfig serverConfig;/**     * 通用上传请求     */    @PostMapping(&quot;/common/upload&quot;)    @ResponseBody    public AjaxResult uploadFile(MultipartFile file) throws Exception    &amp;#123;        try        &amp;#123;            // 上传文件路径            String filePath = Global.getUploadPath();            // 上传并返回新文件名称            String fileName = FileUploadUtils.upload(filePath, file);            String url = serverConfig.getUrl() + fileName;            AjaxResult ajax = AjaxResult.success();            ajax.put(&quot;fileName&quot;, fileName);            ajax.put(&quot;url&quot;, url);            return ajax;        &amp;#125;        catch (Exception e)        &amp;#123;            return AjaxResult.error(e.getMessage());        &amp;#125;    &amp;#125;</code></pre><h2 id="resourceDownload"><a href="#resourceDownload" class="headerlink" title="resourceDownload"></a>resourceDownload</h2><pre><code class="java"> /**     * 本地资源通用下载     */    @GetMapping(&quot;/common/download/resource&quot;)    public void resourceDownload(String resource, HttpServletRequest request, HttpServletResponse response)            throws Exception    &amp;#123;        // 本地资源路径        String localPath = Global.getProfile();        // 数据库资源地址        String downloadPath = localPath + StringUtils.substringAfter(resource, Constants.RESOURCE_PREFIX);        // 下载名称        String downloadName = StringUtils.substringAfterLast(downloadPath, &quot;/&quot;);        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);        FileUtils.setAttachmentResponseHeader(response, downloadName);        FileUtils.writeBytes(downloadPath, response.getOutputStream());    &amp;#125;</code></pre><h1 id="ServletUtils-java"><a href="#ServletUtils-java" class="headerlink" title="ServletUtils.java"></a>ServletUtils.java</h1><h2 id="isAjaxRequest"><a href="#isAjaxRequest" class="headerlink" title="isAjaxRequest()"></a>isAjaxRequest()</h2><pre><code class="java">/** * 客户端工具类 *  * @author ruoyi *//**     * 是否是Ajax异步请求     *      * @param request     */    public static boolean isAjaxRequest(HttpServletRequest request)    &amp;#123;        String accept = request.getHeader(&quot;accept&quot;);        if (accept != null &amp;&amp; accept.indexOf(&quot;application/json&quot;) != -1)        &amp;#123;            return true;        &amp;#125;        String xRequestedWith = request.getHeader(&quot;X-Requested-With&quot;);        if (xRequestedWith != null &amp;&amp; xRequestedWith.indexOf(&quot;XMLHttpRequest&quot;) != -1)        &amp;#123;            return true;        &amp;#125;        String uri = request.getRequestURI();        if (StringUtils.inStringIgnoreCase(uri, &quot;.json&quot;, &quot;.xml&quot;))        &amp;#123;            return true;        &amp;#125;        String ajax = request.getParameter(&quot;__ajax&quot;);        if (StringUtils.inStringIgnoreCase(ajax, &quot;json&quot;, &quot;xml&quot;))        &amp;#123;            return true;        &amp;#125;        return false;    &amp;#125;</code></pre><p><strong>request.getHeader(accept)</strong></p><pre><code class="java">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</code></pre><p><strong>indexOf(“application/json”)</strong></p><ul><li><strong>int indexOf(String str):</strong> 返回指定字符在字符串中第一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</li><li><strong>int indexOf(String str, int fromIndex):</strong> 返回从 fromIndex 位置开始查找指定字符在字符串中第一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</li></ul><p>request.getHeader(“X-Requested-With”)</p><p><code>null</code></p><p><strong>request.getRequestURI()</strong></p><pre><code class="java">request.getRequestURI()  //loginURL=http://localhost/login </code></pre><p><strong>StringUtils.inStringIgnoreCase(uri, “.json”, “.xml”)</strong></p><p>忽略大小写是否包含</p><p><strong>request.getParameter(“__ajax”)</strong></p><p><code>null</code></p><hr><p><strong>目的</strong></p><p><a href="https://www.cnblogs.com/kangyuanjiang/p/8719699.html">判断请求是浏览器页面请求还是ajax进入</a></p><p>其实我们在某种场景下需要判断用户是从浏览器地址栏敲击url发起的请求 ，还是我们通过ajax发起的请求呢？我们可以通过 Request.IsAjaxRequest方法判断是否是ajax过来的请求, 那么他的原理是什么呢？其实他就是判断了浏览器提交的协议头 如果是 ajax发起的请求他会多一个协议头</p><p><code>X-Requested-With:XMLHttpRequest</code></p><p>,如果是浏览器进入该页面就不会存在着这个协议头  以上结论只对主流浏览器,扩展根据这个特性可以做权限管理</p><hr><h2 id="renderString"><a href="#renderString" class="headerlink" title="renderString()"></a>renderString()</h2><pre><code>/**     * 将字符串渲染到客户端     *      * @param response 渲染对象     * @param string 待渲染的字符串     * @return null     */    public static String renderString(HttpServletResponse response, String string)    &amp;#123;        try        &amp;#123;            response.setContentType(&quot;application/json&quot;);            response.setCharacterEncoding(&quot;utf-8&quot;);            response.getWriter().print(string);        &amp;#125;        catch (IOException e)        &amp;#123;            e.printStackTrace();        &amp;#125;        return null;    &amp;#125;</code></pre><pre><code>Response Headers    ...    Content-Type: text/html;charset=UTF-8    ...    ...</code></pre><h2 id="访问Redis返回到网页"><a href="#访问Redis返回到网页" class="headerlink" title="访问Redis返回到网页"></a>访问Redis返回到网页</h2><h3 id="StartServlet-java"><a href="#StartServlet-java" class="headerlink" title="StartServlet.java"></a>StartServlet.java</h3><pre><code class="java">package com.baosight;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import org.apache.commons.pool2.impl.GenericObjectPoolConfig;import redis.clients.jedis.JedisPool;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.ArrayList;@WebServlet(&quot;/StartServlet&quot;)public class StartServlet extends HttpServlet &amp;#123;    private JedisPool jedisPool=null;   /**     * @see HttpServlet#HttpServlet()     */    public StartServlet() &amp;#123;        super();        // TODO Auto-generated constructor stub    &amp;#125;    /**     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)     */    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123;        jedisPool = new JedisPool(new GenericObjectPoolConfig(), &quot;160.0.3.5&quot;, 6379, 30000, &quot;12345&quot;);        String json = jedisPool.getResource().get(&quot;system information 168&quot;);        ArrayList&lt;String&gt; arrayList = JSONObject.toJavaObject(JSON.parseObject(json), ArrayList.class);        for (String s : arrayList) &amp;#123;            //JSONObject.toJavaObject(JSON.parseObject(s), ArrayList.class)        &amp;#125;        // 使用 GBK 设置中文正常显示        response.setCharacterEncoding(&quot;GBK&quot;);        //response.getWriter().write(&quot;菜鸟教程：http://www.runoob.com&quot;);        //response.getWriter().write(s);        request.getRequestDispatcher(&quot;/index.jsp&quot;).forward(request,response);    &amp;#125;    /**     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)     */    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &amp;#123;        // TODO Auto-generated method stub        doGet(request, response);    &amp;#125;&amp;#125;</code></pre><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a><strong>web.xml</strong></h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app version=&quot;2.5&quot;         xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&gt;    &lt;servlet&gt;        &lt;!-- 类名 --&gt;        &lt;servlet-name&gt;StartServlet&lt;/servlet-name&gt;        &lt;!-- 所在的包 --&gt;        &lt;servlet-class&gt;com.baosight.StartServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;StartServlet&lt;/servlet-name&gt;        &lt;!-- 访问的网址 --&gt;        &lt;url-pattern&gt;/TomcatTest/StartServlet&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre><h1 id="StringUtils"><a href="#StringUtils" class="headerlink" title="StringUtils"></a>StringUtils</h1><h2 id="字符串转字节数组"><a href="#字符串转字节数组" class="headerlink" title="字符串转字节数组"></a>字符串转字节数组</h2><pre><code class="java">        String ss=&quot;&amp;#123;5,7,8,9&amp;#125;&quot;;        System.out.println(stringToBytes(ss));                    # [B@5451c3a8        System.out.println(Arrays.toString(stringToBytes(ss)));   # [5, 7, 8, 9]public static byte[] stringToBytes(String receive_msg)&amp;#123;        String[] s=receive_msg.split(&quot;,&quot;);        byte[] bytes=new byte[s.length];        for (int i=0;i&lt;=s.length-1;i++)&amp;#123;            if (i==0)&amp;#123;                bytes[i]=Byte.valueOf(s[i].substring(1));            &amp;#125;else if (i==s.length-1)&amp;#123;                bytes[i]=Byte.valueOf(s[i].substring(0,s[i].length()-1));            &amp;#125;else &amp;#123;                bytes[i]=Byte.valueOf(s[i]);            &amp;#125;    &amp;#125;    return bytes;    &amp;#125;</code></pre><h2 id="对象转字节数组"><a href="#对象转字节数组" class="headerlink" title="对象转字节数组"></a>对象转字节数组</h2><pre><code class="java"># protobuf序列化特有的方法 byte[] byteArray = Object.toByteArray();</code></pre><h2 id="字节数组转字符串"><a href="#字节数组转字符串" class="headerlink" title="字节数组转字符串"></a>字节数组转字符串</h2><pre><code class="java"># Byte[] bytes=&amp;#123;1,2,3,4&amp;#125;;--》</code></pre><h2 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h2><pre><code class="java"># 字节数组String s1 = bytes.toString();            # Byte[] bytes=&amp;#123;1,2,3,4&amp;#125;;-&gt;[Ljava.lang.Byte;@5451c3a8String s4 = ArrayUtils.toString(bytes);  # Byte[] bytes=&amp;#123;1,2,3,4&amp;#125;;-&gt;&amp;#123;1,2,3,4&amp;#125;             Arrays.toString(bytes)；     # Byte[] bytes=&amp;#123;1,2,3,4&amp;#125;;-&gt;&quot;[1, 2, 3, 4]&quot;# 字符串数组                                                                  String s3 = ArrayUtil.arrayToString(s);  # String[] s=&amp;#123;&quot;&amp;#123;5&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&amp;#125;&quot;&amp;#125;;-&gt;&amp;#123;5 7 8 9&amp;#125;</code></pre><h2 id="第n个截取长度-m-（C-）"><a href="#第n个截取长度-m-（C-）" class="headerlink" title="第n个截取长度 m （C#）"></a>第n个截取长度 m （C#）</h2><pre><code class="c#">&amp;#123;    string str2 = binreadx.ReadString();    str2=str2.Substring(0,8);    byte[] array = System.Text.Encoding.ASCII.GetBytes(str2); //数组array为对应的ASCII数组    string ASCIIstr2 = null;    for (int n = 0; n &lt; array.Length; n++)    &amp;#123;        int asciicode = (int)(array[n]);        ASCIIstr2 += Convert.ToString(asciicode);//字符串ASCIIstr2 为对应的ASCII字符串    &amp;#125;    //dgvTelegram.Rows[i].Cells[&quot;SNAPSHOOT&quot;].Value = binreadx.ReadString();    dgvTelegram.Rows[i].Cells[&quot;SNAPSHOOT&quot;].Value = ASCIIstr2;&amp;#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ServerConfig&quot;&gt;&lt;a href=&quot;#ServerConfig&quot; class=&quot;headerlink&quot; title=&quot;ServerConfig&quot;&gt;&lt;/a&gt;ServerConfig&lt;/h1&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Componen</summary>
      
    
    
    
    <category term="后端" scheme="https://xiaopantongxue816.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="工具类" scheme="https://xiaopantongxue816.github.io/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Shiro</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/16/Shiro/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/16/Shiro/</id>
    <published>2020-09-16T10:20:00.000Z</published>
    <updated>2020-09-18T00:19:00.031Z</updated>
    
    <content type="html"><![CDATA[<p>Apache Shiro是Java的一个安全框架。Shiro可以帮助我们完成：认证、授权、加密、会话管理、与Web集成、缓存等。 </p><hr><a id="more"></a> <h1 id="若依管理系统"><a href="#若依管理系统" class="headerlink" title="若依管理系统"></a>若依管理系统</h1><h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><pre><code class="yml"># Shiroshiro:  user:    # 登录地址    loginUrl: /login    # 权限认证失败地址    unauthorizedUrl: /unauth    # 首页地址    indexUrl: /index    # 验证码开关    captchaEnabled: true    # 验证码类型 math 数组计算 char 字符    captchaType: math  cookie:    # 设置Cookie的域名 默认空，即当前访问的域名    domain:     # 设置cookie的有效访问路径    path: /    # 设置HttpOnly属性    httpOnly: true    # 设置Cookie的过期时间，天为单位    maxAge: 30    # 设置密钥，务必保持唯一性（生成方式，直接拷贝到main运行即可）KeyGenerator keygen = KeyGenerator.getInstance(&quot;AES&quot;); SecretKey deskey = keygen.generateKey(); System.out.println(Base64.encodeToString(deskey.getEncoded()));    cipherKey: zSyK5Kp6PZAAjlT+eeNMlg==  session:    # Session超时时间，-1代表永不过期（默认30分钟）    expireTime: 30    # 同步session到数据库的周期（默认1分钟）    dbSyncPeriod: 1    # 相隔多久检查一次session的有效性，默认就是10分钟    validationInterval: 10    # 同一个用户最大会话数，比如2的意思是同一个账号允许最多同时两个人登录（默认-1不限制）    maxSession: -1    # 踢出之前登录的/之后登录的用户，默认踢出之前登录的用户    kickoutAfter: false</code></pre><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><pre><code class="java">package com.ruoyi.web.controller.system;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.subject.Subject;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.ResponseBody;import com.ruoyi.common.core.controller.BaseController;import com.ruoyi.common.core.domain.AjaxResult;import com.ruoyi.common.utils.ServletUtils;import com.ruoyi.common.utils.StringUtils;/** * 登录验证 *  * @author ruoyi */@Controllerpublic class SysLoginController extends BaseController&amp;#123;    @GetMapping(&quot;/login&quot;)    public String login(HttpServletRequest request, HttpServletResponse response)    &amp;#123;        // 如果是Ajax请求，返回Json字符串。        if (ServletUtils.isAjaxRequest(request))        &amp;#123;            return ServletUtils.renderString(response, &quot;&amp;#123;\&quot;code\&quot;:\&quot;1\&quot;,\&quot;msg\&quot;:\&quot;未登录或登录超时。请重新登录\&quot;&amp;#125;&quot;);        &amp;#125;        return &quot;login&quot;;    &amp;#125;    @PostMapping(&quot;/login&quot;)    @ResponseBody    public AjaxResult ajaxLogin(String username, String password, Boolean rememberMe)    &amp;#123;        UsernamePasswordToken token = new UsernamePasswordToken(username, password, rememberMe);        Subject subject = SecurityUtils.getSubject();        try        &amp;#123;            subject.login(token);            return success();        &amp;#125;        catch (AuthenticationException e)        &amp;#123;            String msg = &quot;用户或密码错误&quot;;            if (StringUtils.isNotEmpty(e.getMessage()))            &amp;#123;                msg = e.getMessage();            &amp;#125;            return error(msg);        &amp;#125;    &amp;#125;    @GetMapping(&quot;/unauth&quot;)    public String unauth()    &amp;#123;        return &quot;error/unauth&quot;;    &amp;#125;&amp;#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Apache Shiro是Java的一个安全框架。Shiro可以帮助我们完成：认证、授权、加密、会话管理、与Web集成、缓存等。 &lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="后端" scheme="https://xiaopantongxue816.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="安全框架" scheme="https://xiaopantongxue816.github.io/tags/%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Thymeleaf</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/16/Thymeleaf/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/16/Thymeleaf/</id>
    <published>2020-09-16T09:39:46.000Z</published>
    <updated>2020-09-17T08:12:00.050Z</updated>
    
    <content type="html"><![CDATA[<p>Springboot默认是不支持JSP的，默认使用thymeleaf模板引擎 。</p><p>官方文档：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a></p><hr><a id="more"></a> <h1 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h1><pre><code class="yml"># Spring配置spring:  # 模板引擎  thymeleaf:    mode: HTML    encoding: utf-8    # 禁用缓存    cache: false</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Springboot默认是不支持JSP的，默认使用thymeleaf模板引擎 。&lt;/p&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html&quot;&gt;https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="后端" scheme="https://xiaopantongxue816.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="模板引擎" scheme="https://xiaopantongxue816.github.io/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/16/docker/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/16/docker/</id>
    <published>2020-09-16T07:06:30.000Z</published>
    <updated>2020-09-17T08:09:56.419Z</updated>
    
    <content type="html"><![CDATA[<p>文件来自黑马公开课</p><p>其它参考：<a href="https://zhang.ge/5126.html">https://zhang.ge/5126.html</a></p><h1 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1 Docker简介"></a>1 Docker简介</h1><h2 id="1-1-什么是虚拟化"><a href="#1-1-什么是虚拟化" class="headerlink" title="1.1 什么是虚拟化"></a>1.1 什么是虚拟化</h2><p>​    在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。</p><p>​    在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件   对资源充分利用</p><p>​    虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。</p><a id="more"></a> <h2 id="1-2-什么是Docker"><a href="#1-2-什么是Docker" class="headerlink" title="1.2 什么是Docker"></a>1.2 什么是Docker</h2><p>​    Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 <a href="https://github.com/docker/docker">GitHub</a> 上进行维护。****</p><p>​    Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。</p><p>​    Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p><p>​    在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p><p>为什么选择Docker?</p><p>（1）上手快。</p><p>​    用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。    </p><p>         随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。</p><p>（2）职责的逻辑分类</p><p>​    使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）”</p><p>（3）快速高效的开发生命周期</p><p>​    Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。）</p><p>（4）鼓励使用面向服务的架构</p><p>​    Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序）</p><h2 id="1-3-容器与虚拟机比较"><a href="#1-3-容器与虚拟机比较" class="headerlink" title="1.3 容器与虚拟机比较"></a>1.3 容器与虚拟机比较</h2><p>​    下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。</p><p>与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。</p><h2 id="1-4-Docker-组件"><a href="#1-4-Docker-组件" class="headerlink" title="1.4 Docker 组件"></a>1.4 Docker 组件</h2><h3 id="1-4-1-Docker服务器与客户端"><a href="#1-4-1-Docker服务器与客户端" class="headerlink" title="1.4.1 Docker服务器与客户端"></a>1.4.1 Docker服务器与客户端</h3><p>​    Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。</p><h3 id="1-4-2-Docker镜像与容器"><a href="#1-4-2-Docker镜像与容器" class="headerlink" title="1.4.2 Docker镜像与容器"></a>1.4.2 Docker镜像与容器</h3><p>​    镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。例如：</p><p>添加一个文件；</p><p>执行一个命令；</p><p>打开一个窗口。</p><p>也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。</p><p>​    Docker可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启动起来的，容器中可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而容器则是启动或者执行阶段。  容器基于镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要的软件或者服务。</p><p>所以Docker容器就是：</p><p>​    一个镜像格式；</p><p>​    一些列标准操作；</p><p>​    一个执行环境。</p><p>​    Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件。</p><p>         和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。</p><p>         Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。</p><h3 id="1-4-3-Registry（注册中心）"><a href="#1-4-3-Registry（注册中心）" class="headerlink" title="1.4.3 Registry（注册中心）"></a>1.4.3 Registry（注册中心）</h3><p>​    Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像（说明：在Docker Hub下载镜像巨慢，可以自己构建私有的Registry）。</p><p>​    <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h1 id="2-Docker安装与启动"><a href="#2-Docker安装与启动" class="headerlink" title="2 Docker安装与启动"></a>2 Docker安装与启动</h1><h2 id="2-1-安装Docker"><a href="#2-1-安装Docker" class="headerlink" title="2.1 安装Docker"></a>2.1 安装Docker</h2><p>​    Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。</p><p>​    由于我们学习的环境都使用的是CentOS，因此这里我们将Docker安装到CentOS上。注意：这里建议安装在CentOS7.x以上的版本，在CentOS6.x的版本中，安装前需要安装其他很多的环境而且Docker很多补丁不支持更新。</p><p>​    请直接挂载课程配套的Centos7.x镜像    </p><p>（1）yum 包更新到最新</p><pre><code class="powershell">sudo yum update</code></pre><p>（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><pre><code class="shell">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre><p>（3）设置yum源为阿里云</p><pre><code class="shell">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre><p>（4）安装docker</p><pre><code class="shell">sudo yum install docker-ce</code></pre><p>（5）安装后查看docker版本</p><pre><code class="shell">docker -v</code></pre><h2 id="2-2-设置ustc的镜像"><a href="#2-2-设置ustc的镜像" class="headerlink" title="2.2 设置ustc的镜像"></a>2.2 设置ustc的镜像</h2><p>ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。</p><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p><p>编辑该文件：（默认是没有的需要手动创建）</p><pre><code class="shell">vi /etc/docker/daemon.json  </code></pre><p>上边直接执行可能文件会写入不了可以先创建<code>docker</code>文件夹在创建<code>daemon.json</code>文件就可以正常保存了</p><p>在该文件中输入如下内容：</p><pre><code class="shell">&amp;#123;&quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]&amp;#125;</code></pre><h2 id="2-3-Docker的启动与停止"><a href="#2-3-Docker的启动与停止" class="headerlink" title="2.3 Docker的启动与停止"></a>2.3 Docker的启动与停止</h2><p><strong>systemctl</strong>命令是系统服务管理器指令</p><p>启动docker：</p><pre><code class="shell">systemctl start docker</code></pre><p>停止docker：</p><pre><code class="shell">systemctl stop docker</code></pre><p>重启docker：</p><pre><code class="shell">systemctl restart docker</code></pre><p>查看docker状态：</p><pre><code class="shell">systemctl status docker</code></pre><p>开机启动：</p><pre><code class="shell">systemctl enable docker</code></pre><p>查看docker概要信息</p><pre><code class="shell">docker info</code></pre><p>查看docker帮助文档</p><pre><code class="shell">docker --help</code></pre><h1 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3 常用命令"></a>3 常用命令</h1><h2 id="3-1-镜像相关命令"><a href="#3-1-镜像相关命令" class="headerlink" title="3.1 镜像相关命令"></a>3.1 镜像相关命令</h2><h3 id="3-1-1-查看镜像"><a href="#3-1-1-查看镜像" class="headerlink" title="3.1.1 查看镜像"></a>3.1.1 查看镜像</h3><pre><code class="shell">docker images</code></pre><p>REPOSITORY：镜像名称</p><p>TAG：镜像标签</p><p>IMAGE ID：镜像ID</p><p>CREATED：镜像的创建日期（不是获取该镜像的日期）</p><p>SIZE：镜像大小</p><p>这些镜像都是存储在Docker宿主机的/var/lib/docker目录下</p><h3 id="3-1-2-搜索镜像"><a href="#3-1-2-搜索镜像" class="headerlink" title="3.1.2 搜索镜像"></a>3.1.2 搜索镜像</h3><p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p><pre><code class="shell">docker search 镜像名称</code></pre><p>NAME：仓库名称</p><p>DESCRIPTION：镜像描述</p><p>STARS：用户评价，反应一个镜像的受欢迎程度</p><p>OFFICIAL：是否官方</p><p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p><h3 id="3-1-3-拉取镜像"><a href="#3-1-3-拉取镜像" class="headerlink" title="3.1.3 拉取镜像"></a>3.1.3 拉取镜像</h3><p>拉取镜像就是从中央仓库中下载镜像到本地</p><pre><code class="shell">docker pull 镜像名称</code></pre><p>例如，我要下载centos7镜像</p><pre><code class="shell">docker pull centos:7</code></pre><h3 id="3-1-4-删除镜像"><a href="#3-1-4-删除镜像" class="headerlink" title="3.1.4 删除镜像"></a>3.1.4 删除镜像</h3><p>按镜像ID删除镜像</p><pre><code class="shell">docker rmi 镜像ID</code></pre><p>删除所有镜像</p><pre><code class="shell">docker rmi `docker images -q`</code></pre><h2 id="3-2-容器相关命令"><a href="#3-2-容器相关命令" class="headerlink" title="3.2 容器相关命令"></a>3.2 容器相关命令</h2><h3 id="3-2-1-查看容器"><a href="#3-2-1-查看容器" class="headerlink" title="3.2.1 查看容器"></a>3.2.1 查看容器</h3><p>查看正在运行的容器</p><pre><code class="shell">docker ps</code></pre><p>查看所有容器</p><pre><code class="shell">docker ps –a</code></pre><p>查看最后一次运行的容器</p><pre><code class="shell">docker ps –l</code></pre><p>查看停止的容器</p><pre><code class="shell">docker ps -f status=exited</code></pre><h3 id="3-2-2-创建与启动容器"><a href="#3-2-2-创建与启动容器" class="headerlink" title="3.2.2 创建与启动容器"></a>3.2.2 创建与启动容器</h3><p>创建容器常用的参数说明：</p><p>创建容器命令：docker run</p><p> -i：表示运行容器</p><p> -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</p><p> –name :为创建的容器命名。</p><p> -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</p><p> -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</p><p> -p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</p><p>（1）交互式方式创建容器</p><pre><code class="shell">docker run -it --name=容器名称 镜像名称:标签 /bin/bash</code></pre><p>这时我们通过ps命令查看，发现可以看到启动的容器，状态为启动状态  </p><p>退出当前容器</p><pre><code class="shell">exit</code></pre><p>（2）守护式方式创建容器：</p><pre><code class="shell">docker run -di --name=容器名称 镜像名称:标签</code></pre><p>登录守护式容器方式：</p><pre><code class="shell">docker exec -it 容器名称 (或者容器ID)  /bin/bash</code></pre><h3 id="3-2-3-停止与启动容器"><a href="#3-2-3-停止与启动容器" class="headerlink" title="3.2.3 停止与启动容器"></a>3.2.3 停止与启动容器</h3><p>停止容器：</p><pre><code class="shell">docker stop 容器名称（或者容器ID）</code></pre><p>启动容器：</p><pre><code class="shell">docker start 容器名称（或者容器ID）</code></pre><h3 id="3-2-4-文件拷贝"><a href="#3-2-4-文件拷贝" class="headerlink" title="3.2.4 文件拷贝"></a>3.2.4 文件拷贝</h3><p>如果我们需要将文件拷贝到容器内可以使用cp命令</p><pre><code class="shell">docker cp 需要拷贝的文件或目录 容器名称:容器目录</code></pre><p>也可以将文件从容器内拷贝出来</p><pre><code class="shell">docker cp 容器名称:容器目录 需要拷贝的文件或目录</code></pre><h3 id="3-2-6-查看容器IP地址"><a href="#3-2-6-查看容器IP地址" class="headerlink" title="3.2.6 查看容器IP地址"></a>3.2.6 查看容器IP地址</h3><p>我们可以通过以下命令查看容器运行的各种数据</p><pre><code class="shell">docker inspect 容器名称（容器ID） </code></pre><p>也可以直接执行下面的命令直接输出IP地址</p><pre><code class="shell">docker inspect --format=&#39;&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;&#39; 容器名称（容器ID）</code></pre><h3 id="3-2-7-删除容器"><a href="#3-2-7-删除容器" class="headerlink" title="3.2.7 删除容器"></a>3.2.7 删除容器</h3><p>删除指定的容器：</p><pre><code class="shell">docker rm 容器名称（容器ID）</code></pre><h1 id="4-应用部署"><a href="#4-应用部署" class="headerlink" title="4 应用部署"></a>4 应用部署</h1><h2 id="4-1-MySQL部署"><a href="#4-1-MySQL部署" class="headerlink" title="4.1 MySQL部署"></a>4.1 MySQL部署</h2><p>（1）拉取mysql镜像</p><pre><code class="shell">docker pull centos/mysql-57-centos7</code></pre><p>（2）创建容器</p><pre><code class="shell">docker run -di --name=tensquare_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=123456 centos/mysql-57-centos7</code></pre><p>-p 代表端口映射，格式为  宿主机映射端口:容器运行端口</p><p>-e 代表添加环境变量  MYSQL_ROOT_PASSWORD  是root用户的登陆密码</p><p>（3）远程登录mysql</p><p>连接宿主机的IP  ,指定端口为33306 </p><h2 id="4-2-tomcat部署"><a href="#4-2-tomcat部署" class="headerlink" title="4.2 tomcat部署"></a>4.2 tomcat部署</h2><p>（1）拉取镜像</p><pre><code class="shell">docker pull tomcat:7-jre7</code></pre><p>（2）创建容器</p><p>创建容器  -p表示地址映射</p><pre><code class="shell">docker run -di --name=mytomcat -p 9000:8080 -v /usr/local/webapps:/usr/local/tomcat/webapps tomcat:7-jre7</code></pre><h2 id="4-3-Nginx部署"><a href="#4-3-Nginx部署" class="headerlink" title="4.3 Nginx部署"></a>4.3 Nginx部署</h2><p>（1）拉取镜像    </p><pre><code class="shell">docker pull nginx</code></pre><p>（2）创建Nginx容器</p><pre><code class="shell">docker run -di --name=mynginx -p 80:80 nginx</code></pre><h2 id="4-4-Redis部署"><a href="#4-4-Redis部署" class="headerlink" title="4.4 Redis部署"></a>4.4 Redis部署</h2><p>（1）拉取镜像</p><pre><code class="shell">docker pull redis</code></pre><p>（2）创建容器</p><pre><code class="shell">docker run -di --name=myredis -p 6379:6379 redis</code></pre><h1 id="5-迁移与备份"><a href="#5-迁移与备份" class="headerlink" title="5 迁移与备份"></a>5 迁移与备份</h1><h2 id="5-1-容器保存为镜像"><a href="#5-1-容器保存为镜像" class="headerlink" title="5.1 容器保存为镜像"></a>5.1 容器保存为镜像</h2><p>我们可以通过以下命令将容器保存为镜像</p><pre><code class="shell">docker commit mynginx mynginx_i</code></pre><h2 id="5-2-镜像备份"><a href="#5-2-镜像备份" class="headerlink" title="5.2 镜像备份"></a>5.2 镜像备份</h2><p>我们可以通过以下命令将镜像保存为tar 文件</p><pre><code class="shell">docker  save -o mynginx.tar mynginx_i</code></pre><h2 id="5-3-镜像恢复与迁移"><a href="#5-3-镜像恢复与迁移" class="headerlink" title="5.3 镜像恢复与迁移"></a>5.3 镜像恢复与迁移</h2><p>首先我们先删除掉mynginx_img镜像  然后执行此命令进行恢复</p><pre><code class="shell">docker load -i mynginx.tar</code></pre><p>-i 输入的文件</p><p>执行后再次查看镜像，可以看到镜像已经恢复</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;文件来自黑马公开课&lt;/p&gt;
&lt;p&gt;其它参考：&lt;a href=&quot;https://zhang.ge/5126.html&quot;&gt;https://zhang.ge/5126.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-Docker简介&quot;&gt;&lt;a href=&quot;#1-Docker简介&quot; class=&quot;headerlink&quot; title=&quot;1 Docker简介&quot;&gt;&lt;/a&gt;1 Docker简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是虚拟化&quot;&gt;&lt;a href=&quot;#1-1-什么是虚拟化&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是虚拟化&quot;&gt;&lt;/a&gt;1.1 什么是虚拟化&lt;/h2&gt;&lt;p&gt;​    在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。&lt;/p&gt;
&lt;p&gt;​    在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件   对资源充分利用&lt;/p&gt;
&lt;p&gt;​    虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。&lt;/p&gt;</summary>
    
    
    
    <category term="运维" scheme="https://xiaopantongxue816.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="容器" scheme="https://xiaopantongxue816.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>我的电影记录</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/15/%E6%88%91%E7%9A%84%E7%94%B5%E5%BD%B1%E8%AE%B0%E5%BD%95/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/15/%E6%88%91%E7%9A%84%E7%94%B5%E5%BD%B1%E8%AE%B0%E5%BD%95/</id>
    <published>2020-09-15T07:37:16.000Z</published>
    <updated>2020-10-13T08:27:56.262Z</updated>
    
    <content type="html"><![CDATA[<p>​    从大三开始，因为要专注的去学一些东西，和伙伴们在一起容易消磨时间。所以开始了一个人在图书馆，宿舍之间两点一线的生活，大概是那个时候开始喜欢去电影院看电影的，之前也去但是意义不同了，就像是去补充能量一样，每周都要去的，看到喜欢的特别开心，不小心挑到无聊的电影会特别沮丧（毕业最难过的就是享受不到学校那边19.9的白菜价了），给自己每周末留点影子，记录一下(#^.^#)</p><hr><p>从到上海开始算起吧，作为毕业工作的新起点，作为2020年真正的开始</p><hr><a id="more"></a> <h1 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h1><ol><li>★★★★★  2020-08-08 <strong>星际穿越</strong>                         </li><li>★★★☆☆  2020-08-22 **八佰 **                              </li><li>★★★★☆  2020-08-29 <strong>盗梦空间</strong>                        </li><li>★★★☆☆  2020-09-05 <strong>信条</strong>                                </li><li>★★☆☆☆  2020-09-06 **我在时间尽头等你 **         </li><li>★☆☆☆☆  2020-09-12 <strong>花木兰</strong>                             </li><li>★★★★☆  2020-09-19 <strong>蓝色防线</strong>                          </li><li>★★★☆☆  2020-09-26 <strong>夺冠</strong>                                  </li><li>★★★★☆  2020-10-01 <strong>姜子牙</strong>                              </li><li>★★★★★  2020-10-05 <strong>我和我的家乡</strong>                  </li><li>★★★☆☆  2020-10-06 <strong>一点就到家</strong>      </li><li>2020-10-07 <strong>姜子牙</strong>（二刷了！国漫加油！对不起，我那天太困给睡着了┭┮﹏┭┮）</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    从大三开始，因为要专注的去学一些东西，和伙伴们在一起容易消磨时间。所以开始了一个人在图书馆，宿舍之间两点一线的生活，大概是那个时候开始喜欢去电影院看电影的，之前也去但是意义不同了，就像是去补充能量一样，每周都要去的，看到喜欢的特别开心，不小心挑到无聊的电影会特别沮丧（毕业最难过的就是享受不到学校那边19.9的白菜价了），给自己每周末留点影子，记录一下(#^.^#)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;从到上海开始算起吧，作为毕业工作的新起点，作为2020年真正的开始&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="生活" scheme="https://xiaopantongxue816.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="点滴" scheme="https://xiaopantongxue816.github.io/tags/%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>统计linuxCPU内存</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/09/%E7%BB%9F%E8%AE%A1linuxCPU%E5%86%85%E5%AD%98/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/09/%E7%BB%9F%E8%AE%A1linuxCPU%E5%86%85%E5%AD%98/</id>
    <published>2020-09-09T02:30:41.000Z</published>
    <updated>2020-10-13T03:11:33.800Z</updated>
    
    <content type="html"><![CDATA[<p>cpu网址：<a href="http://10.3.144.16:8080/BG2050/web/ZT01">http://10.3.144.16:8080/BG2050/web/ZT01</a></p><p>数据库磁盘网址：<a href="http://10.3.144.16:8080/BG2050/web/ZT02">http://10.3.144.16:8080/BG2050/web/ZT02</a></p><h1 id="snmpwalk命令（测试系统信息）"><a href="#snmpwalk命令（测试系统信息）" class="headerlink" title="snmpwalk命令（测试系统信息）"></a>snmpwalk命令（测试系统信息）</h1><p>常用的方法 <a href="http://blog.sina.com.cn/s/blog_54151ca60102zi48.html">OID列表</a></p><pre><code class="bash">snmpwalk -v 2c -c public 160.*.*.* .1.3.6.1.4.1.2021.9.1.6   获取磁盘总量其中-v是指版本,-c 是指密钥。snmpwalk功能很多,可以获取系统各种信息,只要更改后面的信息类型即可。如果不知道什么类型,也可以不指定,这样所有系统信息都获取到:snmpwalk -v 2c -c public 160.*.*.*</code></pre><h1 id="snmp协议（调用python）"><a href="#snmp协议（调用python）" class="headerlink" title="snmp协议（调用python）"></a>snmp协议（调用python）</h1><p><strong>结果输出：</strong></p><pre><code class="bash">[root@localhost cpu_test]# python3 cpu_SNMP.py ==========192.168.220.10==========系统信息Linux localhost.localdomain 3.10.0-1127.el7.x86_64 #1 SMP Tue Mar 31 23:36:51 UTC 2020 x86_64系统负载load(5min):  0.12 ,load(10min):  0.04 ,load(15min):  0.05网卡流量lo : RX: 19524.91 KB       TX: 19524.91 KB ens33 : RX: 61088.05 KB       TX: 6388.18 KB 内存使用率Mem_Used = 86.92%            Swap_Used = 13.54%         run time: 0.23 s[root@localhost cpu_test]# </code></pre><p>安装参考：</p><p><a href="https://www.linuxprobe.com/snmp-update.html">https://www.linuxprobe.com/snmp-update.html</a> </p><p><a href="https://www.cnblogs.com/yujianadu/p/10395285.html">https://www.cnblogs.com/yujianadu/p/10395285.html</a></p><p>配置参考：</p><p><a href="https://jingyan.baidu.com/article/066074d64b303ac3c21cb0ef.html">https://jingyan.baidu.com/article/066074d64b303ac3c21cb0ef.html</a></p><p>网上原始参考代码：<a href="https://blog.csdn.net/yannanxiu/article/details/55045108?utm_source=blogxgwz0&amp;utm_medium=distribute.pc_relevant.none-task-blog-title-3&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/yannanxiu/article/details/55045108?utm_source=blogxgwz0&amp;utm_medium=distribute.pc_relevant.none-task-blog-title-3&amp;spm=1001.2101.3001.4242</a></p><h2 id="安装-snmp（CentOS7）"><a href="#安装-snmp（CentOS7）" class="headerlink" title="安装 snmp（CentOS7）"></a><strong>安装 snmp（CentOS7）</strong></h2><p>查看一下Linux主机有没有安装了snmp服务</p><pre><code>rpm -qa |grep snmp</code></pre><p>如果安装了会出现下边一些东西：</p><pre><code class="ssh">net-snmp-5.5-49.el6.i686net-snmp-libs-5.5-49.el6.i686php-snmp-5.3.3-27.el6_5.i686</code></pre><p>如果没有就执行命令安装：</p><pre><code class="ssh">yum install -y net-snmpyum install -y net-snmp-develyum install -y net-snmp-libsyum install -y net-snmp-perlyum install -y net-snmp-utilsyum install -y mrtg</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a><strong>启动</strong></h3><p>再次查看一下Linux主机有没有安装了snmp服务，确保安装成功后启动</p><pre><code class="ssh">service snmpd start </code></pre><p>这个时候也许会报错：</p><pre><code class="ssh">Redirecting to /bin/systemctl start snmpd.service</code></pre><p>上网查了一下说是使用的是Centos7或者 Fedora高版本，启用服务变化了</p><pre><code class="ssh">cd /binsystemctl start snmpd.service</code></pre><p>查看状态</p><pre><code class="ssh"># running了service snmpd status</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h3><p>（yum安装snmpd的配置文件为<code>/etc/snmp/snmpd.conf </code>备份一份<code>snmpd.conf.bak</code>，配置后要<strong>重启snmp服务</strong>）</p><pre><code class="ssh">cp /etc/snmp/snmpd.conf /etc/snmp/snmpd.conf.bakvim /etc/snmp/snmpd.conf</code></pre><pre><code class="ssh">1、配置snmp团体名（默认是public）: com2sec notConfigUser default public 建议更改public为您使用的团体名称2、将access notConfigGroup &quot;&quot; any noauth exact systemview none none更改为access notConfigGroup &quot;&quot; any noauth exact all none none3、将如下两行前面的注释去掉## incl/excl subtree maskview all included .1 80## -or just the mib2 tree-view mib2 included .iso.org.dod.internet.mgmt.mib-2 fc4、将下面一行前面的注释去掉#access notConfigGroup &quot;&quot; any noauth exact roview rwview noneaccess notConfigGroup &quot;&quot; any noath exact mib2 none none</code></pre><p>如果出现<code>No Such Instance currently exists at this OID</code>的问题，大概率是配置文件取消注释不够</p><h3 id="snmpd-conf"><a href="#snmpd-conf" class="headerlink" title="snmpd.conf"></a><strong>snmpd.conf</strong></h3><pre><code class="bash">################################################################################# snmpd.conf:#   An example configuration file for configuring the ucd-snmp snmpd agent.################################################################################## This file is intended to only be as a starting point.  Many more# configuration directives exist than are mentioned in this file.  For # full details, see the snmpd.conf(5) manual page.## All lines beginning with a &#39;#&#39; are comments and are intended for you# to read.  All other lines are configuration commands for the agent.################################################################################ Access Control################################################################################ As shipped, the snmpd demon will only respond to queries on the# system mib group until this file is replaced or modified for# security purposes.  Examples are shown below about how to increase the# level of access.# By far, the most common question I get about the agent is &quot;why won&#39;t# it work?&quot;, when really it should be &quot;how do I configure the agent to# allow me to access it?&quot;## By default, the agent responds to the &quot;public&quot; community for read# only access, if run out of the box without any configuration file in # place.  The following examples show you other ways of configuring# the agent so that you can change the community names, and give# yourself write access to the mib tree as well.## For more information, read the FAQ as well as the snmpd.conf(5)# manual page.##### First, map the community name &quot;public&quot; into a &quot;security name&quot;#       sec.name  source          communitycom2sec notConfigUser  default       public##### Second, map the security name into a group name:#       groupName      securityModel securityNamegroup   notConfigGroup v1           notConfigUsergroup   notConfigGroup v2c           notConfigUser##### Third, create a view for us to let the group have rights to:# Make at least  snmpwalk -v 1 localhost -c public system fast again.#       name           incl/excl     subtree         mask(optional)#view    systemview    included   .1view    systemview    included   .1.3.6.1.2.1.1view    systemview    included   .1.3.6.1.2.1.25.1.1##### Finally, grant the group read-only access to the systemview view.#       group          context sec.model sec.level prefix read   write  notifaccess  notConfigGroup &quot;&quot;      any       noauth    exact  all    none   none# -----------------------------------------------------------------------------# Here is a commented out example configuration that allows less# restrictive access.# YOU SHOULD CHANGE THE &quot;COMMUNITY&quot; TOKEN BELOW TO A NEW KEYWORD ONLY# KNOWN AT YOUR SITE.  YOU *MUST* CHANGE THE NETWORK TOKEN BELOW TO# SOMETHING REFLECTING YOUR LOCAL NETWORK ADDRESS SPACE.##       sec.name  source          community#com2sec local     localhost       COMMUNITY#com2sec mynetwork NETWORK/24      COMMUNITY##     group.name sec.model  sec.name#group MyRWGroup  any        local#group MyROGroup  any        mynetwork##group MyRWGroup  any        otherv3user#...           incl/excl subtree                          maskview all    included  .1                               80 -or just the mib2 tree-view mib2   included  .iso.org.dod.internet.mgmt.mib-2 fc##                context sec.model sec.level prefix read   write  notif#access MyROGroup &quot;&quot;      any       noauth    0      all    none   none#access MyRWGroup &quot;&quot;      any       noauth    0      all    all    all################################################################################ Sample configuration to make net-snmpd RFC 1213.# Unfortunately v1 and v2c don&#39;t allow any user based authentification, so# opening up the default config is not an option from a security point.## WARNING: If you uncomment the following lines you allow write access to your# snmpd daemon from any source! To avoid this use different names for your# community or split out the write access to a different community and # restrict it to your local network.# Also remember to comment the syslocation and syscontact parameters later as# otherwise they are still read only (see FAQ for net-snmp).## First, map the community name &quot;public&quot; into a &quot;security name&quot;#       sec.name        source          community#com2sec notConfigUser   default         public# Second, map the security name into a group name:#       groupName       securityModel   securityName#group   notConfigGroup  v1              notConfigUser#group   notConfigGroup  v2c             notConfigUser# Third, create a view for us to let the group have rights to:# Open up the whole tree for ro, make the RFC 1213 required ones rw.#       name            incl/excl       subtree mask(optional)#view    roview          included        .1#view    rwview          included        system.sysContact#view    rwview          included        system.sysName#view    rwview          included        system.sysLocation#view    rwview          included        interfaces.ifTable.ifEntry.ifAdminStatus#view    rwview          included        at.atTable.atEntry.atPhysAddress#view    rwview          included        at.atTable.atEntry.atNetAddress#view    rwview          included        ip.ipForwarding#view    rwview          included        ip.ipDefaultTTL#view    rwview          included        ip.ipRouteTable.ipRouteEntry.ipRouteDest#view    rwview          included        ip.ipRouteTable.ipRouteEntry.ipRouteIfIndex#view    rwview          included        ip.ipRouteTable.ipRouteEntry.ipRouteMetric1#view    rwview          included        ip.ipRouteTable.ipRouteEntry.ipRouteMetric2#view    rwview          included        ip.ipRouteTable.ipRouteEntry.ipRouteMetric3#view    rwview          included        ip.ipRouteTable.ipRouteEntry.ipRouteMetric4#view    rwview          included        ip.ipRouteTable.ipRouteEntry.ipRouteType#view    rwview          included        ip.ipRouteTable.ipRouteEntry.ipRouteAge#view    rwview          included        ip.ipRouteTable.ipRouteEntry.ipRouteMask#view    rwview          included        ip.ipRouteTable.ipRouteEntry.ipRouteMetric5#view    rwview          included        ip.ipNetToMediaTable.ipNetToMediaEntry.ipNetToMediaIfIndex#view    rwview          included        ip.ipNetToMediaTable.ipNetToMediaEntry.ipNetToMediaPhysAddress#view    rwview          included        ip.ipNetToMediaTable.ipNetToMediaEntry.ipNetToMediaNetAddress#view    rwview          included        ip.ipNetToMediaTable.ipNetToMediaEntry.ipNetToMediaType#view    rwview          included        tcp.tcpConnTable.tcpConnEntry.tcpConnState#view    rwview          included        egp.egpNeighTable.egpNeighEntry.egpNeighEventTrigger#view    rwview          included        snmp.snmpEnableAuthenTraps# Finally, grant the group read-only access to the systemview view.#       group          context sec.model sec.level prefix read   write  notifaccess notConfigGroup &quot;&quot; any noauth exact roview rwview noneaccess notConfigGroup &quot;&quot; any noauth exact mib2 none none################################################################################ System contact information## It is also possible to set the sysContact and sysLocation system# variables through the snmpd.conf file:syslocation Unknown (edit /etc/snmp/snmpd.conf)syscontact Root &lt;root@localhost&gt; (configure /etc/snmp/snmp.local.conf)# Example output of snmpwalk:#   % snmpwalk -v 1 localhost -c public system#   system.sysDescr.0 = &quot;SunOS name sun4c&quot;#   system.sysObjectID.0 = OID: enterprises.ucdavis.ucdSnmpAgent.sunos4#   system.sysUpTime.0 = Timeticks: (595637548) 68 days, 22:32:55#   system.sysContact.0 = &quot;Me &lt;me@somewhere.org&gt;&quot;#   system.sysName.0 = &quot;name&quot;#   system.sysLocation.0 = &quot;Right here, right now.&quot;#   system.sysServices.0 = 72################################################################################ Logging## We do not want annoying &quot;Connection from UDP: &quot; messages in syslog.# If the following option is commented out, snmpd will print each incoming# connection, which can be useful for debugging.dontLogTCPWrappersConnects yes# -----------------------------------------------------------------------------################################################################################ Process checks.##  The following are examples of how to use the agent to check for#  processes running on the host.  The syntax looks something like:##  proc NAME [MAX=0] [MIN=0]##  NAME:  the name of the process to check for.  It must match#         exactly (ie, http will not find httpd processes).#  MAX:   the maximum number allowed to be running.  Defaults to 0.#  MIN:   the minimum number to be running.  Defaults to 0.##  Examples (commented out by default):##  Make sure mountd is runningproc mountd#  Make sure there are no more than 4 ntalkds running, but 0 is ok too.proc ntalkd 4#  Make sure at least one sendmail, but less than or equal to 10 are running.proc sendmail 10 1#  A snmpwalk of the process mib tree would look something like this:# # % snmpwalk -v 1 localhost -c public .1.3.6.1.4.1.2021.2 enterprises.ucdavis.procTable.prEntry.prIndex.1 = 1 enterprises.ucdavis.procTable.prEntry.prIndex.2 = 2 enterprises.ucdavis.procTable.prEntry.prIndex.3 = 3 enterprises.ucdavis.procTable.prEntry.prNames.1 = &quot;mountd&quot; enterprises.ucdavis.procTable.prEntry.prNames.2 = &quot;ntalkd&quot; enterprises.ucdavis.procTable.prEntry.prNames.3 = &quot;sendmail&quot; enterprises.ucdavis.procTable.prEntry.prMin.1 = 0 enterprises.ucdavis.procTable.prEntry.prMin.2 = 0 enterprises.ucdavis.procTable.prEntry.prMin.3 = 1 enterprises.ucdavis.procTable.prEntry.prMax.1 = 0 enterprises.ucdavis.procTable.prEntry.prMax.2 = 4 enterprises.ucdavis.procTable.prEntry.prMax.3 = 10 enterprises.ucdavis.procTable.prEntry.prCount.1 = 0 enterprises.ucdavis.procTable.prEntry.prCount.2 = 0 enterprises.ucdavis.procTable.prEntry.prCount.3 = 1 enterprises.ucdavis.procTable.prEntry.prErrorFlag.1 = 1 enterprises.ucdavis.procTable.prEntry.prErrorFlag.2 = 0 enterprises.ucdavis.procTable.prEntry.prErrorFlag.3 = 0 enterprises.ucdavis.procTable.prEntry.prErrMessage.1 = &quot;No mountd process running.&quot; enterprises.ucdavis.procTable.prEntry.prErrMessage.2 = &quot;&quot; enterprises.ucdavis.procTable.prEntry.prErrMessage.3 = &quot;&quot; enterprises.ucdavis.procTable.prEntry.prErrFix.1 = 0 enterprises.ucdavis.procTable.prEntry.prErrFix.2 = 0 enterprises.ucdavis.procTable.prEntry.prErrFix.3 = 0##  Note that the errorFlag for mountd is set to 1 because one is not#  running (in this case an rpc.mountd is, but thats not good enough),#  and the ErrMessage tells you what&#39;s wrong.  The configuration#  imposed in the snmpd.conf file is also shown.  # #  Special Case:  When the min and max numbers are both 0, it assumes#  you want a max of infinity and a min of 1.## -----------------------------------------------------------------------------################################################################################ Executables/scripts###  You can also have programs run by the agent that return a single#  line of output and an exit code.  Here are two examples.##  exec NAME PROGRAM [ARGS ...]##  NAME:     A generic name. The name must be unique for each exec statement.#  PROGRAM:  The program to run.  Include the path!#  ARGS:     optional arguments to be passed to the program# a simple hello worldexec echotest /bin/echo hello world# Run a shell script containing:## #!/bin/sh# echo hello world# echo hi there# exit 35## Note:  this has been specifically commented out to prevent# accidental security holes due to someone else on your system writing# a /tmp/shtest before you do.  Uncomment to use it.##exec shelltest /bin/sh /tmp/shtest# Then, # % snmpwalk -v 1 localhost -c public .1.3.6.1.4.1.2021.8# enterprises.ucdavis.extTable.extEntry.extIndex.1 = 1# enterprises.ucdavis.extTable.extEntry.extIndex.2 = 2# enterprises.ucdavis.extTable.extEntry.extNames.1 = &quot;echotest&quot;# enterprises.ucdavis.extTable.extEntry.extNames.2 = &quot;shelltest&quot;# enterprises.ucdavis.extTable.extEntry.extCommand.1 = &quot;/bin/echo hello world&quot;# enterprises.ucdavis.extTable.extEntry.extCommand.2 = &quot;/bin/sh /tmp/shtest&quot;# enterprises.ucdavis.extTable.extEntry.extResult.1 = 0# enterprises.ucdavis.extTable.extEntry.extResult.2 = 35# enterprises.ucdavis.extTable.extEntry.extOutput.1 = &quot;hello world.&quot;# enterprises.ucdavis.extTable.extEntry.extOutput.2 = &quot;hello world.&quot;# enterprises.ucdavis.extTable.extEntry.extErrFix.1 = 0# enterprises.ucdavis.extTable.extEntry.extErrFix.2 = 0# Note that the second line of the /tmp/shtest shell script is cut# off.  Also note that the exit status of 35 was returned.# -----------------------------------------------------------------------------################################################################################ disk checks## The agent can check the amount of available disk space, and make# sure it is above a set limit.  # disk PATH [MIN=100000]## PATH:  mount path to the disk in question.# MIN:   Disks with space below this value will have the Mib&#39;s errorFlag set.#        Default value = 100000.# Check the / partition and make sure it contains at least 10 megs.disk / 10000# % snmpwalk -v 1 localhost -c public .1.3.6.1.4.1.2021.9# enterprises.ucdavis.diskTable.dskEntry.diskIndex.1 = 0# enterprises.ucdavis.diskTable.dskEntry.diskPath.1 = &quot;/&quot; Hex: 2F # enterprises.ucdavis.diskTable.dskEntry.diskDevice.1 = &quot;/dev/dsk/c201d6s0&quot;# enterprises.ucdavis.diskTable.dskEntry.diskMinimum.1 = 10000# enterprises.ucdavis.diskTable.dskEntry.diskTotal.1 = 837130# enterprises.ucdavis.diskTable.dskEntry.diskAvail.1 = 316325# enterprises.ucdavis.diskTable.dskEntry.diskUsed.1 = 437092# enterprises.ucdavis.diskTable.dskEntry.diskPercent.1 = 58# enterprises.ucdavis.diskTable.dskEntry.diskErrorFlag.1 = 0# enterprises.ucdavis.diskTable.dskEntry.diskErrorMsg.1 = &quot;&quot;# -----------------------------------------------------------------------------################################################################################ load average checks# load [1MAX=12.0] [5MAX=12.0] [15MAX=12.0]## 1MAX:   If the 1 minute load average is above this limit at query#         time, the errorFlag will be set.# 5MAX:   Similar, but for 5 min average.# 15MAX:  Similar, but for 15 min average.# Check for loads:load 12 14 14# % snmpwalk -v 1 localhost -c public .1.3.6.1.4.1.2021.10 enterprises.ucdavis.loadTable.laEntry.loadaveIndex.1 = 1 enterprises.ucdavis.loadTable.laEntry.loadaveIndex.2 = 2 enterprises.ucdavis.loadTable.laEntry.loadaveIndex.3 = 3 enterprises.ucdavis.loadTable.laEntry.loadaveNames.1 = &quot;Load-1&quot; enterprises.ucdavis.loadTable.laEntry.loadaveNames.2 = &quot;Load-5&quot; enterprises.ucdavis.loadTable.laEntry.loadaveNames.3 = &quot;Load-15&quot; enterprises.ucdavis.loadTable.laEntry.loadaveLoad.1 = &quot;0.49&quot; Hex: 30 2E 34 39  enterprises.ucdavis.loadTable.laEntry.loadaveLoad.2 = &quot;0.31&quot; Hex: 30 2E 33 31  enterprises.ucdavis.loadTable.laEntry.loadaveLoad.3 = &quot;0.26&quot; Hex: 30 2E 32 36  enterprises.ucdavis.loadTable.laEntry.loadaveConfig.1 = &quot;12.00&quot; enterprises.ucdavis.loadTable.laEntry.loadaveConfig.2 = &quot;14.00&quot; enterprises.ucdavis.loadTable.laEntry.loadaveConfig.3 = &quot;14.00&quot; enterprises.ucdavis.loadTable.laEntry.loadaveErrorFlag.1 = 0 enterprises.ucdavis.loadTable.laEntry.loadaveErrorFlag.2 = 0 enterprises.ucdavis.loadTable.laEntry.loadaveErrorFlag.3 = 0 enterprises.ucdavis.loadTable.laEntry.loadaveErrMessage.1 = &quot;&quot; enterprises.ucdavis.loadTable.laEntry.loadaveErrMessage.2 = &quot;&quot; enterprises.ucdavis.loadTable.laEntry.loadaveErrMessage.3 = &quot;&quot;# -----------------------------------------------------------------------------################################################################################ Extensible sections.# # This alleviates the multiple line output problem found in the# previous executable mib by placing each mib in its own mib table:# Run a shell script containing:## #!/bin/sh# echo hello world# echo hi there# exit 35## Note:  this has been specifically commented out to prevent# accidental security holes due to someone else on your system writing# a /tmp/shtest before you do.  Uncomment to use it.## exec .1.3.6.1.4.1.2021.50 shelltest /bin/sh /tmp/shtest# % snmpwalk -v 1 localhost -c public .1.3.6.1.4.1.2021.50# enterprises.ucdavis.50.1.1 = 1# enterprises.ucdavis.50.2.1 = &quot;shelltest&quot;# enterprises.ucdavis.50.3.1 = &quot;/bin/sh /tmp/shtest&quot;# enterprises.ucdavis.50.100.1 = 35# enterprises.ucdavis.50.101.1 = &quot;hello world.&quot;# enterprises.ucdavis.50.101.2 = &quot;hi there.&quot;# enterprises.ucdavis.50.102.1 = 0# Now the Output has grown to two lines, and we can see the &#39;hi# there.&#39; output as the second line from our shell script.## Note that you must alter the mib.txt file to be correct if you want# the .50.* outputs above to change to reasonable text descriptions.# Other ideas:# # exec .1.3.6.1.4.1.2021.51 ps /bin/ps # exec .1.3.6.1.4.1.2021.52 top /usr/local/bin/top# exec .1.3.6.1.4.1.2021.53 mailq /usr/bin/mailq# -----------------------------------------------------------------------------################################################################################ Pass through control.# # Usage:#   pass MIBOID EXEC-COMMAND## This will pass total control of the mib underneath the MIBOID# portion of the mib to the EXEC-COMMAND.  ## Note:  You&#39;ll have to change the path of the passtest script to your# source directory or install it in the given location.# # Example:  (see the script for details)#           (commented out here since it requires that you place the#           script in the right location. (its not installed by default))# pass .1.3.6.1.4.1.2021.255 /bin/sh /usr/local/local/passtest# % snmpwalk -v 1 localhost -c public .1.3.6.1.4.1.2021.255# enterprises.ucdavis.255.1 = &quot;life the universe and everything&quot;# enterprises.ucdavis.255.2.1 = 42# enterprises.ucdavis.255.2.2 = OID: 42.42.42# enterprises.ucdavis.255.3 = Timeticks: (363136200) 42 days, 0:42:42# enterprises.ucdavis.255.4 = IpAddress: 127.0.0.1# enterprises.ucdavis.255.5 = 42# enterprises.ucdavis.255.6 = Gauge: 42## % snmpget -v 1 localhost public .1.3.6.1.4.1.2021.255.5# enterprises.ucdavis.255.5 = 42## % snmpset -v 1 localhost public .1.3.6.1.4.1.2021.255.1 s &quot;New string&quot;# enterprises.ucdavis.255.1 = &quot;New string&quot;## For specific usage information, see the man/snmpd.conf.5 manual page# as well as the local/passtest script used in the above example.################################################################################ Further Information##  See the snmpd.conf manual page, and the output of &quot;snmpd -H&quot;.</code></pre><h2 id="重启snmpd服务"><a href="#重启snmpd服务" class="headerlink" title="重启snmpd服务"></a><strong>重启snmpd服务</strong></h2><p>拷贝配置文件</p><pre><code class="bash">cp -r /etc/snmp root@160.0.3.100:/etc          #从本地向远程发送snmp目录scp  -r root@160.0.3.5:/etc/snmp /etc         #从远程向本地发送snmp目录</code></pre><p>重启</p><pre><code class="ssh">[root@localhost ~]# cd /bin[root@localhost bin]# systemctl restart snmpd.service</code></pre><p><strong>把服务加到开机启动中，开机自动运行</strong></p><pre><code class="ssh">[root@localhost bin]# chkconfig snmpd on </code></pre><p><strong>查看是否已经成功启动：</strong></p><pre><code class="ssh">[root@localhost bin]# netstat -ln | grep 161udp        0      0 0.0.0.0:161             0.0.0.0:*   </code></pre><pre><code class="ssh">[root@localhost ~]# snmpwalk -v 2c -c public 192.168.220.10 1.3.6.1.2.1.1.1Timeout: No Response from 192.168.220.10[root@localhost ~]# snmpwalk -v 2c -c pjy 192.168.220.10 1.3.6.1.2.1.1.1      SNMPv2-MIB::sysDescr.0 = STRING: Linux localhost.localdomain 3.10.0-1127.el7.x86_64 #1 SMP Tue Mar 31 23:36:51 UTC 2020 x86_64</code></pre><h2 id="python代码（1-0版本）"><a href="#python代码（1-0版本）" class="headerlink" title="python代码（1.0版本）"></a><strong>python代码（1.0版本）</strong></h2><pre><code class="python"># coding=utf-8&quot;&quot;&quot;filename:snmp_test.py说明：使用系统的 snmpwalk 来查询设备信息，需要先安装 snmp代码 Windows 和 Linux 通用Windows cmd 调用示例：snmpwalk -v 2c -c public 127.0.0.1 1.3.6.1.2.1.1.1Windows cmd 下查看某主机（192.168.132.130）信息示例：snmpwalk -v 2c -c public 192.168.132.130 1.3.6.1.2.1.1.1&quot;&quot;&quot;import reimport osimport timeimport platformif &#39;Windows&#39; == platform.system():    hosts = [&#39;192.168.132.130&#39;]else:    # 在虚拟机运行时则查看本地    hosts = [&#39;127.0.0.1&#39;]def snmpWalk(host, oid):    result = os.popen(&#39;snmpwalk -v 2c -c public &#39; + host + &#39; &#39; + oid).read().split(&#39;\n&#39;)[:-1]    return result# ------------------------------------------------------------# 获取负载信息# ------------------------------------------------------------def getSystem(host):    system = &#39;:&#39;.join(snmpWalk(host, &#39;system&#39;)[0].split(&#39;:&#39;)[3:]).strip()    return system# ------------------------------------------------------------# ------------------------------------------------------------# 获取负载信息# ------------------------------------------------------------def getLoad(host, loid):    &quot;&quot;&quot;系统负载&quot;&quot;&quot;    load_oids = &#39;1.3.6.1.4.1.2021.10.1.3.&#39; + str(loid)    return snmpWalk(host, load_oids)[0].split(&#39;:&#39;)[3]def getLoads(host):    load1 = getLoad(host, 1)    load10 = getLoad(host, 2)    load15 = getLoad(host, 3)    return load1, load10, load15# ------------------------------------------------------------# ------------------------------------------------------------# 获取网卡流量# ------------------------------------------------------------def getNetworkDevices(host):    &quot;&quot;&quot;获取网络设备信息&quot;&quot;&quot;    device_mib = snmpWalk(host, &#39;RFC1213-MIB::ifDescr&#39;)    device_list = []    for item in device_mib:        device_list.append(item.split(&#39;:&#39;)[3].strip())    return device_listdef getNetworkData(host, oid):    &quot;&quot;&quot;获取网络流量&quot;&quot;&quot;    data_mib = snmpWalk(host, oid)    data = []    for item in data_mib:        byte = float(item.split(&#39;:&#39;)[3].strip())        data.append(str(round(byte / 1024, 2)) + &#39; KB&#39;)    return datadef getNetworkInfo(host):    device_list = getNetworkDevices(host)    # 流入流量    inside = getNetworkData(host, &#39;IF-MIB::ifInOctets&#39;)    # 流出流量    outside = getNetworkData(host, &#39;IF-MIB::ifOutOctets&#39;)    return device_list, inside, outside# ------------------------------------------------------------# ------------------------------------------------------------# 内存使用率# ------------------------------------------------------------def getSwapTotal(host):    swap_total = snmpWalk(host, &#39;UCD-SNMP-MIB::memTotalSwap.0&#39;)[0].split(&#39; &#39;)[3]    return swap_totaldef getSwapUsed(host):    swap_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::memAvailSwap.0&#39;)[0].split(&#39; &#39;)[3]    swap_total = getSwapTotal(host)    swap_used = str(round(((float(swap_total) - float(swap_avail)) / float(swap_total)) * 100, 2)) + &#39;%&#39;    return swap_useddef getMemTotal(host):    mem_total = snmpWalk(host, &#39;UCD-SNMP-MIB::memTotalReal.0&#39;)[0].split(&#39; &#39;)[3]    return mem_totaldef getMemUsed(host):    mem_total = getMemTotal(host)    mem_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::memAvailReal.0&#39;)[0].split(&#39; &#39;)[3]    mem_used = str(round(((float(mem_total) - float(mem_avail)) / float(mem_total)) * 100, 2)) + &#39;%&#39;    return mem_useddef getMemInfo(host):    mem_used = getMemUsed(host)    swap_used = getSwapUsed(host)    return mem_used, swap_used# ------------------------------------------------------------def main():    for host in hosts:        print(&#39;=&#39; * 10 + host + &#39;=&#39; * 10)        start = time.time()        print(&quot;系统信息&quot;)        system = getSystem(host)        print(system)        print(&quot;系统负载&quot;)        load1, load10, load15 = getLoads(host)        print(&#39;load(5min): %s ,load(10min): %s ,load(15min): %s&#39; % (load1, load10, load15))        print(&quot;网卡流量&quot;)        device_list, inside, outside = getNetworkInfo(host)        for i, item in enumerate(device_list):            print(&#39;%s : RX: %-15s   TX: %s &#39; % (device_list[i], inside[i], outside[i]))        mem_used, swap_used = getMemInfo(host)        print(&quot;内存使用率&quot;)        print(&#39;Mem_Used = %-15s   Swap_Used = %-15s&#39; % (mem_used, swap_used))        end = time.time()        print(&#39;run time:&#39;, round(end - start, 2), &#39;s&#39;)if __name__ == &#39;__main__&#39;:    main()</code></pre><h2 id="保存到redis中（更新）"><a href="#保存到redis中（更新）" class="headerlink" title="保存到redis中（更新）"></a>保存到redis中（更新）</h2><p>安装参考原文：</p><p><a href="https://blog.csdn.net/wwd0501/article/details/80735111?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">https://blog.csdn.net/wwd0501/article/details/80735111?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a></p><p>下载redis库：<a href="https://github.com/andymccurdy/redis-py">https://github.com/andymccurdy/redis-py</a> </p><p>上传到/root目录下解压还会得到一个redis-py-master文件夹</p><pre><code class="ssh">unzip redis-py-master.zip -d ./cd redis-py-mastersudo python setup.py install </code></pre><p>测试：</p><pre><code>python3&gt;&gt;&gt;import redis&gt;&gt;&gt;</code></pre><p><strong>注意如果得不到某一台机子的response需要启动或重启snmpd服务</strong></p><p><strong>python代码</strong>（转化为json格式string存储）</p><pre><code class="python"># coding=utf-8&quot;&quot;&quot;filename:snmp_test.py说明：使用系统的 snmpwalk 来查询设备信息，需要先安装 snmp代码 Windows 和 Linux 通用Windows cmd 调用示例：snmpwalk -v 2c -c public 127.0.0.1 1.3.6.1.2.1.1.1Windows cmd 下查看某主机（192.168.132.130）信息示例：snmpwalk -v 2c -c public 192.168.132.130 1.3.6.1.2.1.1.1&quot;&quot;&quot;import reimport osimport timeimport platformimport redis   # 导入redis模块，通过python操作redis 也可以直接在redis主机的服务端操作缓存数据库import jsonif &#39;Linux&#39; == platform.system():    hosts = [&#39;160.0.3.1&#39;,&#39;160.0.3.5&#39;]else:    # 在虚拟机运行时则查看本地    hosts = [&#39;160.0.3.1&#39;,&#39;160.0.3.5&#39;]def snmpWalk(host, oid):    result = os.popen(&#39;snmpwalk -v 2c -c public &#39; + host + &#39; &#39; + oid).read().split(&#39;\n&#39;)[:-1]    return result# ------------------------------------------------------------# 获取负载信息# ------------------------------------------------------------def getSystem(host):    system = &#39;:&#39;.join(snmpWalk(host, &#39;system&#39;)[0].split(&#39;:&#39;)[3:]).strip()    return system# ------------------------------------------------------------# ------------------------------------------------------------# 获取负载信息# ------------------------------------------------------------def getLoad(host, loid):    &quot;&quot;&quot;系统负载&quot;&quot;&quot;    load_oids = &#39;1.3.6.1.4.1.2021.10.1.3.&#39; + str(loid)    return snmpWalk(host, load_oids)[0].split(&#39;:&#39;)[3]def getLoads(host):    load1 = getLoad(host, 1)    load10 = getLoad(host, 2)    load15 = getLoad(host, 3)    return load1, load10, load15# ------------------------------------------------------------# ------------------------------------------------------------# 获取网卡流量# ------------------------------------------------------------def getNetworkDevices(host):    &quot;&quot;&quot;获取网络设备信息&quot;&quot;&quot;    device_mib = snmpWalk(host, &#39;RFC1213-MIB::ifDescr&#39;)    device_list = []    for item in device_mib:        device_list.append(item.split(&#39;:&#39;)[3].strip())    return device_listdef getNetworkData(host, oid):    &quot;&quot;&quot;获取网络流量&quot;&quot;&quot;    data_mib = snmpWalk(host, oid)    data = []    for item in data_mib:        byte = float(item.split(&#39;:&#39;)[3].strip())        data.append(str(round(byte / 1024, 2)) + &#39; KB&#39;)    return datadef getNetworkInfo(host):    device_list = getNetworkDevices(host)    # 流入流量    inside = getNetworkData(host, &#39;IF-MIB::ifInOctets&#39;)    # 流出流量    outside = getNetworkData(host, &#39;IF-MIB::ifOutOctets&#39;)    return device_list, inside, outside# ------------------------------------------------------------# ------------------------------------------------------------# 内存使用率# ------------------------------------------------------------def getSwapTotal(host):    swap_total = snmpWalk(host, &#39;UCD-SNMP-MIB::memTotalSwap.0&#39;)[0].split(&#39; &#39;)[3]    return swap_totaldef getSwapUsed(host):    swap_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::memAvailSwap.0&#39;)[0].split(&#39; &#39;)[3]    swap_total = getSwapTotal(host)    swap_used = str(round(((float(swap_total) - float(swap_avail)) / float(swap_total)) * 100, 2)) + &#39;%&#39;    return swap_useddef getMemTotal(host):    mem_total = snmpWalk(host, &#39;UCD-SNMP-MIB::memTotalReal.0&#39;)[0].split(&#39; &#39;)[3]    return mem_totaldef getMemUsed(host):    mem_total = getMemTotal(host)    mem_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::memAvailReal.0&#39;)[0].split(&#39; &#39;)[3]    mem_used = str(round(((float(mem_total) - float(mem_avail)) / float(mem_total)) * 100, 2)) + &#39;%&#39;    return mem_useddef getMemInfo(host):    mem_used = getMemUsed(host)    swap_used = getSwapUsed(host)    return mem_used, swap_useddef getRedis():    pool = redis.ConnectionPool(host=&#39;160.0.3.5&#39;,password=&#39;12345&#39;, port=6379, decode_responses=True)   # host是redis主机，需要redis服务端和客户端都起着 redis默认端口是6379    return redis.Redis(connection_pool=pool)# ------------------------------------------------------------def main():    r=getRedis()    cupData = &amp;#123;&amp;#125;    for host in hosts:        print(&#39;=&#39; * 10 + host + &#39;=&#39; * 10)        start = time.time()        print(&quot;系统信息&quot;)        system = getSystem(host)        print(system)        #r.hset(host, &quot;system&quot;, system)        print(&quot;系统负载&quot;)        load1, load10, load15 = getLoads(host)        print(&#39;load(5min): %s ,load(10min): %s ,load(15min): %s&#39; % (load1, load10, load15))        load = [ &amp;#123; &#39;load1&#39; : load1, &#39;load10&#39; : load10, &#39;load15&#39; : load15 &amp;#125; ]        print(&quot;网卡流量&quot;)        device_dict = &amp;#123;&amp;#125;        device_list, inside, outside = getNetworkInfo(host)        for i, item in enumerate(device_list):            print(&#39;%s : RX: %-15s   TX: %s &#39; % (device_list[i], inside[i], outside[i]))            temp = [ &amp;#123; &#39;RX&#39; : inside[i], &#39;TX&#39; : outside[i] &amp;#125; ]            device_dict[device_list[i]] = temp # 添加        print(device_dict)        mem_used, swap_used = getMemInfo(host)        print(&quot;内存使用率&quot;)        print(&#39;Mem_Used = %-15s   Swap_Used = %-15s&#39; % (mem_used, swap_used))        Used = [ &amp;#123; &#39;Mem_Used&#39; : mem_used, &#39;Swap_Used&#39; : swap_used &amp;#125; ]        end = time.time()        print(&#39;run time:&#39;, round(end - start, 2), &#39;s&#39;)        runT = [ &amp;#123; &#39;run time&#39; : round(end - start, 2) &amp;#125; ]        data = [ &amp;#123; &#39;系统信息&#39; : system, &#39;系统负载&#39; : load, &#39;网卡流量&#39; : device_dict, &#39;内存使用率&#39; : Used, &#39;run time&#39; : runT &amp;#125; ]        cupData[host] = data    r.set(&quot;system information&quot;, str(cupData))if __name__ == &#39;__main__&#39;:    main()</code></pre><p><strong>python代码</strong>（hset存储，可读性较差）</p><pre><code class="python"># coding=utf-8&quot;&quot;&quot;filename:snmp_test.py说明：使用系统的 snmpwalk 来查询设备信息，需要先安装 snmp代码 Windows 和 Linux 通用Windows cmd 调用示例：snmpwalk -v 2c -c public 127.0.0.1 1.3.6.1.2.1.1.1Windows cmd 下查看某主机（192.168.132.130）信息示例：snmpwalk -v 2c -c public 192.168.132.130 1.3.6.1.2.1.1.1&quot;&quot;&quot;import reimport osimport timeimport platformimport redis   # 导入redis模块，通过python操作redis 也可以直接在redis主机的服务端操作缓存数据库if &#39;Linux&#39; == platform.system():    hosts = [&#39;160.0.3.1&#39;,&#39;160.0.3.5&#39;]else:    # 在虚拟机运行时则查看本地    hosts = [&#39;160.0.3.1&#39;,&#39;160.0.3.5&#39;]def snmpWalk(host, oid):    result = os.popen(&#39;snmpwalk -v 2c -c public &#39; + host + &#39; &#39; + oid).read().split(&#39;\n&#39;)[:-1]    return result# ------------------------------------------------------------# 获取负载信息# ------------------------------------------------------------def getSystem(host):    system = &#39;:&#39;.join(snmpWalk(host, &#39;system&#39;)[0].split(&#39;:&#39;)[3:]).strip()    return system# ------------------------------------------------------------# ------------------------------------------------------------# 获取负载信息# ------------------------------------------------------------def getLoad(host, loid):    &quot;&quot;&quot;系统负载&quot;&quot;&quot;    load_oids = &#39;1.3.6.1.4.1.2021.10.1.3.&#39; + str(loid)    return snmpWalk(host, load_oids)[0].split(&#39;:&#39;)[3]def getLoads(host):    load1 = getLoad(host, 1)    load10 = getLoad(host, 2)    load15 = getLoad(host, 3)    return load1, load10, load15# ------------------------------------------------------------# ------------------------------------------------------------# 获取网卡流量# ------------------------------------------------------------def getNetworkDevices(host):    &quot;&quot;&quot;获取网络设备信息&quot;&quot;&quot;    device_mib = snmpWalk(host, &#39;RFC1213-MIB::ifDescr&#39;)    device_list = []    for item in device_mib:        device_list.append(item.split(&#39;:&#39;)[3].strip())    return device_listdef getNetworkData(host, oid):    &quot;&quot;&quot;获取网络流量&quot;&quot;&quot;    data_mib = snmpWalk(host, oid)    data = []    for item in data_mib:        byte = float(item.split(&#39;:&#39;)[3].strip())        data.append(str(round(byte / 1024, 2)) + &#39; KB&#39;)    return datadef getNetworkInfo(host):    device_list = getNetworkDevices(host)    # 流入流量    inside = getNetworkData(host, &#39;IF-MIB::ifInOctets&#39;)    # 流出流量    outside = getNetworkData(host, &#39;IF-MIB::ifOutOctets&#39;)    return device_list, inside, outside# ------------------------------------------------------------# ------------------------------------------------------------# 内存使用率# ------------------------------------------------------------def getSwapTotal(host):    swap_total = snmpWalk(host, &#39;UCD-SNMP-MIB::memTotalSwap.0&#39;)[0].split(&#39; &#39;)[3]    return swap_totaldef getSwapUsed(host):    swap_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::memAvailSwap.0&#39;)[0].split(&#39; &#39;)[3]    swap_total = getSwapTotal(host)    swap_used = str(round(((float(swap_total) - float(swap_avail)) / float(swap_total)) * 100, 2)) + &#39;%&#39;    return swap_useddef getMemTotal(host):    mem_total = snmpWalk(host, &#39;UCD-SNMP-MIB::memTotalReal.0&#39;)[0].split(&#39; &#39;)[3]    return mem_totaldef getMemUsed(host):    mem_total = getMemTotal(host)    mem_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::memAvailReal.0&#39;)[0].split(&#39; &#39;)[3]    mem_used = str(round(((float(mem_total) - float(mem_avail)) / float(mem_total)) * 100, 2)) + &#39;%&#39;    return mem_useddef getMemInfo(host):    mem_used = getMemUsed(host)    swap_used = getSwapUsed(host)    return mem_used, swap_useddef getRedis():    pool = redis.ConnectionPool(host=&#39;160.0.3.5&#39;,password=&#39;12345&#39;, port=6379, decode_responses=True)   # host是redis主机，需要redis服务端和客户端都起着 redis默认端口是6379    return redis.Redis(connection_pool=pool)# ------------------------------------------------------------def main():    r=getRedis()    for host in hosts:        print(&#39;=&#39; * 10 + host + &#39;=&#39; * 10)        start = time.time()        print(&quot;系统信息&quot;)        system = getSystem(host)        print(system)        r.hset(host, &quot;system&quot;, system)        print(&quot;系统负载&quot;)        load1, load10, load15 = getLoads(host)        print(&#39;load(5min): %s ,load(10min): %s ,load(15min): %s&#39; % (load1, load10, load15))        r.hset(host, &quot;load1&quot;, load1)        r.hset(host, &quot;load10&quot;, load10)        r.hset(host, &quot;load15&quot;, load15)        print(&quot;网卡流量&quot;)        device_list, inside, outside = getNetworkInfo(host)        for i, item in enumerate(device_list):            print(&#39;%s : RX: %-15s   TX: %s &#39; % (device_list[i], inside[i], outside[i]))            r.hset(host, device_list[i]+&quot;_RX&quot;, inside[i])            r.hset(host, device_list[i]+&quot;_TX&quot;, outside[i])        mem_used, swap_used = getMemInfo(host)        print(&quot;内存使用率&quot;)        print(&#39;Mem_Used = %-15s   Swap_Used = %-15s&#39; % (mem_used, swap_used))        r.hset(host, &quot;mem_used&quot;, mem_used)        r.hset(host, &quot;swap_used&quot;, swap_used)        end = time.time()        print(&#39;run time:&#39;, round(end - start, 2), &#39;s&#39;)        r.hset(host, &quot;run time&quot;, round(end - start, 2))if __name__ == &#39;__main__&#39;:    main()</code></pre><h2 id="json格式保存（更新）"><a href="#json格式保存（更新）" class="headerlink" title="json格式保存（更新）"></a>json格式保存（更新）</h2><pre><code class="python"># coding=utf-8&quot;&quot;&quot;filename:snmp_test.py说明：使用系统的 snmpwalk 来查询设备信息，需要先安装 snmp代码 Windows 和 Linux 通用Windows cmd 调用示例：snmpwalk -v 2c -c public 127.0.0.1 1.3.6.1.2.1.1.1Windows cmd 下查看某主机（192.168.132.130）信息示例：snmpwalk -v 2c -c public 192.168.132.130 1.3.6.1.2.1.1.1&quot;&quot;&quot;import reimport osimport timeimport platformimport redis   # 导入redis模块，通过python操作redis 也可以直接在redis主机的服务端操作缓存数据库import jsonimport timefrom datetime import datetimeif &#39;Linux&#39; == platform.system():    hosts = [&#39;160.0.3.1&#39;,&#39;160.0.3.2&#39;,&#39;160.0.3.3&#39;,&#39;160.0.3.4&#39;,&#39;160.0.3.5&#39;,&#39;160.0.3.9&#39;,&#39;160.0.3.10&#39;,    &#39;160.0.3.50&#39;,&#39;160.0.3.51&#39;,&#39;160.0.3.52&#39;,&#39;160.0.3.100&#39;,&#39;160.0.3.198&#39;,&#39;160.0.3.220&#39;]else:    # 在虚拟机运行时则查看本地    hosts = []def snmpWalk(host, oid):    result = os.popen(&#39;snmpwalk -v 2c -c public &#39; + host + &#39; &#39; + oid).read().split(&#39;\n&#39;)[:-1]    return result# ------------------------------------------------------------# 获取负载信息# ------------------------------------------------------------def getSystem(host):    system = &#39;:&#39;.join(snmpWalk(host, &#39;system&#39;)[0].split(&#39;:&#39;)[3:]).strip()    return system# ------------------------------------------------------------# ------------------------------------------------------------# 获取负载信息# ------------------------------------------------------------def getLoad(host, loid):    &quot;&quot;&quot;系统负载&quot;&quot;&quot;    load_oids = &#39;1.3.6.1.4.1.2021.10.1.3.&#39; + str(loid)    return snmpWalk(host, load_oids)[0].split(&#39;:&#39;)[3]def getLoads(host):    load1 = getLoad(host, 1)    load10 = getLoad(host, 2)    load15 = getLoad(host, 3)    return load1, load10, load15# ------------------------------------------------------------# ------------------------------------------------------------# 获取网卡流量# ------------------------------------------------------------def getNetworkDevices(host):    &quot;&quot;&quot;获取网络设备信息&quot;&quot;&quot;    device_mib = snmpWalk(host, &#39;RFC1213-MIB::ifDescr&#39;)    device_list = []    for item in device_mib:        device_list.append(item.split(&#39;:&#39;)[3].strip())    return device_listdef getNetworkData(host, oid):    &quot;&quot;&quot;获取网络流量&quot;&quot;&quot;    data_mib = snmpWalk(host, oid)    data = []    for item in data_mib:        byte = float(item.split(&#39;:&#39;)[3].strip())        data.append(str(round(byte / 1024, 2)) + &#39; KB&#39;)    return datadef getNetworkInfo(host):    device_list = getNetworkDevices(host)    # 流入流量    inside = getNetworkData(host, &#39;IF-MIB::ifInOctets&#39;)    # 流出流量    outside = getNetworkData(host, &#39;IF-MIB::ifOutOctets&#39;)    return device_list, inside, outside# ------------------------------------------------------------# ------------------------------------------------------------# 内存使用率# ------------------------------------------------------------def getSwapTotal(host):    swap_total = snmpWalk(host, &#39;UCD-SNMP-MIB::memTotalSwap.0&#39;)[0].split(&#39; &#39;)[3]    return swap_totaldef getSwapUsed(host):    swap_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::memAvailSwap.0&#39;)[0].split(&#39; &#39;)[3]    swap_total = getSwapTotal(host)    swap_used = str(round(((float(swap_total) - float(swap_avail)) / float(swap_total)) * 100, 2)) + &#39;%&#39;    return swap_useddef getMemTotal(host):    mem_total = snmpWalk(host, &#39;UCD-SNMP-MIB::memTotalReal.0&#39;)[0].split(&#39; &#39;)[3]    return mem_totaldef getMemUsed(host):    mem_total = getMemTotal(host)    mem_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::memAvailReal.0&#39;)[0].split(&#39; &#39;)[3]    mem_used = str(round(((float(mem_total) - float(mem_avail)) / float(mem_total)) * 100, 2)) + &#39;%&#39;    return mem_useddef getMemInfo(host):    mem_used = getMemUsed(host)    swap_used = getSwapUsed(host)    return mem_used, swap_used# ------------------------------------------------------------# 磁盘使用率# ------------------------------------------------------------def getDiskTotal(host):    disk_total = snmpWalk(host, &#39;UCD-SNMP-MIB::dskTotal.1&#39;)[0].split(&#39; &#39;)[3]    return disk_totaldef getDiskUsed(host):    disk_total = getDiskTotal(host)    disk_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::dskAvail.1&#39;)[0].split(&#39; &#39;)[3]    disk_used = str(round(((float(disk_total) - float(disk_avail)) / float(disk_total)) * 100, 2)) + &#39;%&#39;    return disk_useddef getDiskInfo(host):    disk_used = getDiskUsed(host)    return disk_used# ------------------------------------------------------------# redis连接# ------------------------------------------------------------    def getRedis():    pool = redis.ConnectionPool(host=&#39;160.0.3.5&#39;,password=&#39;12345&#39;, port=6379, decode_responses=True)   # host是redis主机，需要redis服务端和客户端都起着 redis默认端口是6379    return redis.Redis(connection_pool=pool)# ------------------------------------------------------------def main():    r=getRedis()    cupData = &amp;#123;&amp;#125;    for host in hosts:        print(&#39;=&#39; * 30)        print(&quot;记录时刻:&quot;)        tt=time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())        print(tt)        print(&#39;=&#39; * 10 + host + &#39;=&#39; * 10)        start = time.time()        print(&quot;系统信息&quot;)        system = getSystem(host)        print(system)        #r.hset(host, &quot;system&quot;, system)        print(&quot;系统负载&quot;)        load1, load10, load15 = getLoads(host)        print(&#39;load(5min): %s ,load(10min): %s ,load(15min): %s&#39; % (load1, load10, load15))        load = [ &amp;#123; &#39;load1&#39; : load1, &#39;load10&#39; : load10, &#39;load15&#39; : load15 &amp;#125; ]        print(&quot;网卡流量&quot;)        device_dict = &amp;#123;&amp;#125;        device_list, inside, outside = getNetworkInfo(host)        for i, item in enumerate(device_list):            print(&#39;%s : RX: %-15s   TX: %s &#39; % (device_list[i], inside[i], outside[i]))            temp = [ &amp;#123; &#39;RX&#39; : inside[i], &#39;TX&#39; : outside[i] &amp;#125; ]            device_dict[device_list[i]] = temp # 添加        mem_used, swap_used = getMemInfo(host)        print(&quot;内存使用率&quot;)        print(&#39;Mem_Used = %-15s   Swap_Used = %-15s&#39; % (mem_used, swap_used))        Used = [ &amp;#123; &#39;Mem_Used&#39; : mem_used, &#39;Swap_Used&#39; : swap_used &amp;#125; ]        disk_used = getDiskInfo(host)        print(&quot;磁盘使用率&quot;)        print(&#39;Disk_Used = %-15s&#39; % (disk_used))        end = time.time()        print(&#39;run time:&#39;, round(end - start, 2), &#39;s&#39;)        runT = round(end - start, 2)        data = [ &amp;#123; &#39;记录时刻&#39; : tt,&#39;系统信息&#39; : system, &#39;系统负载&#39; : load, &#39;网卡流量&#39; : device_dict, &#39;内存使用率&#39; : Used, &#39;磁盘使用率&#39; : disk_used, &#39;run time&#39; : runT &amp;#125; ]        cupData[host] = data    r.set(&quot;system information 160&quot;, str(cupData))if __name__ == &#39;__main__&#39;:    main()</code></pre><h2 id="定时任务（更新）"><a href="#定时任务（更新）" class="headerlink" title="定时任务（更新）"></a>定时任务（更新）</h2><p>参考原文：<a href="http://www.tracefact.net/tech/080.html">http://www.tracefact.net/tech/080.html</a></p><p>放到crontab里面去，每30分钟执行一次并保存到redis中</p><pre><code class="bash"># crontab -lno crontab for root</code></pre><p>创建一个crontab作业(jobs.cron，后缀名无所谓，这里只是为了便于识别)，其中包含了cron表达式，用于表明job1.sh执行的周期： </p><pre><code class="bash"># &gt;&gt; 追加*/30 * * * * python3 /usr/local/test/readCpu.py &gt;&gt; /usr/local/test/readCpu.log 2&gt;&amp;1# &gt; 覆盖*/30 * * * * python3 /usr/local/test/readCpu.py &gt; /usr/local/test/readCpu.log 2&gt;&amp;1</code></pre><pre><code class="ssh">2&gt;&amp;1 #把标准错误输出重定向到标准输出（输出错误）</code></pre><p>使用crontab将它加入到计划中： （每一次更改后都要执行）</p><pre><code class="bash">crontab jobs.cron</code></pre><p>再次查看当前计划，可以看到这样的结果： </p><pre><code class="bash"># crontab -l*/30 * * * * python3 /usr/local/test/readCpu.py &gt; /usr/local/test/readCpu.log 2&gt;&amp;1</code></pre><h2 id="crontab环境变量问题（更新）"><a href="#crontab环境变量问题（更新）" class="headerlink" title="crontab环境变量问题（更新）"></a>crontab环境变量问题（更新）</h2><p>因为crontab环境变量的的坑，定时任务过一段时间执行会报错，找不到各种文件，所以重新来用shell脚本执行</p><p>readCpu160.sh（开放权限<code>chmod 777 ./readCpu160.sh</code>）</p><pre><code class="bash">#！/usr/bin/bashcd  /usr/local/test/opt/anaconda3/bin/python3 /usr/local/test/readCpu160.py</code></pre><p>readDB2.sh（开放权限<code>chmod 777 ./readDB2.sh </code>）</p><pre><code class="bash">#！/usr/bin/bashcd  /usr/local/test/opt/anaconda3/bin/python3 /usr/local/test/readDB2.py</code></pre><p>jobs.cron</p><pre><code class="bash">*/30 * * * * /usr/local/test/readDB2.sh &gt; /usr/local/test/readDB2.log 2&gt;&amp;1*/30 * * * * /usr/local/test/readCpu160.sh &gt; /usr/local/test/readCpu160.log 2&gt;&amp;1</code></pre><p>crontab执行readDB2.sh时报错：</p><p>原因：crontab在执行脚本的时候,没有读到用户的环境变量参数，导致找不到库文件</p><pre><code class="bash">Traceback (most recent call last):  File &quot;/usr/local/test/readDB2.py&quot;, line 9, in &lt;module&gt;    conn_hotmill2 = ibm_db.connect(&quot;DATABASE=hotmill2;HOSTNAME=160.0.3.50;PORT=50000;PROTOCOL=TCPIP;UID=db2inst1;PWD=p@ssw0rd;&quot;, &quot;&quot;, &quot;&quot;)Exception: IBM SQL10007N Message &quot;0&quot; could not be retrieved.  Reason code: &quot;3&quot;. SQLCODE=-1042</code></pre><p>修改readDB2.sh</p><pre><code class="bash">#！/usr/bin/bash. /etc/profile. ~/.bash_profilecd  /usr/local/test/opt/anaconda3/bin/python3 /usr/local/test/readDB2.py</code></pre><p> 参考：</p><p><a href="https://blog.csdn.net/jiangguilong2000/article/details/38318011?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">解决crontab无法读取环境变量</a></p><p><a href="https://blog.csdn.net/Dancen/article/details/24355287?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">Linux中crontab的坑爹环境变量问题</a></p><h2 id="输出记录时刻（更新）"><a href="#输出记录时刻（更新）" class="headerlink" title="输出记录时刻（更新）"></a>输出记录时刻（更新）</h2><pre><code class="python"># readCpu.py中添加import timefrom datetime import datetime.................print(&#39;=&#39; * 30)    print(&quot;记录时刻:&quot;)    print(time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))</code></pre><p>输出：</p><pre><code class="bash">记录时刻:2020-09-16 16:14:53</code></pre><h2 id="增加磁盘使用率（更新）"><a href="#增加磁盘使用率（更新）" class="headerlink" title="增加磁盘使用率（更新）"></a>增加磁盘使用率（更新）</h2><pre><code class="python"># ------------------------------------------------------------# 磁盘使用率# ------------------------------------------------------------def getDiskTotal(host):    disk_total = snmpWalk(host, &#39;UCD-SNMP-MIB::dskTotal.1&#39;)[0].split(&#39; &#39;)[3]    return disk_totaldef getDiskUsed(host):    disk_total = getDiskTotal(host)    disk_avail = snmpWalk(host, &#39;UCD-SNMP-MIB::dskAvail.1&#39;)[0].split(&#39; &#39;)[3]    disk_used = str(round(((float(disk_total) - float(disk_avail)) / float(disk_total)) * 100, 2)) + &#39;%&#39;    return disk_useddef getDiskInfo(host):    disk_used = getDiskUsed(host)    return disk_used----------------------------------------------------------------------------------------------- disk_used = getDiskInfo(host)        print(&quot;磁盘使用率&quot;)        print(&#39;Disk_Used = %-15s&#39; % (disk_used))-----------------------------------------------------------------------------------------------data = [ &amp;#123; &#39;记录时刻&#39; : tt,&#39;系统信息&#39; : system, &#39;系统负载&#39; : load, &#39;网卡流量&#39; : device_dict, &#39;内存使用率&#39; : Used, &#39;磁盘使用率&#39; : disk_used,&#39;run time&#39; : runT &amp;#125; ]        cupData[host] = data</code></pre><h2 id="cpu内存监控画面（jsp）"><a href="#cpu内存监控画面（jsp）" class="headerlink" title="cpu内存监控画面（jsp）"></a>cpu内存监控画面（jsp）</h2><h3 id="监控画面-jsp"><a href="#监控画面-jsp" class="headerlink" title="监控画面.jsp"></a>监控画面.jsp</h3><pre><code class="jsp">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;         pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;style&gt;&lt;/style&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot; /&gt;    &lt;title&gt;性能监控&lt;/title&gt;&lt;/head&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;./css/style.css&quot; /&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;./js/echarts.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;body&gt;&lt;div style=&quot;clear: both&quot; &gt;    &lt;form action=&quot;index.html&quot; class=&quot;login-form&quot;&gt;        &lt;div&gt;            &lt;span class=&quot;ip&quot;&gt;160.0.3.1&lt;/span&gt;        &lt;/div&gt;        &lt;span&gt;内存使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;10%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_green&quot;&gt;10%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;磁盘使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;10%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_green&quot;&gt;10%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;系统负载 :&lt;/span&gt;        &lt;div&gt;            &lt;span&gt; load1 :0.02 &lt;/span&gt;            &lt;span&gt; load10 :0.02 &lt;/span&gt;            &lt;span&gt; load15 :0.05 &lt;/span&gt;        &lt;/div&gt;        &lt;br&gt;    &lt;/form&gt;    &lt;form action=&quot;index.html&quot; class=&quot;login-form&quot;&gt;        &lt;div&gt;            &lt;span class=&quot;ip&quot;&gt;160.0.3.1&lt;/span&gt;        &lt;/div&gt;        &lt;span&gt;内存使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot; &gt;99%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_red&quot;style=&quot;width: 99%&quot;&gt;99%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;磁盘使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;10%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_green&quot;&gt;10%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;系统负载 :&lt;/span&gt;        &lt;div&gt;            &lt;span&gt; load1 :0.02 &lt;/span&gt;            &lt;span&gt; load10 :0.02 &lt;/span&gt;            &lt;span&gt; load15 :0.05 &lt;/span&gt;        &lt;/div&gt;        &lt;br&gt;    &lt;/form&gt;    &lt;form action=&quot;index.html&quot; class=&quot;login-form&quot;&gt;        &lt;div&gt;            &lt;span class=&quot;ip&quot;&gt;160.0.3.1&lt;/span&gt;        &lt;/div&gt;        &lt;span&gt;内存使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;99%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_red&quot;style=&quot;width: 99%&quot;&gt;99%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;磁盘使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;10%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_green&quot;&gt;10%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;系统负载 :&lt;/span&gt;        &lt;div&gt;            &lt;span&gt; load1 :0.02 &lt;/span&gt;            &lt;span&gt; load10 :0.02 &lt;/span&gt;            &lt;span&gt; load15 :0.05 &lt;/span&gt;        &lt;/div&gt;        &lt;br&gt;    &lt;/form&gt;    &lt;form action=&quot;index.html&quot; class=&quot;login-form&quot;&gt;        &lt;div&gt;            &lt;span class=&quot;ip&quot;&gt;160.0.3.1&lt;/span&gt;        &lt;/div&gt;        &lt;span&gt;内存使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;98%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_red&quot;style=&quot;width: 98%&quot;&gt;98%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;磁盘使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;10%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_green&quot;&gt;10%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;系统负载 :&lt;/span&gt;        &lt;div&gt;            &lt;span&gt; load1 :0.02 &lt;/span&gt;            &lt;span&gt; load10 :0.02 &lt;/span&gt;            &lt;span&gt; load15 :0.05 &lt;/span&gt;        &lt;/div&gt;        &lt;br&gt;    &lt;/form&gt;    &lt;form action=&quot;index.html&quot; class=&quot;login-form&quot;&gt;        &lt;div&gt;            &lt;span class=&quot;ip&quot;&gt;160.0.3.1&lt;/span&gt;        &lt;/div&gt;        &lt;span&gt;内存使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;10%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_green&quot;&gt;10%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;磁盘使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;10%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_green&quot;&gt;10%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;系统负载 :&lt;/span&gt;        &lt;div&gt;            &lt;span&gt; load1 :0.02 &lt;/span&gt;            &lt;span&gt; load10 :0.02 &lt;/span&gt;            &lt;span&gt; load15 :0.05 &lt;/span&gt;        &lt;/div&gt;        &lt;br&gt;    &lt;/form&gt;    &lt;form action=&quot;index.html&quot; class=&quot;login-form&quot;&gt;        &lt;div&gt;            &lt;span class=&quot;ip&quot;&gt;160.0.3.1&lt;/span&gt;        &lt;/div&gt;        &lt;span&gt;内存使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;86%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_yellow&quot;style=&quot;width: 86%&quot;&gt;86%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;磁盘使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;89%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_yellow&quot;style=&quot;width: 89%&quot;&gt;89%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;系统负载 :&lt;/span&gt;        &lt;div&gt;            &lt;span&gt; load1 :0.02 &lt;/span&gt;            &lt;span&gt; load10 :0.02 &lt;/span&gt;            &lt;span&gt; load15 :0.05 &lt;/span&gt;        &lt;/div&gt;        &lt;br&gt;    &lt;/form&gt;    &lt;form action=&quot;index.html&quot; class=&quot;login-form&quot;&gt;        &lt;div&gt;            &lt;span class=&quot;ip&quot;&gt;160.0.3.1&lt;/span&gt;        &lt;/div&gt;        &lt;span&gt;内存使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;10%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_green&quot;&gt;10%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;磁盘使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;10%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_green&quot;&gt;10%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;系统负载 :&lt;/span&gt;        &lt;div&gt;            &lt;span&gt; load1 :0.02 &lt;/span&gt;            &lt;span&gt; load10 :0.02 &lt;/span&gt;            &lt;span&gt; load15 :0.05 &lt;/span&gt;        &lt;/div&gt;        &lt;br&gt;    &lt;/form&gt;    &lt;form action=&quot;index.html&quot; class=&quot;login-form&quot;&gt;        &lt;div&gt;            &lt;span class=&quot;ip&quot;&gt;160.0.3.1&lt;/span&gt;        &lt;/div&gt;        &lt;span&gt;内存使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;10%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_green&quot;&gt;10%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;磁盘使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;10%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_green&quot;&gt;10%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;系统负载 :&lt;/span&gt;        &lt;div&gt;            &lt;span&gt; load1 :0.02 &lt;/span&gt;            &lt;span&gt; load10 :0.02 &lt;/span&gt;            &lt;span&gt; load15 :0.05 &lt;/span&gt;        &lt;/div&gt;        &lt;br&gt;    &lt;/form&gt;    &lt;form action=&quot;index.html&quot; class=&quot;login-form&quot;&gt;        &lt;div&gt;            &lt;span class=&quot;ip&quot;&gt;160.0.3.1&lt;/span&gt;        &lt;/div&gt;        &lt;span&gt;内存使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;10%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_green&quot;&gt;10%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;磁盘使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;10%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_green&quot;&gt;10%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;系统负载 :&lt;/span&gt;        &lt;div&gt;            &lt;span&gt; load1 :0.02 &lt;/span&gt;            &lt;span&gt; load10 :0.02 &lt;/span&gt;            &lt;span&gt; load15 :0.05 &lt;/span&gt;        &lt;/div&gt;        &lt;br&gt;    &lt;/form&gt;    &lt;form action=&quot;index.html&quot; class=&quot;login-form&quot;&gt;        &lt;div&gt;            &lt;span class=&quot;ip&quot;&gt;160.0.3.1&lt;/span&gt;        &lt;/div&gt;        &lt;span&gt;内存使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;90%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_red&quot; style=&quot;width: 90%&quot;&gt;90%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;磁盘使用率 :&lt;/span&gt;&lt;span class=&quot;used&quot;&gt;10%&lt;/span&gt;        &lt;div  class=&quot;myProgress&quot;&gt;            &lt;div  class=&quot;myBar_green&quot;&gt;10%&lt;/div&gt;        &lt;/div&gt;        &lt;br&gt;        &lt;span&gt;系统负载 :&lt;/span&gt;        &lt;div&gt;            &lt;span&gt; load1 :0.02 &lt;/span&gt;            &lt;span&gt; load10 :0.02 &lt;/span&gt;            &lt;span&gt; load15 :0.05 &lt;/span&gt;        &lt;/div&gt;        &lt;br&gt;    &lt;/form&gt;&lt;/div&gt;&lt;div id=&quot;myDiv_Mem_Used&quot; class=&quot;box&quot;&gt;&lt;/div&gt;&lt;div id=&quot;myDiv_disk_Used&quot; class=&quot;box&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt;    var myChart_Mem_Used = echarts.init(document.getElementById(&#39;myDiv_Mem_Used&#39;));    var myChart_disk_Used = echarts.init(document.getElementById(&#39;myDiv_disk_Used&#39;));    function loadData() &amp;#123;        $.get( &#39;&#39;, function (data) &amp;#123;            myChart_Mem_Used.setOption(option = &amp;#123;                title: &amp;#123;                    text: &#39;cpu使用概览&#39;,                    subtext: &#39;160.0.3.*&#39;                &amp;#125;,                tooltip: &amp;#123;                    trigger: &#39;axis&#39;,                    axisPointer: &amp;#123;                        type: &#39;cross&#39;                    &amp;#125;                &amp;#125;,                toolbox: &amp;#123;                    show: true,                    feature: &amp;#123;                        saveAsImage: &amp;#123;&amp;#125;                    &amp;#125;                &amp;#125;,                xAxis: &amp;#123;                    type: &#39;category&#39;,                    boundaryGap: false,                    data: [&#39;160.0.3.1&#39;, &#39;160.0.3.2&#39;, &#39;160.0.3.3&#39;, &#39;160.0.3.4&#39;, &#39;160.0.3.5&#39;, &#39;160.0.3.6&#39;, &#39;160.0.3.7&#39;]                &amp;#125;,                yAxis: &amp;#123;                    type: &#39;value&#39;,                    axisLabel: &amp;#123;                        formatter: &#39;&amp;#123;value&amp;#125; &#39;                    &amp;#125;,                    axisPointer: &amp;#123;                        snap: true                    &amp;#125;                &amp;#125;,                visualMap: &amp;#123;                    show: false,                    dimension: 1.0,                    pieces: [&amp;#123;                        lte: 0.8,                        color: &#39;green&#39;                    &amp;#125;, &amp;#123;                        gt: 0.8,                        lte: 0.9,                        color: &#39;green&#39;                    &amp;#125;,&amp;#123;                        gt: 0.9,                        color: &#39;green&#39;                    &amp;#125;]                &amp;#125;,                series: [                    &amp;#123;                        name: &#39;用量&#39;,                        type: &#39;line&#39;,                        smooth: true,                        data: [0.22, 0.33, 0.23, 0.93, 0.17,0.11,0.13],                        markArea: &amp;#123;                            data: [ [&amp;#123;                                name: &#39;warning&#39;,                                yAxis: &#39;0.90&#39;                            &amp;#125;, &amp;#123;                                yAxis: &#39;1.00&#39;                            &amp;#125;] ]                        &amp;#125;                    &amp;#125;                ]        &amp;#125;)&amp;#125;)        $.get( &#39;&#39;, function (data) &amp;#123;            myChart_disk_Used.setOption(option = &amp;#123;                title: &amp;#123;                    text: &#39;磁盘使用概览&#39;,                    subtext: &#39;160.0.3.*&#39;                &amp;#125;,                tooltip: &amp;#123;                    trigger: &#39;axis&#39;,                    axisPointer: &amp;#123;                        type: &#39;cross&#39;                    &amp;#125;                &amp;#125;,                toolbox: &amp;#123;                    show: true,                    feature: &amp;#123;                        saveAsImage: &amp;#123;&amp;#125;                    &amp;#125;                &amp;#125;,                xAxis: &amp;#123;                    type: &#39;category&#39;,                    boundaryGap: false,                    data: [&#39;160.0.3.1&#39;, &#39;160.0.3.2&#39;, &#39;160.0.3.3&#39;, &#39;160.0.3.4&#39;, &#39;160.0.3.5&#39;, &#39;160.0.3.6&#39;, &#39;160.0.3.7&#39;]                &amp;#125;,                yAxis: &amp;#123;                    type: &#39;value&#39;,                    axisLabel: &amp;#123;                        formatter: &#39;&amp;#123;value&amp;#125; &#39;                    &amp;#125;,                    axisPointer: &amp;#123;                        snap: true                    &amp;#125;                &amp;#125;,                visualMap: &amp;#123;                    show: false,                    dimension: 1.0,                    pieces: [&amp;#123;                        lte: 0.8,                        color: &#39;green&#39;                    &amp;#125;, &amp;#123;                        gt: 0.8,                        lte: 0.9,                        color: &#39;green&#39;                    &amp;#125;,&amp;#123;                        gt: 0.9,                        color: &#39;green&#39;                    &amp;#125;]                &amp;#125;,                series: [                    &amp;#123;                        name: &#39;用量&#39;,                        type: &#39;line&#39;,                        smooth: true,                        data: [0.10, 0.68, 0.23, 0.63, 0.90,0.110,0.13],                        markArea: &amp;#123;                            data: [ [&amp;#123;                                name: &#39;warning&#39;,                                yAxis: &#39;0.90&#39;                            &amp;#125;, &amp;#123;                                yAxis: &#39;1.00&#39;                            &amp;#125;] ]                        &amp;#125;                    &amp;#125;                ]            &amp;#125;)&amp;#125;)        //loadData()    &amp;#125;    loadData();    //设置option&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h3><pre><code class="css">body&amp;#123;    /* 设置段落的最小高度： */    min-height: 100vh;    /* linear-gradient:创造渐变效果 */    background-image: linear-gradient(120deg,#3498db,#8e44ad);&amp;#125;.login-form&amp;#123;    width:220px;    background-color: white;    height: 260px;    /* padding:上内边距和下内边距是 80px,右内边距和左内边距是 40px*/    padding: 10px 10px;    margin-left: 20px;    margin-top: 20px;    /* border-radius:形状处理 */    border-radius: 10px;    /*position: absolute;*/    left: 10%;    top: 10%;    /*transform: translate(20%,-20%);*/    float:left;&amp;#125;.box&amp;#123;    width:46%;    clear: both;    background-color: white;    height: 400px;    padding: 10px 10px;    margin-left: 16px;    margin-top: 20px;    /* border-radius:形状处理 */    border-radius: 10px;    /*position: absolute;*/    display: inline-block;&amp;#125;.login-form h1&amp;#123;    text-align: center;    margin-bottom: 60px ;&amp;#125;.txtb&amp;#123;    border-bottom: 2px solid #adadad;    position:relative;    margin: 30px 0;&amp;#125;.txtb input&amp;#123;    font-size: 15px;    color:#333;    border: none;    width: 100%;    outline: none;    background: none;    padding: 0 5px;    height: 40px;&amp;#125;/* .txtb span::before:对应span之前的元素    在这里表示username和password */.txtb span::before&amp;#123;    content: attr(data-placeholder);    position: absolute;    top: 50%;    left: 5px;    color:#ADADAD;    transform: translateY(-50%);    z-index: -1;    transition: .5s;&amp;#125;/* .txtb span::after:对应span之之后的元素    在这里表示username和password下面的横线，不是input框的横线 */.txtb span::after&amp;#123;    content: &quot;&quot;;    position: absolute;    width: 0%;    height: 2px;    background:linear-gradient(120deg,#19CAAD,#8CC7B5);    transition: .5s;&amp;#125;/* 对span之前的元素设置focus效果   设置字样上移*/.focus + span::before&amp;#123;    top: -5px;&amp;#125;/* 对span之前的元素设置focus效果   设置横线变色 */.focus + span::after&amp;#123;    width:100%;&amp;#125;.logbtn&amp;#123;    width: 100%;    height: 50px;    border: none;    background: linear-gradient(120deg,#A0EEE1,#8CC7B5,#19CAAD);    background-size: 200%;    color: #fff;    /* cursor:pointer：设置鼠标样式 */    cursor:pointer;    transition: .5s;&amp;#125;/* 设置login按钮背景颜色向右移动    达到渐变效果*/.logbtn:hover&amp;#123;    background-position:right ;&amp;#125;.bottom-text&amp;#123;    margin-top:60px;    text-align: center;    font-size: 13px;&amp;#125;.myProgress &amp;#123;    width: 100%;    background-color: #ddd;&amp;#125;.myBar_green &amp;#123;    width: 10%;    height: 30px;    background-color: #4CAF50;    text-align: center;    line-height: 30px;    color: white;&amp;#125;.myBar_yellow &amp;#123;    width: 10%;    height: 30px;    background-color: sandybrown;    text-align: center;    line-height: 30px;    color: white;&amp;#125;.myBar_red &amp;#123;    width: 10%;    height: 30px;    background-color: red;    text-align: center;    line-height: 30px;    color: white;&amp;#125;.used &amp;#123;    ont-weight:bold;    color:#3498db;    font-size: 24px;&amp;#125;.ip&amp;#123;    font-size: 32px;    margin: 19.92px 0px;    font-weight:bold;&amp;#125;</code></pre><p><a href="https://blog.csdn.net/weixin_45466657/article/details/104754949?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-8.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-8.nonecase">简单HTML+CSS+JavaScript实现简约时尚登录页面详解 动态+渐变</a></p><h3 id="原始代码"><a href="#原始代码" class="headerlink" title="原始代码"></a><strong>原始代码</strong></h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;style&gt;        *&amp;#123;    margin:0;    padding:0;    text-decoration: none;    font-family: montserrat;&amp;#125;body&amp;#123;    /* 设置段落的最小高度： */    min-height: 100vh;    /* linear-gradient:创造渐变效果 */    background-image: linear-gradient(120deg,#3498db,#8e44ad);&amp;#125;.login-form&amp;#123;    width:360px;    background-color: #f1f1f1;    height: 580px;    /* padding:上内边距和下内边距是 80px,右内边距和左内边距是 40px*/    padding: 80px 40px;    /* border-radius:形状处理 */    border-radius: 10px;    position: absolute;    left: 50%;    top: 50%;    transform: translate(-50%,-50%);&amp;#125;.login-form h1&amp;#123;    text-align: center;    margin-bottom: 60px ;&amp;#125;.txtb&amp;#123;    border-bottom: 2px solid #adadad;    position:relative;    margin: 30px 0;&amp;#125;.txtb input&amp;#123;    font-size: 15px;    color:#333;    border: none;    width: 100%;    outline: none;    background: none;    padding: 0 5px;    height: 40px;&amp;#125;/* .txtb span::before:对应span之前的元素    在这里表示username和password */.txtb span::before&amp;#123;    content: attr(data-placeholder);    position: absolute;    top: 50%;    left: 5px;    color:#ADADAD;    transform: translateY(-50%);    z-index: -1;    transition: .5s;&amp;#125;/* .txtb span::after:对应span之之后的元素    在这里表示username和password下面的横线，不是input框的横线 */.txtb span::after&amp;#123;    content: &quot;&quot;;    position: absolute;    width: 0%;    height: 2px;    background:linear-gradient(120deg,#3498db,#8e44ad);    transition: .5s;&amp;#125;/* 对span之前的元素设置focus效果   设置字样上移*/.focus + span::before&amp;#123;    top: -5px;&amp;#125;/* 对span之前的元素设置focus效果   设置横线变色 */.focus + span::after&amp;#123;    width:100%;&amp;#125;.logbtn&amp;#123;    width: 100%;    height: 50px;    border: none;    background: linear-gradient(120deg,#3498db,#8e44ad,#3498db);    background-size: 200%;    color: #fff;    /* cursor:pointer：设置鼠标样式 */    cursor:pointer;    transition: .5s;&amp;#125;/* 设置login按钮背景颜色向右移动    达到渐变效果*/.logbtn:hover&amp;#123;    background-position:right ;&amp;#125;.bottom-text&amp;#123;    margin-top:60px;    text-align: center;    font-size: 13px;&amp;#125;    &lt;/style&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot; /&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;script src=&quot;js/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;    &lt;body&gt;        &lt;form action=&quot;index.html&quot; class=&quot;login-form&quot;&gt;            &lt;h1&gt;Login&lt;/h1&gt;            &lt;div class=&quot;txtb&quot;&gt;                &lt;input type=&quot;text&quot; /&gt;                &lt;span data-placeholder=&quot;Username&quot;&gt;&lt;/span&gt;            &lt;/div&gt;            &lt;div class=&quot;txtb&quot;&gt;                &lt;input type=&quot;password&quot; /&gt;                &lt;span data-placeholder=&quot;Password&quot;&gt;&lt;/span&gt;            &lt;/div&gt;            &lt;input type=&quot;submit&quot; class=&quot;logbtn&quot; value=&quot;Login&quot;/&gt;            &lt;div class=&quot;bottom-text&quot;&gt;                Don&#39;t hava account?&lt;a href=&quot;#&quot;&gt;Sign up&lt;/a&gt;            &lt;/div&gt;        &lt;/form&gt;        &lt;script type=&quot;text/javascript&quot;&gt;            // 当输入框获得焦点时给其添加focus类达到            // 字体上移及横线颜色波动效果            $(&quot;.txtb input&quot;).on(&quot;focus&quot;,function()&amp;#123;                $(this).addClass(&quot;focus&quot;);            &amp;#125;);            // 当输入框时区焦点时将类移除以消除效果            $(&quot;.txtb input&quot;).on(&quot;blur&quot;,function()&amp;#123;                if($(this).val()==&quot;&quot;)                $(this).removeClass(&quot;focus&quot;);            &amp;#125;);        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h1 id="DB2数据库监控"><a href="#DB2数据库监控" class="headerlink" title="DB2数据库监控"></a>DB2数据库监控</h1><p>首先导入db2模块</p><h2 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h2><pre><code class="python">#-*-coding-*-import ibm_dbimport timeimport redis   # 导入redis模块，通过python操作redis 也可以直接在redis主机的服务端操作缓存数据库import jsonconn_hotmill2 = ibm_db.connect(&quot;DATABASE=hotmill2;HOSTNAME=160.0.*.*;PORT=50000;PROTOCOL=TCPIP;UID=db2inst1;PWD=***;&quot;, &quot;&quot;, &quot;&quot;)conn_HSM031 = ibm_db.connect(&quot;DATABASE=HSM031;HOSTNAME=160.0.*.*;PORT=50000;PROTOCOL=TCPIP;UID=db2inst1;PWD=*****;&quot;, &quot;&quot;, &quot;&quot;)# ------------------------------------------------------------# redis连接# ------------------------------------------------------------    def getRedis():    pool = redis.ConnectionPool(host=&#39;*&#39;,password=&#39;*&#39;, port=6379, decode_responses=True)   # host是redis主机，需要redis服务端和客户端都起着 redis默认端口是6379    return redis.Redis(connection_pool=pool)# ------------------------------------------------------------def main():    r=getRedis()    db2Data = &amp;#123;&amp;#125;    print(&quot;*************************hotmill2***************************************************************hotmill2***************************&quot;)    if conn_hotmill2:        #查看表磁盘占用空间        print(&quot;查看表磁盘占用空间 ：&quot;)        sql_table_use_dist = &quot;SELECT cast(ap AS DECIMAL(18,2)) AS AP,cast(rmc AS DECIMAL(18,2)) AS RMC,cast(scc AS DECIMAL(18,2)) AS scc,cast(ctc AS DECIMAL(18,2)) AS ctc,cast(pfc AS DECIMAL(18,2)) AS pfc,cast(gauge AS DECIMAL(18,2)) AS gauge  from(SELECT sum(npages)*32*1024/(1024*1024*1024) AS ap FROM syscat.tables WHERE TABNAME LIKE &#39;AP%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS rmc FROM syscat.tables WHERE TABNAME LIKE &#39;RMC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS scc FROM syscat.tables WHERE TABNAME LIKE &#39;SCC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS ctc FROM syscat.tables WHERE TABNAME LIKE &#39;CTC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS pfc FROM syscat.tables WHERE TABNAME LIKE &#39;PFC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS gauge FROM syscat.tables WHERE TABNAME LIKE &#39;GAUGE%&#39;)&quot;        stmt_table_use_dist = ibm_db.exec_immediate(conn_hotmill2,sql_table_use_dist)        result_table_use_dist = ibm_db.fetch_both(stmt_table_use_dist)        print(result_table_use_dist)        #DB2_ConnectionInfo        print(&quot;查看DB2_ConnectionInfo ：&quot;)        print(&quot;************ConnectionInfo1**********************&quot;)        DB2_ConnectionInfo1=&amp;#123;&amp;#125;        sql_DB2_ConnectionInfo1 = &quot;select db_name, appl_name, authid, appl_id, appl_status,client_pid,client_nname, client_platform from sysibmadm.applications where client_nname = &#39;mq&#39; order by client_nname &quot;        stmt_DB2_ConnectionInfo1 = ibm_db.exec_immediate(conn_hotmill2,sql_DB2_ConnectionInfo1)        result_DB2_ConnectionInfo1 = ibm_db.fetch_both(stmt_DB2_ConnectionInfo1)        while result_DB2_ConnectionInfo1 !=False:            DB2_ConnectionInfo1=result_DB2_ConnectionInfo1            print(result_DB2_ConnectionInfo1)            result_DB2_TableSpaceInfo = ibm_db.fetch_both(stmt_DB2_ConnectionInfo1)        DB2_ConnectionInfo2=&amp;#123;&amp;#125;            print(&quot;************ConnectionInfo2**********************&quot;)        sql_DB2_ConnectionInfo2 = &quot;select totalNum,dbgaugeNum,onlineDB2Used,autoDebugUsed,vmUsed from(select count(*) as totalNum from sysibmadm.applications),(select count(*) as dbgaugeNum from sysibmadm.applications where appl_name like &#39;DBG%&#39;),(select count(*) as onlineDB2Used from sysibmadm.applications where client_nname like &#39;10.50%&#39;),(select count(*) as autoDebugUsed from sysibmadm.applications  where client_nname like &#39;10.25%&#39;),(select count(*) as vmUsed from sysibmadm.applications  where client_nname = &#39;vm&#39;) &quot;        stmt_DB2_ConnectionInfo2 = ibm_db.exec_immediate(conn_hotmill2,sql_DB2_ConnectionInfo2)        result_DB2_ConnectionInfo2 = ibm_db.fetch_both(stmt_DB2_ConnectionInfo2)        while result_DB2_ConnectionInfo2 !=False:            DB2_ConnectionInfo2=result_DB2_ConnectionInfo2            print(result_DB2_ConnectionInfo2)            result_DB2_ConnectionInfo2 = ibm_db.fetch_both(stmt_DB2_ConnectionInfo2)        #DB2_TableSpaceInfo        hotmill2_TableSpaceInfo=&amp;#123;&amp;#125;        print(&quot;查看DB2_TableSpaceInfo ：&quot;)        sql_DB2_TableSpaceInfo = &quot;SELECT SUBSTR(TBSP_NAME,1,20) AS TBSPC_NAME,bigint(TBSP_TOTAL_PAGES ) AS TOTAL,TBSP_USED_PAGES AS USED,TBSP_FREE_PAGES AS FREE FROM SYSIBMADM.SNAPTBSP_PART&quot;        stmt_DB2_TableSpaceInfo = ibm_db.exec_immediate(conn_hotmill2,sql_DB2_TableSpaceInfo)        result_DB2_TableSpaceInfo = ibm_db.fetch_both(stmt_DB2_TableSpaceInfo)        while result_DB2_TableSpaceInfo !=False:            hotmill2_TableSpaceInfo[result_DB2_TableSpaceInfo[0]]=result_DB2_TableSpaceInfo            print(result_DB2_TableSpaceInfo)            result_DB2_TableSpaceInfo = ibm_db.fetch_both(stmt_DB2_TableSpaceInfo)        temp_hotmill2=[ &amp;#123; &#39;表磁盘占用空间&#39; : result_table_use_dist, &#39;DB2_ConnectionInfo1&#39; : DB2_ConnectionInfo1,&#39;DB2_ConnectionInfo2&#39; : DB2_ConnectionInfo2,&#39;DB2_TableSpaceInfo&#39; : hotmill2_TableSpaceInfo &amp;#125; ]        #db2Data = &amp;#123;&amp;#125; # 添加    #最后记得关闭数据库连接    ibm_db.close(conn_hotmill2)        print(&quot;*************************HSM031***********************************************************************HSM031***************************&quot;)    if conn_HSM031:        #查看表磁盘占用空间        print(&quot;查看表磁盘占用空间 ：&quot;)        sql_table_use_dist = &quot;SELECT cast(ap AS DECIMAL(18,2)) AS AP,cast(rmc AS DECIMAL(18,2)) AS RMC,cast(scc AS DECIMAL(18,2)) AS scc,cast(ctc AS DECIMAL(18,2)) AS ctc,cast(pfc AS DECIMAL(18,2)) AS pfc,cast(gauge AS DECIMAL(18,2)) AS gauge  from(SELECT sum(npages)*32*1024/(1024*1024*1024) AS ap FROM syscat.tables WHERE TABNAME LIKE &#39;AP%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS rmc FROM syscat.tables WHERE TABNAME LIKE &#39;RMC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS scc FROM syscat.tables WHERE TABNAME LIKE &#39;SCC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS ctc FROM syscat.tables WHERE TABNAME LIKE &#39;CTC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS pfc FROM syscat.tables WHERE TABNAME LIKE &#39;PFC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS gauge FROM syscat.tables WHERE TABNAME LIKE &#39;GAUGE%&#39;)&quot;        stmt_table_use_dist = ibm_db.exec_immediate(conn_HSM031,sql_table_use_dist)        result_table_use_dist = ibm_db.fetch_both(stmt_table_use_dist)        print(result_table_use_dist)        #DB2_ConnectionInfo        print(&quot;查看DB2_ConnectionInfo ：&quot;)        print(&quot;************ConnectionInfo1**********************&quot;)        sql_DB2_ConnectionInfo1 = &quot;select db_name, appl_name, authid, appl_id, appl_status,client_pid,client_nname, client_platform from sysibmadm.applications where client_nname = &#39;mq&#39; order by client_nname &quot;        stmt_DB2_ConnectionInfo1 = ibm_db.exec_immediate(conn_HSM031,sql_DB2_ConnectionInfo1)        result_DB2_ConnectionInfo1 = ibm_db.fetch_both(stmt_DB2_ConnectionInfo1)        while result_DB2_ConnectionInfo1 !=False:            print(result_DB2_ConnectionInfo1)            result_DB2_TableSpaceInfo = ibm_db.fetch_both(stmt_DB2_ConnectionInfo1)        print(&quot;************ConnectionInfo2**********************&quot;)        sql_DB2_ConnectionInfo2 = &quot;select totalNum,dbgaugeNum,onlineDB2Used,autoDebugUsed,vmUsed from(select count(*) as totalNum from sysibmadm.applications),(select count(*) as dbgaugeNum from sysibmadm.applications where appl_name like &#39;DBG%&#39;),(select count(*) as onlineDB2Used from sysibmadm.applications where client_nname like &#39;10.50%&#39;),(select count(*) as autoDebugUsed from sysibmadm.applications  where client_nname like &#39;10.25%&#39;),(select count(*) as vmUsed from sysibmadm.applications  where client_nname = &#39;vm&#39;) &quot;        stmt_DB2_ConnectionInfo2 = ibm_db.exec_immediate(conn_HSM031,sql_DB2_ConnectionInfo2)        result_DB2_ConnectionInfo2 = ibm_db.fetch_both(stmt_DB2_ConnectionInfo2)        while result_DB2_ConnectionInfo2 !=False:            print(result_DB2_ConnectionInfo2)            result_DB2_ConnectionInfo2 = ibm_db.fetch_both(stmt_DB2_ConnectionInfo2)        #DB2_TableSpaceInfo        HSM031_TableSpaceInfo=&amp;#123;&amp;#125;        print(&quot;查看DB2_TableSpaceInfo ：&quot;)        sql_DB2_TableSpaceInfo = &quot;SELECT SUBSTR(TBSP_NAME,1,20) AS TBSPC_NAME,bigint(TBSP_TOTAL_PAGES ) AS TOTAL,TBSP_USED_PAGES AS USED,TBSP_FREE_PAGES AS FREE FROM SYSIBMADM.SNAPTBSP_PART&quot;        stmt_DB2_TableSpaceInfo = ibm_db.exec_immediate(conn_HSM031,sql_DB2_TableSpaceInfo)        result_DB2_TableSpaceInfo = ibm_db.fetch_both(stmt_DB2_TableSpaceInfo)        while result_DB2_TableSpaceInfo !=False:            HSM031_TableSpaceInfo[result_DB2_TableSpaceInfo[0]]=result_DB2_TableSpaceInfo            print(result_DB2_TableSpaceInfo)            result_DB2_TableSpaceInfo = ibm_db.fetch_both(stmt_DB2_TableSpaceInfo)        temp_HSM031=[ &amp;#123; &#39;表磁盘占用空间&#39; : result_table_use_dist, &#39;DB2_ConnectionInfo1&#39; : DB2_ConnectionInfo1,&#39;DB2_ConnectionInfo2&#39; : DB2_ConnectionInfo2,&#39;DB2_TableSpaceInfo&#39; : HSM031_TableSpaceInfo &amp;#125; ]        db2Data = &amp;#123;&quot;hotmill2&quot;:temp_hotmill2,&quot;HSM031&quot;:temp_HSM031&amp;#125; # 添加    #最后记得关闭数据库连接    ibm_db.close(conn_HSM031)    r.set(&quot;DB2 information&quot;, str(db2Data))if __name__ == &#39;__main__&#39;:    main()*</code></pre><h2 id="更新代码（增加循环语句并将dict转成json格式）"><a href="#更新代码（增加循环语句并将dict转成json格式）" class="headerlink" title="更新代码（增加循环语句并将dict转成json格式）"></a>更新代码（增加循环语句并将dict转成json格式）</h2><pre><code class="python">#-*-coding-*-import ibm_dbimport timeimport redis   # 导入redis模块，通过python操作redis 也可以直接在redis主机的服务端操作缓存数据库import jsonimport numpy as npconn_hotmill2 = ibm_db.connect(&quot;DATABASE=hotmill2;HOSTNAME=160.0.*.*;PORT=50000;PROTOCOL=TCPIP;UID=db2inst1;PWD=***;&quot;, &quot;&quot;, &quot;&quot;)conn_HSM031 = ibm_db.connect(&quot;DATABASE=HSM031;HOSTNAME=160.0.*.*;PORT=50000;PROTOCOL=TCPIP;UID=db2inst1;PWD=****;&quot;, &quot;&quot;, &quot;&quot;)conns=[conn_hotmill2,conn_HSM031]# ------------------------------------------------------------# redis连接# ------------------------------------------------------------    def getRedis():    pool = redis.ConnectionPool(host=&#39;160.0.*.*&#39;,password=&#39;*****&#39;, port=6379, decode_responses=True)   # host是redis主机，需要redis服务端和客户端都起着 redis默认端口是6379    return redis.Redis(connection_pool=pool)# ------------------------------------------------------------# getDB2Name# ------------------------------------------------------------    def getDB2Name(conn):    sql_get_db_name=&quot;SELECT DB_NAME FROM TABLE(SNAP_GET_DB(&#39;&#39;,-1)) AS S&quot;    stmt_table_use_dist = ibm_db.exec_immediate(conn,sql_get_db_name)    result_dbName = ibm_db.fetch_both(stmt_table_use_dist)    dbName=result_dbName[0]    return dbName# ------------------------------------------------------------# getJsonData# ------------------------------------------------------------    def dictToJson(dict):    str_json = json.dumps(dict, ensure_ascii=False)    print(str_json)    return str_json# ------------------------------------------------------------# 查看表磁盘占用空间# ------------------------------------------------------------    def getSpaceDisk(conn):    SpaceDiskData=&amp;#123;&amp;#125;    sql_table_use_dist = &quot;SELECT cast(ap AS DECIMAL(18,2)) AS AP,cast(rmc AS DECIMAL(18,2)) AS RMC,cast(scc AS DECIMAL(18,2)) AS scc,cast(ctc AS DECIMAL(18,2)) AS ctc,cast(pfc AS DECIMAL(18,2)) AS pfc,cast(gauge AS DECIMAL(18,2)) AS gauge  from(SELECT sum(npages)*32*1024/(1024*1024*1024) AS ap FROM syscat.tables WHERE TABNAME LIKE &#39;AP%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS rmc FROM syscat.tables WHERE TABNAME LIKE &#39;RMC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS scc FROM syscat.tables WHERE TABNAME LIKE &#39;SCC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS ctc FROM syscat.tables WHERE TABNAME LIKE &#39;CTC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS pfc FROM syscat.tables WHERE TABNAME LIKE &#39;PFC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS gauge FROM syscat.tables WHERE TABNAME LIKE &#39;GAUGE%&#39;)&quot;    stmt_table_use_dist = ibm_db.exec_immediate(conn,sql_table_use_dist)    result_table_use_dist = ibm_db.fetch_both(stmt_table_use_dist)    for k in result_table_use_dist.keys() :        SpaceDiskData[k]=result_table_use_dist[k]        #print(str(k)+&quot; : &quot;+str(result_table_use_dist[k])+&quot; &quot;)    return SpaceDiskData# ------------------------------------------------------------# 查看DB2_ConnectionInfo# ------------------------------------------------------------    def getConnectionInfo1(conn):    DB2_ConnectionInfo1=&amp;#123;&amp;#125;    sql_DB2_ConnectionInfo1 = &quot;select db_name, appl_name, authid, appl_id, appl_status,client_pid,client_nname, client_platform from sysibmadm.applications where client_nname = &#39;mq&#39; order by client_nname &quot;    stmt_DB2_ConnectionInfo1 = ibm_db.exec_immediate(conn,sql_DB2_ConnectionInfo1)    result_DB2_ConnectionInfo1 = ibm_db.fetch_both(stmt_DB2_ConnectionInfo1)    while result_DB2_ConnectionInfo1 !=False:        DB2_ConnectionInfo1=result_DB2_ConnectionInfo1        #print(result_DB2_ConnectionInfo1)        result_DB2_ConnectionInfo1 = ibm_db.fetch_both(stmt_DB2_ConnectionInfo1)    return DB2_ConnectionInfo1def getConnectionInfo2(conn):    DB2_ConnectionInfo2=&amp;#123;&amp;#125;    sql_DB2_ConnectionInfo2 = &quot;select totalNum,dbgaugeNum,onlineDB2Used,autoDebugUsed,vmUsed from(select count(*) as totalNum from sysibmadm.applications),(select count(*) as dbgaugeNum from sysibmadm.applications where appl_name like &#39;DBG%&#39;),(select count(*) as onlineDB2Used from sysibmadm.applications where client_nname like &#39;10.50%&#39;),(select count(*) as autoDebugUsed from sysibmadm.applications  where client_nname like &#39;10.25%&#39;),(select count(*) as vmUsed from sysibmadm.applications  where client_nname = &#39;vm&#39;) &quot;    stmt_DB2_ConnectionInfo2 = ibm_db.exec_immediate(conn,sql_DB2_ConnectionInfo2)    result_DB2_ConnectionInfo2 = ibm_db.fetch_both(stmt_DB2_ConnectionInfo2)    for k in result_DB2_ConnectionInfo2.keys() :        DB2_ConnectionInfo2[k]=result_DB2_ConnectionInfo2[k]        #print(str(k)+&quot; : &quot;+str(result_DB2_ConnectionInfo2[k])+&quot; &quot;)    return DB2_ConnectionInfo2# ------------------------------------------------------------# ------------------------------------------------------------# 查看DB2_TableSpaceInfo# ------------------------------------------------------------    def getTableSpaceInfo(conn):    hotmill2_TableSpaceInfo=&amp;#123;&amp;#125;    sql_DB2_TableSpaceInfo = &quot;SELECT SUBSTR(TBSP_NAME,1,20) AS TBSPC_NAME,bigint(TBSP_TOTAL_PAGES ) AS TOTAL,TBSP_USED_PAGES AS USED,TBSP_FREE_PAGES AS FREE FROM SYSIBMADM.SNAPTBSP_PART&quot;    stmt_DB2_TableSpaceInfo = ibm_db.exec_immediate(conn,sql_DB2_TableSpaceInfo)    result_DB2_TableSpaceInfo = ibm_db.fetch_both(stmt_DB2_TableSpaceInfo)    while result_DB2_TableSpaceInfo !=False:        temp=&amp;#123;&amp;#125;        for k in result_DB2_TableSpaceInfo.keys() :            temp[k]=result_DB2_TableSpaceInfo[k]            #print(str(k)+&quot; : &quot;+str(result_DB2_TableSpaceInfo[k])+&quot; &quot;)        hotmill2_TableSpaceInfo[result_DB2_TableSpaceInfo[0]]=temp        result_DB2_TableSpaceInfo = ibm_db.fetch_both(stmt_DB2_TableSpaceInfo)    return hotmill2_TableSpaceInfo# ------------------------------------------------------------def main():    r=getRedis()    db2Data = &amp;#123;&amp;#125;    for conn in conns:        dbName=getDB2Name(conn)        #print(dbName)        print(&quot;*************************&quot;+dbName+&quot;*****************&quot;+dbName+&quot;***************************&quot;)        if conn:            print(&quot;查看表磁盘占用空间 ：&quot;)            result_table_use_dist=getSpaceDisk(conn)            result_table_use_dist_j=dictToJson(result_table_use_dist)            #print(&quot;查看DB2_ConnectionInfo ：&quot;)            print(&quot;************ConnectionInfo1**********************&quot;)            DB2_ConnectionInfo1=getConnectionInfo1(conn)            DB2_ConnectionInfo1_j=dictToJson(DB2_ConnectionInfo1)            print(&quot;************ConnectionInfo2**********************&quot;)            DB2_ConnectionInfo2=getConnectionInfo2(conn)            DB2_ConnectionInfo2_j=dictToJson(DB2_ConnectionInfo2)                   print(&quot;查看DB2_TableSpaceInfo ：&quot;)            hotmill2_TableSpaceInfo=getTableSpaceInfo(conn)            hotmill2_TableSpaceInfo_j=dictToJson(hotmill2_TableSpaceInfo)            dbNameData=[ &amp;#123; &#39;表磁盘占用空间&#39; : result_table_use_dist_j, &#39;DB2_ConnectionInfo2&#39; : DB2_ConnectionInfo2_j,&#39;DB2_TableSpaceInfo&#39; : hotmill2_TableSpaceInfo_j &amp;#125; ]            db2Data[dbName] = dbNameData  # 添加    #最后记得关闭数据库连接    ibm_db.close(conn)    r.set(&quot;DB2 information&quot;, str(db2Data))if __name__ == &#39;__main__&#39;:    main()</code></pre><h2 id="表数据占用多少G-按百分比输出"><a href="#表数据占用多少G-按百分比输出" class="headerlink" title="表数据占用多少G 按百分比输出"></a>表数据占用多少G 按百分比输出</h2><pre><code class="sql">SELECT cast(s AS DECIMAL(18,2)) AS S ,cast(ap AS DECIMAL(18,2)) AS AP,cast(rmc AS DECIMAL(18,2)) AS RMC,cast(scc AS DECIMAL(18,2)) AS scc,cast(ctc AS DECIMAL(18,2)) AS ctc,cast(pfc AS DECIMAL(18,2)) AS pfc,cast(gauge AS DECIMAL(18,2)) AS gauge  from(SELECT sum(npages)*32*1024/(1024*1024*1024) AS s FROM syscat.tables) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS ap FROM syscat.tables WHERE TABNAME LIKE &#39;AP%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS rmc FROM syscat.tables WHERE TABNAME LIKE &#39;RMC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS scc FROM syscat.tables WHERE TABNAME LIKE &#39;SCC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS ctc FROM syscat.tables WHERE TABNAME LIKE &#39;CTC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS pfc FROM syscat.tables WHERE TABNAME LIKE &#39;PFC%&#39;) ,(SELECT sum(npages)*32*1024/(1024*1024*1024) AS gauge FROM syscat.tables WHERE TABNAME LIKE &#39;GAUGE%&#39;) </code></pre><pre><code class="python"># ------------------------------------------------------------# 查看表磁盘占用空间# ------------------------------------------------------------    def getSpaceDisk(conn):    SpaceDiskData=&amp;#123;&amp;#125;    DiskPercent=&amp;#123;&amp;#125;    sql_table_use_dist = &quot;sql.......................&quot;    stmt_table_use_dist = ibm_db.exec_immediate(conn,sql_table_use_dist)    result_table_use_dist = ibm_db.fetch_both(stmt_table_use_dist)    for k in result_table_use_dist.keys() :        if type(result_table_use_dist[0])!=type(result_table_use_dist[k]):            result_table_use_dist[k]=&quot;0&quot;        SpaceDiskData[k]=result_table_use_dist[k]+&quot;GB&quot;        percent=float(result_table_use_dist[k])/float(result_table_use_dist[0])        percent=round(percent,2)        SpaceDiskData[str(k)+&quot;_percent&quot;]=percent    print(SpaceDiskData)    return SpaceDiskData</code></pre><h2 id="更新sql，更新代码"><a href="#更新sql，更新代码" class="headerlink" title="更新sql，更新代码"></a>更新sql，更新代码</h2><pre><code class="sql">SELECT s,ap,fuc,rmc,scc,ctc,pfc,gauge  from(SELECT sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE)/(1024*1024)||&#39;G&#39; AS s FROM SYSIBMADM.ADMINTABINFO x WHERE TABNAME LIKE &#39;%&#39;) ,(SELECT dec(sum( x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE)/(1024*1024),17,2)||&#39;G&#39; AS ap FROM SYSIBMADM.ADMINTABINFO x WHERE TABNAME LIKE &#39;AP%&#39;) ,(SELECT sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE)/(1024*1024)||&#39;G&#39; AS fuc FROM SYSIBMADM.ADMINTABINFO x WHERE TABNAME LIKE &#39;FUC%&#39;) ,(SELECT sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE)/(1024*1024)||&#39;G&#39; AS rmc FROM SYSIBMADM.ADMINTABINFO x WHERE TABNAME LIKE &#39;RMC%&#39;) ,(SELECT sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE)/(1024*1024)||&#39;G&#39; AS scc FROM SYSIBMADM.ADMINTABINFO x WHERE TABNAME LIKE &#39;SCC%&#39;) ,(SELECT sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE)/(1024*1024)||&#39;G&#39; AS ctc FROM SYSIBMADM.ADMINTABINFO x WHERE TABNAME LIKE &#39;CTC%&#39;) ,(SELECT sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE)/(1024*1024)||&#39;G&#39; AS pfc FROM SYSIBMADM.ADMINTABINFO x WHERE TABNAME LIKE &#39;PFC%&#39;) ,(SELECT sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE)/(1024*1024)||&#39;G&#39; AS gauge FROM SYSIBMADM.ADMINTABINFO x WHERE TABNAME LIKE &#39;GAUGE%&#39;) ;</code></pre><p>这个语句查询到小于1G的数据会显示成.**G，所以在代码里需要转换一下</p><pre><code class="python"># ------------------------------------------------------------# 查看表磁盘占用空间# ------------------------------------------------------------    def getSpaceDisk(conn):    SpaceDiskData=&amp;#123;&amp;#125;    sql_table_use_dist = &quot;sql&quot;    stmt_table_use_dist = ibm_db.exec_immediate(conn,sql_table_use_dist)    result_table_use_dist = ibm_db.fetch_both(stmt_table_use_dist)    if (&quot;.&quot;==(result_table_use_dist[0])[0]):        SpaceDiskData[0]=(result_table_use_dist[0])[0:-1]        s=&quot;0&quot;+SpaceDiskData[0]        s=float((SpaceDiskData[0]))        SpaceDiskData[0]=s    elif (&quot;G&quot;==(result_table_use_dist[0])[0]):        s=0    else:        SpaceDiskData[0]=(result_table_use_dist[0])[0:-1]        s=SpaceDiskData[0]        s=float((SpaceDiskData[0]))        SpaceDiskData[0]=s    for k in result_table_use_dist.keys() :        SpaceDiskData[k]=result_table_use_dist[k]        if type(&quot;str&quot;)!=type(result_table_use_dist[k]):            result_table_use_dist[k]=&quot;0G&quot;            SpaceDiskData[k]=&quot;0G&quot;            percent=0            SpaceDiskData[str(k)+&quot;_percent&quot;]=percent        elif (&quot;.&quot;==(result_table_use_dist[k])[0]):            SpaceDiskData[k]=(result_table_use_dist[k])[0:-1]            SpaceDiskData[k]=&quot;0&quot;+SpaceDiskData[k]            percent=float(SpaceDiskData[k])/s            SpaceDiskData[k]=round(float(SpaceDiskData[k]),2)            percent=round(percent,2)            SpaceDiskData[str(k)+&quot;_percent&quot;]=percent            SpaceDiskData[k]=str(SpaceDiskData[k])+&quot;G&quot;        elif (&quot;G&quot;==(result_table_use_dist[k])[0]):            SpaceDiskData[k]=&quot;0G&quot;            percent=0            SpaceDiskData[str(k)+&quot;_percent&quot;]=percent            SpaceDiskData[k]=SpaceDiskData[k]        else:            SpaceDiskData[k]=(result_table_use_dist[k])[0:-1]            percent=float(SpaceDiskData[k])/s            percent=round(percent,2)            SpaceDiskData[k]=str(round(float(SpaceDiskData[k]),2))+&quot;G&quot;            SpaceDiskData[str(k)+&quot;_percent&quot;]=percent        print(str(k)+&quot; : &quot;+str(SpaceDiskData[k])+&quot; &quot;)    return SpaceDiskData</code></pre><h1 id="（）proc下主机信息（调用python）"><a href="#（）proc下主机信息（调用python）" class="headerlink" title="（）proc下主机信息（调用python）"></a>（）proc下主机信息（调用python）</h1><p><strong>结果</strong>：</p><pre><code class="ssh"># 主机名键:[主机名，ip地址，CPU使用率，内存使用率，SWAP使用率][root@localhost cpu_test]# python3 cpu.py &amp;#123;&#39;主机名1&#39;: [&#39;主机名1&#39;, &#39;192.168.220.11&#39;, &#39;0.98%&#39;, &#39;20%&#39;, &#39;0%&#39;], &#39;主机名2&#39;: [&#39;主机名2&#39;, &#39;192.168.220.10&#39;, &#39;1.31%&#39;, &#39;52%&#39;, &#39;14%&#39;]&amp;#125;[root@localhost cpu_test]# </code></pre><p>参考原文：<a href="https://blog.csdn.net/zyingpei/article/details/89525410">https://blog.csdn.net/zyingpei/article/details/89525410</a></p><p>网上原始参考代码：<a href="https://www.oschina.net/code/snippet_924001_47763">https://www.oschina.net/code/snippet_924001_47763</a></p><p><strong>1.在linux上部署python，见《 Linux环境下的软件安装》</strong></p><p>因为要测试代码，在windows上也安装了一个，下载，配置环境变量，再执行</p><pre><code class="ssh">pip install paramiko</code></pre><p><strong>2.准备好实现代码 cpu.py</strong></p><pre><code class="python">#!/usr/bin/python# -*- coding:utf8 -*-# 主机名键:[主机名，ip地址，CPU使用率，内存使用率，SWAP使用率]import paramikoimport refrom time import sleeplinux_info=(            [&#39;主机名1&#39;,&#39;192.168.220.11&#39;],            [&#39;主机名2&#39;,&#39;192.168.220.10&#39;]            )server_user=&#39;root&#39;server_pw=&#39;root&#39;server_info=&amp;#123;&amp;#125;def cpu_r(cpu_stat):    # 返回CPU当前的总时间片和空闲时间片信息的数据    sys_cpu_info_t = re.findall(b&#39;cpu .*\d&#39;,cpu_stat)    pattern = re.compile(r&#39;\d+&#39;)   # 查找数字    cpu_z_str = str(sys_cpu_info_t)    cpu_z_str=pattern.findall(cpu_z_str)    #print(cpu_z_str)    cpu_z_list = list(cpu_z_str)    #print(cpu_z_list)    #cpu_z_list.remove(&quot;cpu&quot;)    f_line_a=[]    for i in cpu_z_list:        i=int(i)        f_line_a.append(i)    total = sum(f_line_a)    idle = f_line_a[3]    return total,idledef meminfo_disc(meminfo_r):    # 返回内存使用信息的一个字典，取值需要 /proc/meminfo 的内容    #print(meminfo_r)    aa = re.sub(r&#39; kB&#39;,&#39;&#39;,str(meminfo_r))    aa = re.sub(r&#39;b\&#39;&#39;,&#39;&#39;,aa)    #print(&#39;*******************************************************************************&#39;)    #print(aa)    bb = re.sub(r&#39; &#39;,&#39;&#39;,aa)    #print(&#39;***********************************************************************************&#39;)    #print(bb)    cc = re.sub(r&#39;\\n&#39;,&#39;:&#39;,bb)    #print(&#39;***********************************************************************************&#39;)    #print(cc)    dd = cc.split(&quot;:&quot;)    #print(&#39;************************************************************************************&#39;)    #print(dd)    meminfo_d = &amp;#123;&amp;#125;    while len(dd)&gt;1:        #print(dd[0])        meminfo_d[dd[0]]=dd[1]        del dd[0:2]    return meminfo_dfor i in linux_info:    server_id=i[0]    server_ip=i[1]    ss = paramiko.SSHClient()    ss.set_missing_host_key_policy(paramiko.AutoAddPolicy())    ss.connect(server_ip,22,server_user,server_pw)    stdin,stdout,stderr=ss.exec_command(&#39;cat /proc/stat&#39;)    sys_cpu_stat = stdout.read()    stdin,stdout,stderr=ss.exec_command(&#39;cat /proc/meminfo&#39;)    meminfo_r = stdout.read()    #print(sys_cpu_stat)    total_a,idle_a=cpu_r(sys_cpu_stat)    sleep(3)    stdin,stdout,stderr=ss.exec_command(&#39;cat /proc/stat&#39;)    sys_cpu_stat = stdout.read()    total_b,idle_b=cpu_r(sys_cpu_stat)    ss.close()    sys_idle = idle_b - idle_a    sys_total = total_b - total_a    sys_us = sys_total - sys_idle    cpu_a = (float(sys_us)/sys_total)*100    cpu_b = str(round(cpu_a,2))+&#39;%&#39;    meminfo_key = meminfo_disc(meminfo_r)    mem_kx = int(meminfo_key.get(&#39;MemTotal&#39;))-int(meminfo_key.get(&#39;MemFree&#39;))-int(meminfo_key.get(&#39;Buffers&#39;))-int(meminfo_key.get(&#39;Cached&#39;))    mem_kx_l = (float(mem_kx)/int(meminfo_key.get(&#39;MemTotal&#39;)))*100    mem_kx_lv = str(round(mem_kx_l))+&#39;%&#39;    swap_user = float(meminfo_key.get(&#39;SwapTotal&#39;))-int(meminfo_key.get(&#39;SwapFree&#39;))/float(meminfo_key.get(&#39;SwapTotal&#39;))    swap_user_l = (float(meminfo_key.get(&#39;SwapTotal&#39;))-int(meminfo_key.get(&#39;SwapFree&#39;)))/int(meminfo_key.get(&#39;SwapTotal&#39;))*100    swap_user_lv = str(round(swap_user_l))+&#39;%&#39;    server_info_list=[server_id,server_ip,cpu_b,mem_kx_lv,swap_user_lv]    server_info[server_id]=server_info_list    # 输出一个字典print (server_info)</code></pre><p><strong>3.在linux上运行py文件</strong></p><pre><code class="ssh">python3 cpu.py</code></pre><p>会报错，缺少第三方库</p><pre><code class="ssh">python - ImportError: No module named paramiko</code></pre><p>​    <strong>1.安装pycrypto模块</strong> </p><p>下载该模块地址：<a href="https://www.dlitz.net/software/pycrypto/">https://www.dlitz.net/software/pycrypto/</a> 上传主机然后解压安装：</p><pre><code class="ssh">tar -zxvf pycrypto-2.6.1.tar.gzcd pycrypto-2.6.1python3 setup.py build &amp;&amp; python3 setup.py install</code></pre><p>​    <strong>2.安装paramiko</strong> </p><p>下载地址：<a href="https://pypi.org/project/paramiko/#description">https://pypi.org/project/paramiko/#description</a> 可以找到适合自己的版本下载，然后上传主机解压安装 ：</p><pre><code class="ssh">tar -zxvf paramiko-2.7.2.tar.gzcd paramiko-2.7.2python3 setup.py build &amp;&amp; python3 setup.py install</code></pre><p>然后报错ImportError: No module named setuptools，显示没有setuptools这个模块，安装一下这个模块。</p><pre><code> **3.安装setuptools**</code></pre><p>地址：<a href="https://pypi.org/project/setuptools/">https://pypi.org/project/setuptools/</a> 找到自己合适的版本，然后点击下载： </p><pre><code class="ssh">unzip setuptools-50.3.0.zip</code></pre><p>这一步可能会报错找不到unzip命令：下载一下（如果没有跳过）</p><pre><code class="ssh">yum install -y unzip zip</code></pre><p>继续执行命令：</p><pre><code class="ssh">cd setuptools-50.3.0python3 setup.py build &amp;&amp; python3 setup.py install</code></pre><p>然后重新进入paramiko-2.7.2 目录安装 ：</p><pre><code class="ssh">python3 setup.py build &amp;&amp; python3 setup.py install</code></pre><p>我到这一步就安装成功了，如果还报错的话可以参考下边的参考原文，他后边还安装了一些依赖</p><p>会有很多报错，应该是python版本问题，需要修改代码</p><pre><code class="python">#!/usr/bin/python# -*- coding:utf8 -*-# Email:chenwx716@163.com__author__ = &#39;chenwx&#39;import paramikoimport refrom time import sleeplinux_info=(            [&#39;192.168.220.11&#39;,&#39;192.168.220.11&#39;],            [&#39;192.168.220.10&#39;,&#39;192.168.220.10&#39;]            )server_user=&#39;root&#39;server_pw=&#39;root&#39;server_info=&amp;#123;&amp;#125;def cpu_r(cpu_stat):    # 返回CPU当前的总时间片和空闲时间片信息的数据    sys_cpu_info_t = re.findall(b&#39;cpu .*\d&#39;,cpu_stat)    cpu_z_str = str(sys_cpu_info_t)    print(cpu_z_str)    num = re.sub(r&#39;\D&#39;, &quot;&quot;, cpu_z_str)    print (&quot;电话号码是 : &quot;, num)    #cpu_z_str = &#39; &#39;.join(str(sys_cpu_info_t))    #print(sys_cpu_info_t)    #print(cpu_z_str)    #print(cpu_z_str.split( ))    #cpu_z_list = list(cpu_z_str.split())    cpu_z_list = list(cpu_z_str)    #print(cpu_z_list)    cpu_z_list.remove(&quot;cpu&quot;)    f_line_a=[]    for i in cpu_z_list:        i=int(i)        f_line_a.append(i)    total = sum(f_line_a)    idle = f_line_a[3]    return total,idledef meminfo_disc(meminfo_r):    # 返回内存使用信息的一个字典，取值需要 /proc/meminfo 的内容    aa = re.sub(r&#39; kB&#39;,&#39;&#39;,meminfo_r)    bb = re.sub(r&#39; +&#39;,&#39;&#39;,aa)    cc = re.sub(r&#39;\n&#39;,&#39;:&#39;,bb)    dd = cc.split(&quot;:&quot;)    meminfo_d = &amp;#123;&amp;#125;    while len(dd)&gt;1:        meminfo_d[dd[0]]=dd[1]        del dd[0:2]    return meminfo_dfor i in linux_info:    server_id=i[0]    server_ip=i[1]    ss = paramiko.SSHClient()    ss.set_missing_host_key_policy(paramiko.AutoAddPolicy())    ss.connect(server_ip,22,server_user,server_pw)    stdin,stdout,stderr=ss.exec_command(&#39;cat /proc/stat&#39;)    sys_cpu_stat = stdout.read()    stdin,stdout,stderr=ss.exec_command(&#39;cat /proc/meminfo&#39;)    meminfo_r = stdout.read()    #print(sys_cpu_stat)    total_a,idle_a=cpu_r(sys_cpu_stat)    sleep(3)    stdin,stdout,stderr=ss.exec_command(&#39;cat /proc/stat&#39;)    sys_cpu_stat = stdout.read()    total_b,idle_b=cpu_r(sys_cpu_stat)    ss.close()    sys_idle = idle_b - idle_a    sys_total = total_b - total_a    sys_us = sys_total - sys_idle    cpu_a = (float(sys_us)/sys_total)*100    cpu_b = str(round(cpu_a,2))+&#39;%&#39;    meminfo_key = meminfo_disc(meminfo_r)    mem_kx = int(meminfo_key.get(&#39;MemTotal&#39;))-int(meminfo_key.get(&#39;MemFree&#39;))-int(meminfo_key.get(&#39;Buffers&#39;))-int(meminfo_key.get(&#39;Cached&#39;))    mem_kx_l = (float(mem_kx)/int(meminfo_key.get(&#39;MemTotal&#39;)))*100    mem_kx_lv = str(round(mem_kx_l))+&#39;%&#39;    swap_user = float(meminfo_key.get(&#39;SwapTotal&#39;))-int(meminfo_key.get(&#39;SwapFree&#39;))/float(meminfo_key.get(&#39;SwapTotal&#39;))    swap_user_l = (float(meminfo_key.get(&#39;SwapTotal&#39;))-int(meminfo_key.get(&#39;SwapFree&#39;)))/int(meminfo_key.get(&#39;SwapTotal&#39;))*100    swap_user_lv = str(round(swap_user_l))+&#39;%&#39;    server_info_list=[server_id,server_ip,cpu_b,mem_kx_lv,swap_user_lv]    server_info[server_id]=server_info_list    # 输出一个字典print (server_info)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;cpu网址：&lt;a href=&quot;http://10.3.144.16:8080/BG2050/web/ZT01&quot;&gt;http://10.3.144.16:8080/BG2050/web/ZT01&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数据库磁盘网址：&lt;a href=&quot;http://10.3.1</summary>
      
    
    
    
    <category term="工作方案" scheme="https://xiaopantongxue816.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%96%B9%E6%A1%88/"/>
    
    
    <category term="linux" scheme="https://xiaopantongxue816.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>部署</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/04/%E9%83%A8%E7%BD%B2/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/04/%E9%83%A8%E7%BD%B2/</id>
    <published>2020-09-04T08:29:28.000Z</published>
    <updated>2020-09-18T05:32:15.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h1><h2 id="tomcat部署多个项目"><a href="#tomcat部署多个项目" class="headerlink" title="tomcat部署多个项目"></a>tomcat部署多个项目</h2><p>进入tomcat配置文件目录</p><pre><code class="bash">cd /usr/local/tomcat/apache-tomcat-8.5.57/confvim server.xml</code></pre><p>添加</p><pre><code class="ssh">&lt;!--配置web应用--&gt;&lt;Content docBase=&quot;ruoyi_admin&quot; path=&quot;/ruoyi_admin&quot; reloadable=&quot;true&quot;/&gt;</code></pre><a id="more"></a> <h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="java-net-BindException"><a href="#java-net-BindException" class="headerlink" title="java.net.BindException"></a>java.net.BindException</h2><p>启动服务的时候<code> **java.net.BindException**:</code> 地址已在使用，是因为端口被占用 端口显示 8005</p><pre><code class="bash">04-Sep-2020 15:51:24.575 严重 [main] org.apache.catalina.core.StandardServer.await StandardServer.await: create[localhost:8005]:         java.net.BindException: 地址已在使用 (Bind failed)</code></pre><pre><code>netstat -alnp | grep 8005[root@localhost bin]# netstat -alnp | grep 8005tcp6       0      0 127.0.0.1:8005          :::*                    LISTEN      2147/java     </code></pre><p>杀死进程<code>kill -9 2547</code>重新启动服务器 </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;tomcat&quot;&gt;&lt;a href=&quot;#tomcat&quot; class=&quot;headerlink&quot; title=&quot;tomcat&quot;&gt;&lt;/a&gt;tomcat&lt;/h1&gt;&lt;h2 id=&quot;tomcat部署多个项目&quot;&gt;&lt;a href=&quot;#tomcat部署多个项目&quot; class=&quot;headerlink&quot; title=&quot;tomcat部署多个项目&quot;&gt;&lt;/a&gt;tomcat部署多个项目&lt;/h2&gt;&lt;p&gt;进入tomcat配置文件目录&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;cd /usr/local/tomcat/apache-tomcat-8.5.57/conf
vim server.xml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ssh&quot;&gt;&amp;lt;!--配置web应用--&amp;gt;
&amp;lt;Content docBase=&amp;quot;ruoyi_admin&amp;quot; path=&amp;quot;/ruoyi_admin&amp;quot; reloadable=&amp;quot;true&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="运维" scheme="https://xiaopantongxue816.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="部署" scheme="https://xiaopantongxue816.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>若依管理系统</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/04/%E8%8B%A5%E4%BE%9D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/04/%E8%8B%A5%E4%BE%9D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-09-04T08:01:40.000Z</published>
    <updated>2020-09-27T10:50:14.116Z</updated>
    
    <content type="html"><![CDATA[<p>地址：<a href="http://ruoyi.vip/">http://ruoyi.vip/</a></p><a id="more"></a> <h1 id="部署遇到的一些问题"><a href="#部署遇到的一些问题" class="headerlink" title="部署遇到的一些问题"></a>部署遇到的一些问题</h1><p>在本机上用idea运行没啥问题改一下数据库数据就OK了没啥问题</p><p>在Linux上部署，需要删除ruoyi_admin.pom下的一个插件（不然会二次打包jar包就不知道是啥东西了）</p><pre><code class="xml">&lt;plugin&gt;               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;                &lt;configuration&gt;                    &lt;fork&gt;true&lt;/fork&gt; &amp;lt;!&amp;ndash; 如果没有该配置，devtools不会生效 &amp;ndash;&amp;gt;                &lt;/configuration&gt;                &lt;executions&gt;                    &lt;execution&gt;                        &lt;goals&gt;                            &lt;goal&gt;repackage&lt;/goal&gt;                        &lt;/goals&gt;                    &lt;/execution&gt;                &lt;/executions&gt; &lt;/plugin&gt;</code></pre><p>然后把项目父模块clean-&gt;install-&gt;找到（ruoyi_admin模块下的target里的）war包-&gt;放到Linux上tomcat的webapps下</p><pre><code class="bash"># 开启tomcat日志cd /usr/local/tomcat/apache-tomcat-8.5.57/bin./catalina.sh run</code></pre><p>访问地址：LinuxIP:8080/war包名</p><h1 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h1><ul><li><p>SpringBoot框架</p></li><li><p>安全控制(Apache Shiro)</p></li><li><p>Thymeleaf模板</p></li></ul><h1 id="后台实现"><a href="#后台实现" class="headerlink" title="后台实现"></a>后台实现</h1><h2 id="分页实现"><a href="#分页实现" class="headerlink" title="分页实现"></a>分页实现</h2><p>前端基于Bootstrap的轻量级表格插件 <code>BootstrapTable</code></p><p>后端分页组件使用Mybatis分页插件 <code>PageHelper</code> </p><h2 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h2><p>项目中使用注解来完成此项功能。 在需要被导入导出的实体类属性添加<code>@Excel</code>注解（支持众多参数） </p><ul><li>form默认id为importForm，也可指定importExcel(id) </li><li>在实体变量上添加@Excel注解，默认为导出导入，也可以单独设置仅导入Type.IMPORT </li><li>在Controller添加导入方法，updateSupport属性为是否存在则覆盖（可选） </li></ul><h2 id="上传下载"><a href="#上传下载" class="headerlink" title="上传下载"></a>上传下载</h2><ul><li>如需对文件格式控制，设置<code>application.yml</code>中的<code>multipart</code>属性 </li><li>如果只是单纯的上传一张图片没有其他参数可以使用通用方法 <code>uploadFile</code></li></ul><h2 id="权限注解"><a href="#权限注解" class="headerlink" title="权限注解"></a>权限注解</h2><p>Shiro注解权限控制 </p><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><ul><li>不需要任何额外配置就可以用<code>@Transactional</code>注解进行事务的使用</li><li>因为Spring的默认的事务规则是遇到运行异常（RuntimeException）和程序错误（Error）才会回滚。如果想针对检查异常进行事务回滚，可以在@Transactional 注解里使用 rollbackFor 属性明确指定异常。 </li><li>尽量不要在业务层捕捉异常并处理，在业务层手工捕捉并处理了异常，你都把异常“吃”掉了，Spring自然不知道这里有错，更不会主动去回滚数据。<strong>推荐做法</strong>：在业务层统一抛出异常，然后在控制层统一处理。 </li></ul><p>Transactional注解的常用属性表：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>propagation</td><td>事务的传播行为，默认值为 REQUIRED。</td></tr><tr><td>isolation</td><td>事务的隔离度，默认值采用 DEFAULT</td></tr><tr><td>timeout</td><td>事务的超时时间，默认值为-1，不超时。如果设置了超时时间(单位秒)，那么如果超过该时间限制了但事务还没有完成，则自动回滚事务。</td></tr><tr><td>read-only</td><td>指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true。</td></tr><tr><td>rollbackFor</td><td>用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔。{xxx1.class, xxx2.class,……}</td></tr><tr><td>noRollbackFor</td><td>抛出 no-rollback-for 指定的异常类型，不回滚事务。{xxx1.class, xxx2.class,……}</td></tr><tr><td>….</td><td></td></tr></tbody></table><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ul><li>在可能发生异常的方法里throw抛给控制器。然后由全局异常处理器对异常进行统一处理。 如此，我们的<code>Controller</code>中的方法就可以很简洁了。 所谓全局异常处理器就是使用<code>@ControllerAdvice</code>注解。 </li><li>注意：如果全部异常处理返回<code>json</code>，那么可以使用<code>@RestControllerAdvice</code>代替<code>@ControllerAdvice</code>，这样在方法上就可以不需要添加<code>@ResponseBody</code>。 </li></ul><h2 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h2><p>在需要被记录日志的<code>controller</code>方法上添加@Log注解，使用方法如下：</p><pre><code class="java">@Log(title = &quot;用户管理&quot;, businessType = BusinessType.INSERT) </code></pre><h2 id="数据权限"><a href="#数据权限" class="headerlink" title="数据权限"></a>数据权限</h2><p>1、在（系统管理-角色管理）设置需要数据权限的角色 目前支持以下几种权限</p><ul><li>全部数据权限</li><li>自定数据权限</li><li>部门数据权限</li><li>部门及以下数据权限</li><li>仅本人数据权限</li></ul><p>2、在需要数据权限控制方法上添加<code>@DataScope</code>注解，其中<code>d</code>和<code>u</code>用来表示表的别名</p><pre><code class="java">// 部门数据权限注解@DataScope(deptAlias = &quot;u&quot;)// 部门及用户权限注解@DataScope(deptAlias = &quot;d&quot;, userAlias = &quot;u&quot;)</code></pre><p>3、在<code>mybatis</code>查询底部标签添加数据范围过滤</p><pre><code class="java">&lt;!-- 数据范围过滤 --&gt;$&amp;#123;params.dataScope&amp;#125;</code></pre><p>用户管理（未过滤数据权限的情况）：</p><pre><code class="java">select u.user_id, u.dept_id, u.login_name, u.user_name, u.email    , u.phonenumber, u.password, u.sex, u.avatar, u.salt    , u.status, u.del_flag, u.login_ip, u.login_date, u.create_by    , u.create_time, u.remark, d.dept_namefrom sys_user u    left join sys_dept d on u.dept_id = d.dept_idwhere u.del_flag = &#39;0&#39;</code></pre><p>用户管理（已过滤数据权限的情况）：</p><pre><code class="java">select u.user_id, u.dept_id, u.login_name, u.user_name, u.email    , u.phonenumber, u.password, u.sex, u.avatar, u.salt    , u.status, u.del_flag, u.login_ip, u.login_date, u.create_by    , u.create_time, u.remark, d.dept_namefrom sys_user u    left join sys_dept d on u.dept_id = d.dept_idwhere u.del_flag = &#39;0&#39;    and u.dept_id in (        select dept_id        from sys_role_dept        where role_id = 2    )</code></pre><p>结果很明显，我们多了如下语句。通过角色部门表（sys_role_dept）完成了数据权限过滤</p><pre><code class="java">and u.dept_id in (    select dept_id    from sys_role_dept    where role_id = 2)</code></pre><p>提示：仅实体继承BaseEntity才会进行处理，SQL语句会存放到<code>BaseEntity</code>对象中的<code>params</code>属性中供xml参数<code>params.dataScope</code>获取。</p><h2 id="多数据源"><a href="#多数据源" class="headerlink" title="多数据源"></a>多数据源</h2><p>在一个应用中可能需要访问多个数据库的情况 。在需要切换数据源<code>Service</code>或<code>Mapper</code>方法上添加<code>@DataSource</code>注解 @DataSource(value = DataSourceType.MASTER)，其中<code>value</code>用来表示数据源名称 </p><p>1、在<code>application-druid.yml</code>配置从库数据源</p><pre><code class="yaml"># 从库数据源slave:    # 从数据源开关/默认关闭    enabled: true    url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8    username: root    password: password</code></pre><p>2、在<code>DataSourceType</code>类添加数据源枚举</p><pre><code>/** * 从库 */SLAVE</code></pre><p>3、在<code>DruidConfig</code>配置读取数据源</p><pre><code>@Bean@ConfigurationProperties(&quot;spring.datasource.druid.slave&quot;)@ConditionalOnProperty(prefix = &quot;spring.datasource.druid.slave&quot;, name = &quot;enabled&quot;, havingValue = &quot;true&quot;)public DataSource slaveDataSource(DruidProperties druidProperties)&amp;#123;    DruidDataSource dataSource = DruidDataSourceBuilder.create().build();    return druidProperties.dataSource(dataSource);&amp;#125;</code></pre><p>4、在<code>DruidConfig</code>类<code>dataSource</code>方法添加数据源</p><pre><code>setDataSource(targetDataSources, DataSourceType.SLAVE.name(), &quot;slaveDataSource&quot;);</code></pre><p>5、在需要使用多数据源方法或类上添加<code>@DataSource</code>注解，其中<code>value</code>用来表示数据源</p><pre><code>@DataSource(value = DataSourceType.SLAVE)public List&lt;SysUser&gt; selectUserList(SysUser user)&amp;#123;    return userMapper.selectUserList(user);&amp;#125;</code></pre><pre><code>@Service@DataSource(value = DataSourceType.SLAVE)public class SysUserServiceImpl</code></pre><p>对于特殊情况可以通过<code>DynamicDataSourceContextHolder</code>手动实现数据源切换</p><pre><code>public List&lt;SysUser&gt; selectUserList(SysUser user)&amp;#123;    DynamicDataSourceContextHolder.setDataSourceType(DataSourceType.SLAVE.name());    List&lt;SysUser&gt; userList = userMapper.selectUserList(user);    DynamicDataSourceContextHolder.clearDataSourceType();    return userList;&amp;#125;</code></pre><p><code>注意：目前配置了一个从库，默认关闭状态。如果不需要多数据源不用做任何配置。 另外可新增多个从库。支持不同数据源（Mysql、Oracle、SQLServer）</code></p><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p> 定时任务的场景可以说非常广泛，比如某些视频网站，购买会员后，每天会给会员送成长值，每月会给会员送一些电影券； 比如在保证最终一致性的场景中，往往利用定时任务调度进行一些比对工作；比如一些定时需要生成的报表、邮件；比如一些需要定时清理数据的任务等。 所以我们提供方便友好的web界面，实现动态管理任务，可以达到动态控制定时任务启动、暂停、重启、删除、添加、修改等操作 </p><h2 id="系统接口"><a href="#系统接口" class="headerlink" title="系统接口"></a>系统接口</h2><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><p>1、在控制层<code>Controller</code>中添加注解来描述接口信息如:</p><pre><code class="java">@Api(&quot;参数配置&quot;)@Controller@RequestMapping(&quot;/system/config&quot;)public class ConfigController</code></pre><p>2、在方法中配置接口的标题信息</p><pre><code class="java">@ApiOperation(&quot;查询参数列表&quot;)@ResponseBodypublic TableDataInfo list(Config config)&amp;#123;    startPage();    List&lt;Config&gt; list = configService.selectConfigList(config);    return getDataTable(list);&amp;#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;地址：&lt;a href=&quot;http://ruoyi.vip/&quot;&gt;http://ruoyi.vip/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="后端" scheme="https://xiaopantongxue816.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="开源项目" scheme="https://xiaopantongxue816.github.io/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>kafka</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/03/kafka/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/03/kafka/</id>
    <published>2020-09-03T09:57:44.000Z</published>
    <updated>2020-09-17T09:20:37.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="protobuf字节数组的数据传输（Demo）"><a href="#protobuf字节数组的数据传输（Demo）" class="headerlink" title="protobuf字节数组的数据传输（Demo）"></a>protobuf字节数组的数据传输（Demo）</h1><p>基于<a href="http://kafka.apache.org/">Kafka</a> 和 <a href="http://zookeeper.apache.org/">Zookeeper</a></p><a id="more"></a> <h2 id="4-生产者工具（ProtobufKafkaProducerUtil-java）"><a href="#4-生产者工具（ProtobufKafkaProducerUtil-java）" class="headerlink" title="4.生产者工具（ProtobufKafkaProducerUtil.java）"></a>4.生产者工具（<strong>ProtobufKafkaProducerUtil.java</strong>）</h2><pre><code class="java">package com.pjy.kafka;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Properties;import com.pjy.serial.PersonTestProtos;import kafka.javaapi.producer.Producer;import kafka.producer.KeyedMessage;import kafka.producer.ProducerConfig;import org.apache.commons.lang.ArrayUtils;public class ProtobufKafkaProducerUtil &amp;#123;    private static Producer&lt;String, String&gt; producer;    public final static String TOPIC = &quot;test_protobuf_pjy&quot;;    /*构建proto对象*/    public static &lt;T&gt; T buuldProtoObject()&amp;#123;        //获取一个PBPlayer构造器        PersonTestProtos.PersonTest.Builder personBuilder =  PersonTestProtos.PersonTest.newBuilder();        //设置数据        personBuilder.setName(&quot;pjy&quot;).setEmail(&quot;11111@2222&quot;).setSex(PersonTestProtos.PersonTest.Sex.MALE);        // 内部的 PhoneNumber 构造器        PersonTestProtos.PersonTest.PhoneNumber.Builder phoneNumberBuilder = PersonTestProtos.PersonTest.PhoneNumber.newBuilder();        // PhoneNumber 赋值        phoneNumberBuilder.setType(PersonTestProtos.PersonTest.PhoneNumber.PhoneType.MOBILE);        phoneNumberBuilder.setNumber(&quot;112233445566&quot;);        // personTest 设置 PhoneNumber        personBuilder.addPhone(phoneNumberBuilder);        PersonTestProtos.PersonTest personTest = personBuilder.build();        return (T)personTest;    &amp;#125;    /**     * 序列化     */    public static byte[] toSerialize()  &amp;#123;        /*//获取一个PBPlayer构造器        PersonTestProtos.PersonTest.Builder personBuilder =  PersonTestProtos.PersonTest.newBuilder();        //设置数据        personBuilder.setName(&quot;pjy&quot;).setEmail(&quot;11111@2222&quot;).setSex(PersonTestProtos.PersonTest.Sex.MALE);        // 内部的 PhoneNumber 构造器        PersonTestProtos.PersonTest.PhoneNumber.Builder phoneNumberBuilder = PersonTestProtos.PersonTest.PhoneNumber.newBuilder();        // PhoneNumber 赋值        phoneNumberBuilder.setType(PersonTestProtos.PersonTest.PhoneNumber.PhoneType.MOBILE);        phoneNumberBuilder.setNumber(&quot;112233445566&quot;);        // personTest 设置 PhoneNumber        personBuilder.addPhone(phoneNumberBuilder);        // 生成 personTest 对象        PersonTestProtos.PersonTest personTest = personBuilder.build();*/          //序列化成字节数组        PersonTestProtos.PersonTest personTest = buuldProtoObject();        byte[] byteArray = personTest.toByteArray();        //System.out.println(&quot;序列化后的字节数组:&quot;+Arrays.toString(byteArray));        return byteArray;    &amp;#125;    public static void start(String broker_list, String producer_type)&amp;#123;        Properties props = new Properties();        props.put(&quot;metadata.broker.list&quot;, broker_list);        props.put(&quot;producer.type&quot;, producer_type==null?&quot;sync&quot;:producer_type);        props.put(&quot;serializer.class&quot;, &quot;kafka.serializer.StringEncoder&quot;);        props.put(&quot;key.serializer.class&quot;, &quot;kafka.serializer.StringEncoder&quot;);        //request.required.acks        //0, which means that the producer never waits for an acknowledgment from the broker (the same behavior as 0.7). This option provides the lowest latency but the weakest durability guarantees (some data will be lost when a server fails).        //1, which means that the producer gets an acknowledgment after the leader replica has received the data. This option provides better durability as the client waits until the server acknowledges the request as successful (only messages that were written to the now-dead leader but not yet replicated will be lost).        //-1, which means that the producer gets an acknowledgment after all in-sync replicas have received the data. This option provides the best durability, we guarantee that no messages will be lost as long as at least one in sync replica remains.        props.put(&quot;request.required.acks&quot;,&quot;-1&quot;);        ProducerConfig producerConfig = new ProducerConfig(props);        producer = new Producer&lt;String, String&gt;(producerConfig);    &amp;#125;    public static void send(String message) &amp;#123;        if(message == null)&amp;#123;            return;        &amp;#125;        try &amp;#123;            KeyedMessage&lt;String, String&gt; km = new KeyedMessage&lt;String, String&gt;(TOPIC, message);            producer.send(km);        &amp;#125; catch (Exception e) &amp;#123;            e.printStackTrace();            throw e;        &amp;#125;    &amp;#125;    public static void send(String topicName, String message) &amp;#123;        if(topicName == null || message == null)&amp;#123;            return;        &amp;#125;        try &amp;#123;            KeyedMessage&lt;String, String&gt; km = new KeyedMessage&lt;String, String&gt;(topicName, message);            producer.send(km);        &amp;#125; catch (Exception e) &amp;#123;            e.printStackTrace();            throw e;        &amp;#125;    &amp;#125;    public static void send(String topicName, List&lt;String&gt; messages) &amp;#123;        if(topicName == null || messages == null)&amp;#123;            return;        &amp;#125;        try &amp;#123;            List&lt;KeyedMessage&lt;String, String&gt;&gt; kms = new ArrayList&lt;KeyedMessage&lt;String, String&gt;&gt;();            for (String msg : messages) &amp;#123;               // kms.add(new KeyedMessage&lt;String, String&gt;(topicName, String.valueOf(RandomUtils.nextInt()), msg));                //System.out.println(msg);                kms.add(new KeyedMessage&lt;String, String&gt;(topicName,null,msg));        &amp;#125;            producer.send(kms);        &amp;#125; catch (Exception e) &amp;#123;            e.printStackTrace();            throw e;        &amp;#125;    &amp;#125;    public static void stop() &amp;#123;        if (producer != null) &amp;#123;            producer.close();            producer = null;        &amp;#125;    &amp;#125;    public static void main( String[] args) &amp;#123;        Long messageNo = 0L;        final Long COUNT = 100L;        //start(&quot;168.2.4.57:9092,168.2.4.58:9092,168.2.4.59:9092,168.2.4.60:9092&quot;, &quot;sync&quot;);        start(&quot;10.0.0.16:9092&quot;, &quot;sync&quot;);        int split = 0;        List&lt;String&gt; messages = new ArrayList&lt;String&gt;();        while (messageNo &lt; COUNT) &amp;#123;            String key = String.valueOf(messageNo);            //String data = &quot;***********hello kafka message &quot; + key;           String data = ArrayUtils.toString(toSerialize(), &quot;,&quot;); // 数组转字符串(逗号分隔,首尾加大括号)            if (split &lt; 10) &amp;#123;                messages.add(data);                split++;            &amp;#125; else &amp;#123;                send(TOPIC, messages);                split = 0;                messages.clear();            &amp;#125;            //System.out.println(data);            messageNo ++;        &amp;#125;    &amp;#125;&amp;#125;</code></pre><h2 id="5-消费者工具（ProtobufKafkaConsumerUtil）"><a href="#5-消费者工具（ProtobufKafkaConsumerUtil）" class="headerlink" title="5.消费者工具（ProtobufKafkaConsumerUtil）"></a>5.消费者工具（<strong>ProtobufKafkaConsumerUtil</strong>）</h2><pre><code class="java">package com.pjy.kafka;import java.util.*;import java.util.concurrent.TimeUnit;import com.google.protobuf.InvalidProtocolBufferException;import com.pjy.serial.PersonTestProtos;import org.apache.commons.lang.exception.ExceptionUtils;import org.apache.log4j.Logger;import kafka.consumer.ConsumerConfig;import kafka.consumer.ConsumerIterator;import kafka.consumer.KafkaStream;import kafka.javaapi.consumer.ConsumerConnector;import kafka.message.MessageAndMetadata;import kafka.serializer.StringDecoder;import kafka.utils.VerifiableProperties;public class ProtobufKafkaConsumerUtil &amp;#123;    private static final Logger LOG = Logger.getLogger(ProtobufKafkaConsumerUtil.class);    public final static String TOPIC = &quot;test_protobuf_pjy&quot;;    private static ConsumerConnector consumer;    private static Thread thread = null;    private static boolean isExit = false;    /*    * 字符串-》字节数组&amp;#123;1,2,3&amp;#125;-&gt;[1,2,3]    * */    public static byte[] stringToBytes(String receive_msg)&amp;#123;        String[] s=receive_msg.split(&quot;,&quot;);        byte[] bytes=new byte[s.length];        for (int i=0;i&lt;=s.length-1;i++)&amp;#123;            if (i==0)&amp;#123;                bytes[i]=Byte.valueOf(s[i].substring(1));            &amp;#125;else if (i==s.length-1)&amp;#123;                bytes[i]=Byte.valueOf(s[i].substring(0,s[i].length()-1));            &amp;#125;else &amp;#123;                bytes[i]=Byte.valueOf(s[i]);            &amp;#125;    &amp;#125;    return bytes;    &amp;#125;    /**     * 反序列化     */    public static void unSerialize(byte[] bytes) throws InvalidProtocolBufferException &amp;#123;        PersonTestProtos.PersonTest personTestResult = PersonTestProtos.PersonTest.parseFrom(bytes);            System.out.println(String.format                    (&quot;反序列化得到的信息:姓名：%s，性别：%d，手机号：%s&quot;,                            personTestResult.getName(),                            personTestResult.getSexValue(),                            personTestResult.getPhone(0).                                    getNumber()));    &amp;#125;    public static void start(String zookeeper_quorum, String zookeeper_timeout, String group_id) &amp;#123;        try &amp;#123;            Properties props = new Properties();            props.put(&quot;zookeeper.connect&quot;, zookeeper_quorum);            props.put(&quot;group.id&quot;, group_id);            props.put(&quot;zookeeper.session.timeout.ms&quot;, zookeeper_timeout);            props.put(&quot;zookeeper.sync.time.ms&quot;, &quot;200&quot;);            props.put(&quot;auto.commit.interval.ms&quot;, &quot;1000&quot;);            //props.put(&quot;auto.offset.reset&quot;, &quot;smallest&quot;);            ConsumerConfig config = new ConsumerConfig(props);            consumer = kafka.consumer.Consumer.createJavaConsumerConnector(config);            thread = new Thread(new Runnable() &amp;#123;                @Override                public void run() &amp;#123;                    try &amp;#123;                        Map&lt;String, Integer&gt; topicCountMap = new HashMap&lt;String, Integer&gt;();                        topicCountMap.put(TOPIC, new Integer(1));                        StringDecoder keyDecoder = new StringDecoder(new VerifiableProperties());                        StringDecoder valueDecoder = new StringDecoder(new VerifiableProperties());                        Map&lt;String, List&lt;KafkaStream&lt;String, String&gt;&gt;&gt; consumerMap =                                consumer.createMessageStreams(topicCountMap, keyDecoder, valueDecoder);                        KafkaStream&lt;String, String&gt; partition = consumerMap.get(TOPIC).get(0);                        ConsumerIterator&lt;String, String&gt; it = partition.iterator();                        while(!isExit &amp;&amp; it.hasNext()) &amp;#123;                            try &amp;#123;                                MessageAndMetadata&lt;String, String&gt; item = it.next();                                String receive_msg = item.message();                                unSerialize(stringToBytes(receive_msg));                            &amp;#125; catch (Exception e) &amp;#123;                                //e.printStackTrace();                                LOG.error(new StringBuilder().append(&quot;consumer error happen! cause:&quot;).append(ExceptionUtils.getFullStackTrace(e)));                                continue;                            &amp;#125;                        &amp;#125;                        if(consumer != null)    &amp;#123;                            consumer.shutdown();                            consumer = null;                        &amp;#125;                    &amp;#125; catch (Exception e) &amp;#123;                        //e.printStackTrace();                        LOG.error(new StringBuilder().append(&quot;consumer exit! cause:&quot;).append(ExceptionUtils.getFullStackTrace(e)));                    &amp;#125;                &amp;#125;            &amp;#125;, &quot;my_kafka_consumer&quot;);            thread.setDaemon(false);            thread.start();        &amp;#125; catch (Exception e) &amp;#123;            e.printStackTrace();            LOG.error(&quot;consumer start exception! cause:&quot; + ExceptionUtils.getFullStackTrace(e));        &amp;#125;    &amp;#125;    public void stop() &amp;#123;        try &amp;#123;            isExit = true;            TimeUnit.MILLISECONDS.sleep(3000);            if(thread.isAlive()) &amp;#123;                thread.interrupt();            &amp;#125;        &amp;#125; catch (InterruptedException e) &amp;#123;            LOG.error(ExceptionUtils.getFullStackTrace(e));        &amp;#125; finally &amp;#123;            if(consumer != null) &amp;#123;                consumer.shutdown();                consumer = null;            &amp;#125;        &amp;#125;    &amp;#125;    public static void main(String[] args) &amp;#123;        int messageNo = 1000;        final int COUNT = 10000;        //ProtobufKafkaConsumerUtil.start(&quot;168.2.4.56:2181,168.2.4.57:2181,168.2.4.58:2181&quot;, &quot;3000&quot;, &quot;myGroupID&quot;);        ProtobufKafkaConsumerUtil.start(&quot;10.0.0.16:2181&quot;, &quot;3000&quot;, &quot;myGroupID&quot;);        while (messageNo &lt; COUNT) &amp;#123;            try &amp;#123;                Thread.sleep(1000 * 30);            &amp;#125; catch (InterruptedException e) &amp;#123;                e.printStackTrace();            &amp;#125;        &amp;#125;    &amp;#125;&amp;#125;</code></pre><h2 id="1-proto文件"><a href="#1-proto文件" class="headerlink" title="1.proto文件"></a>1.proto文件</h2><pre><code>syntax = &quot;proto3&quot;;import &quot;google/protobuf/any.proto&quot;;package pjy.protobuf;option java_package = &quot;com.pjy.serial&quot;;option java_outer_classname=&quot;PersonTestProtos&quot;;message PersonTest &amp;#123;      int32 id = 1;    string name = 2;    string email = 3;      Sex sex = 4;    repeated PhoneNumber phone = 5;    map&lt;string, string&gt; tags = 6;    repeated google.protobuf.Any details = 7;    enum Sex &amp;#123;              DEFAULT = 0;              MALE = 1;              Female = 2;      &amp;#125;      message PhoneNumber &amp;#123;            string number = 1;            PhoneType type = 2;            enum PhoneType &amp;#123;                  MOBILE = 0;                  HOME = 1;                  WORK = 2;            &amp;#125;           &amp;#125;&amp;#125;</code></pre><h2 id="2-Maven坐标"><a href="#2-Maven坐标" class="headerlink" title="2.Maven坐标"></a>2.Maven坐标</h2><pre><code class="markdown"> &lt;dependencies&gt;      &lt;dependency&gt;      &lt;groupId&gt;commons-lang&lt;/groupId&gt;      &lt;artifactId&gt;commons-lang&lt;/artifactId&gt;      &lt;version&gt;2.6&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;com.google.protobuf&lt;/groupId&gt;      &lt;artifactId&gt;protobuf-java&lt;/artifactId&gt;      &lt;version&gt;3.13.0&lt;/version&gt;    &lt;/dependency&gt;      &lt;dependency&gt;          &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;          &lt;artifactId&gt;kafka_2.10&lt;/artifactId&gt;          &lt;version&gt;0.8.0&lt;/version&gt;      &lt;/dependency&gt;    &lt;!-- 日志包 --&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;      &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;      &lt;version&gt;1.7.5&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;      &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;      &lt;version&gt;1.7.5&lt;/version&gt;    &lt;/dependency&gt;  &lt;/dependencies&gt;</code></pre><p>3.PersonTestProtos.java（根据第一个文件自动生成的java类）</p><h1 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h1><p>看官方文档看到了负载这个词，特别熟悉但又觉得特别陌生，所以就查了一下负载的释译：</p><p>机械设备以及生理组织等在单位时间内所担负的工作量。也指机件及建筑构件承受的重量。 </p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h2><ol><li><p>Broker：Kafka集群包含一个或多个服务器，这种服务器被称为broker。</p></li><li><p>Topic：每条发布到Kafka集群的消息都有一个主题名称，这个主题名称就被称为Topic。</p></li><li><p>Partition：物理上的概念，每个Topic包含一个或多个Partition。</p></li><li><p>Producer：消息生产者，负责发布消息到Kafka Broker。</p></li><li><p>Consumer：消息消费者，向Kafka broker读取消息的客户端</p></li><li><p>Consumer Group：每个Consumer属于一个特定的Consumer Group，group name可单独设定，若不设定则属于默认的group。</p></li></ol><h2 id="为什么选择kafka-kafka的优点"><a href="#为什么选择kafka-kafka的优点" class="headerlink" title="为什么选择kafka(kafka的优点)"></a>为什么选择kafka(kafka的优点)</h2><p> 参考原文：<a href="https://my.oschina.net/u/4288942/blog/4061346">https://my.oschina.net/u/4288942/blog/4061346</a></p><p><strong>多个生产者</strong></p><p>从多个前端系统（不同生产者）接收数据，并以统一的格式对外提供数据。</p><p><strong>多个消费者</strong></p><p>支持多个消费者从一个单独的消息流上读取数据，而且消费者之间互不影响。</p><p>这与其他队列系统不同，其他队列系统的消息一旦被一个客户端读取，其他客户端就无法再读取它。</p><p>另外，多个消费者可以组成一个群组，它们共享一个消息流，并保证整个群组对每个给定的消息只处理一次。</p><p><strong>基于磁盘的数据存储</strong></p><p>允许消费者非实时地读取消息（数据保留特性）消息被提交到磁盘，根据设置的保留规则进行保存。每个主题可以设置单独的保留规则，以便满足不同消费者的需求，各个主题可以保留不同数量的消息。</p><p>消费者可能会因为处理速度慢或突发的流量高峰导致无法及时读取消息，而持久化数据可以保证数据不会丢失。消费者可以被关闭，但消息会继续保留在kafka里。消费者可以从上次中断的地方继续处理消息。</p><p><strong>伸缩性</strong></p><p>用户在开发阶段可以先使用单个broker，再扩展到包含三个broker的小型开发集群，然后随着数据量不断增长，部署到生产环境的集群可能包含上百个broker。对在线集群进行扩展，丝毫不影响整体系统的可用性。</p><p><strong>高性能</strong></p><p>通过横向扩展生产者、消费者和broker，kafka可以轻松处理巨大的消息流。在处理大量数据的同时，它还能保证亚秒级的消息延迟。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;protobuf字节数组的数据传输（Demo）&quot;&gt;&lt;a href=&quot;#protobuf字节数组的数据传输（Demo）&quot; class=&quot;headerlink&quot; title=&quot;protobuf字节数组的数据传输（Demo）&quot;&gt;&lt;/a&gt;protobuf字节数组的数据传输（Demo）&lt;/h1&gt;&lt;p&gt;基于&lt;a href=&quot;http://kafka.apache.org/&quot;&gt;Kafka&lt;/a&gt; 和 &lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Zookeeper&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="后端" scheme="https://xiaopantongxue816.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="消息系统" scheme="https://xiaopantongxue816.github.io/tags/%E6%B6%88%E6%81%AF%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>开发工具使用教程</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/02/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/02/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2020-09-02T08:14:39.000Z</published>
    <updated>2020-09-17T09:37:36.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eclipse创建maven项目"><a href="#Eclipse创建maven项目" class="headerlink" title="Eclipse创建maven项目"></a>Eclipse创建maven项目</h1><p>原文教程：<a href="https://blog.csdn.net/nioqnw/article/details/87177475">https://blog.csdn.net/nioqnw/article/details/87177475</a>  </p><p>超级详细，相比idea有点浪费时间，要配的东西很多</p><a id="more"></a> <p><strong>配置时的环境</strong></p><p><code>eclipse  ，jdk 1.8，maven 3.6，tomcat 8.5 </code></p><h1 id="JDK环境变量配置"><a href="#JDK环境变量配置" class="headerlink" title="JDK环境变量配置"></a>JDK环境变量配置</h1><p><strong>一个小知识点</strong>（<em>JDK卸载的时候有两个程序需要卸载</em>）</p><p><code>①java 8 update 171（64-bit）</code>|<code>②java SE Development Kit8 update 171（64-bit） </code></p><pre><code>4 #在用户变量新建变量JAVA_HOME值D:\Program Files\Java\jdk1.8.0_181（jdk安装目录）5 #在系统变量    1.新建变量JAVA_HOME值&quot;D:\Program Files\Java\jdk1.8.0_181&quot;(没有这一步最后在cmd运行javac会出错)    2.新建变量CLASSPATH值&quot;.;%Java_Home%\bin;%Java_Home%\lib\dt.jar;%Java_Home%\lib\tools.jar&quot;    3.选中”Path“点击”编辑“选项,新建%Java_Home%\bin和%Java_Home%\jre\bin（如果出现变量值在前面添加“%Java_Home%\bin;%Java_Home%\jre\bin;”）6 #一路确定重新cmd，输入java/javac/java -version三个命令进行验证</code></pre><h1 id="IDEA安装破解配置（2017版本）"><a href="#IDEA安装破解配置（2017版本）" class="headerlink" title="IDEA安装破解配置（2017版本）"></a>IDEA安装破解配置（2017版本）</h1><p>安装到最后一步不要running，先把激活文件拷到安装目录的lib文件夹下<code>D:\Program Files\JetBrains\IntelliJ IDEA 2017.3.2\lib</code></p><p>然后找到安装目录下的bin目录<code>D:\Program Files\JetBrains\IntelliJ IDEA 2017.3.2\bin</code>修改<code>idea.exe.vmoptions</code>、<code>idea64.exe.vmoptions</code>两个文件，在最后一行空一行加上</p><pre><code>&quot;-javaagent:D:/Program Files/JetBrains/IntelliJ IDEA 2017.3.2/lib/JetbrainsCrack-3.1-release-enc .jar&quot;</code></pre><p>最后打开IDEA选择Activation code并粘贴激活码</p><p>——-如果idea打不开就到c盘下<code>C:\Users\Administrator\.IntelliJIdea2017.3\config</code>修改<code>idea64.exe.vmoptions</code>文件</p><pre><code>ThisCrackLicenseId-&amp;#123;&quot;licenseId&quot;:&quot;ThisCrackLicenseId&quot;,&quot;licenseeName&quot;:&quot;你的名字&quot;,&quot;assigneeName&quot;:&quot;&quot;,&quot;assigneeEmail&quot;:&quot;你的邮箱&quot;,&quot;licenseRestriction&quot;:&quot;For This Crack, Only Test! Please support genuine!!!&quot;,&quot;checkConcurrentUse&quot;:false,&quot;products&quot;:[&amp;#123;&quot;code&quot;:&quot;II&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;DM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;AC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;RS0&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;WS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;DPN&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;RC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;PS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;DC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;RM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;CL&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;,&amp;#123;&quot;code&quot;:&quot;PC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&amp;#125;],&quot;hash&quot;:&quot;2911276/0&quot;,&quot;gracePeriodDays&quot;:7,&quot;autoProlongated&quot;:false&amp;#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Eclipse创建maven项目&quot;&gt;&lt;a href=&quot;#Eclipse创建maven项目&quot; class=&quot;headerlink&quot; title=&quot;Eclipse创建maven项目&quot;&gt;&lt;/a&gt;Eclipse创建maven项目&lt;/h1&gt;&lt;p&gt;原文教程：&lt;a href=&quot;https://blog.csdn.net/nioqnw/article/details/87177475&quot;&gt;https://blog.csdn.net/nioqnw/article/details/87177475&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;超级详细，相比idea有点浪费时间，要配的东西很多&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://xiaopantongxue816.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="教程" scheme="https://xiaopantongxue816.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Protobuf</title>
    <link href="https://xiaopantongxue816.github.io/2020/09/02/Protobuf/"/>
    <id>https://xiaopantongxue816.github.io/2020/09/02/Protobuf/</id>
    <published>2020-09-02T02:14:03.000Z</published>
    <updated>2020-09-18T05:54:19.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三个关键字required、optional、repeated"><a href="#三个关键字required、optional、repeated" class="headerlink" title="三个关键字required、optional、repeated"></a>三个关键字required、optional、repeated</h1><p><a href="https://blog.csdn.net/code_style/article/details/82751720">protobuf 三个关键字required、optional、repeated的理解</a></p><h3 id="required关键字"><a href="#required关键字" class="headerlink" title="required关键字"></a>required关键字</h3><p>必须，数据发送方和接收方都必须处理这个字段</p><h3 id="optional关键字"><a href="#optional关键字" class="headerlink" title="optional关键字"></a>optional关键字</h3><p>可选，另外加了一个bool的变量，标记这个字段是否有值</p><p>发送方在发送的时候，如果这个字段有值，为true，否则为false</p><p>接收方在收到这个字段时，也会收到发送方同时发送的bool变量，根据变量判断这个字段是否有值</p><h3 id="repeated关键字"><a href="#repeated关键字" class="headerlink" title="repeated关键字"></a>repeated关键字</h3><p>重复，另外加了一个count计数变量，用于标明这个字段有多少</p><p>发送方发送的时候，同时发送了count计数变量和这个字段的起始地址</p><p>接收方在接受到数据之后，按照count来解析对应的数据。</p><a id="more"></a> <h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>序列化工具下载地址：<a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a> </p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><strong>1.下载之后，解压到本地，然后配置环境变量</strong></p><pre><code class="bash">D:\Program Files\protoc-3.13.0-win64\bin</code></pre><p><strong>2.准备一个User.proto文件，内容如下：</strong> </p><pre><code># 我们定一个User类，下面有4个属性，分别是id,name,age,mobileoption java_outer_classname=&quot;UserProtoBuf&quot;;  //生成java类名option java_package=&quot;com.pjy.serial&quot;;        //对应的包名packagemessage User&amp;#123;                        //message关键字定义了User对象，最后定义了四个属性字段    required int32 id=1;    required string name=2;    optional int32 age=3;    optional string mobile=4;&amp;#125;</code></pre><p><strong>3.在命令行下通过如下命令，生成一个Java类（UserProtoBuf.java）</strong></p><pre><code class="bash">D:\EclipseWorkspace\ProtobufDemo\src\main\java&gt;protoc --java_out=. com\pjy\serial\User.proto</code></pre><p><strong>4.在maven工程中加入protobuf-java依赖</strong>（要使用protoc创建的java类，必须要加入protobuf-java这个依赖 ）</p><p><em>！！！注意version要和protoc.exe版本一致，否则会报错</em></p><pre><code class="xml">&lt;dependency&gt;      &lt;groupId&gt;com.google.protobuf&lt;/groupId&gt;      &lt;artifactId&gt;protobuf-java&lt;/artifactId&gt;      &lt;version&gt;3.13.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><p><strong>5.测试序列化之后的UserProtoBuf类</strong> </p><pre><code class="java">package com.pjy.serial;import com.pjy.serial.UserProtoBuf.User;public class UserProtoMain &amp;#123;    public static void main(String[] args) &amp;#123;        UserProtoBuf.User.Builder builder = UserProtoBuf.User.newBuilder();        builder.setId(1);        builder.setName(&quot;protoc-java&quot;);        builder.setAge(18);        builder.setMobile(&quot;15011186302&quot;);        User user = builder.build();        System.out.println(user.toString());    &amp;#125;&amp;#125;//运行成功会打印信息。</code></pre><h2 id="idea-插件的使用-GenProtobuf"><a href="#idea-插件的使用-GenProtobuf" class="headerlink" title="idea 插件的使用 (GenProtobuf)"></a>idea 插件的使用 (GenProtobuf)</h2><p>搜索Genprotobuf插件下载，在main目录下新建proto目录</p><p>右击proto目录<code> Mark Directory As -&gt;Resouces Root</code>,把编写好的JetProtos.proto文件放在该目录下</p><pre><code class="proto">pjysyntax = &quot;proto3&quot;; // PB协议版本import &quot;google/protobuf/any.proto&quot;; // 引用外部的message，可以是本地的，也可以是此处比较特殊的 Anypackage pjy.protobuf; // 包名，其他 proto 在引用此 proto 的时候，就可以使用 test.protobuf.PersonTest 来使用，// 注意：和下面的 java_package 是两种易混淆概念，同时定义的时候，java_package 具有较高的优先级option java_package = &quot;com.pjy.serial&quot;; // 生成类的包名，注意：会在指定路径下按照该包名的定义来生成文件夹option java_outer_classname=&quot;PersonTestProtos&quot;; // 生成类的类名，注意：下划线的命名会在编译的时候被自动改为驼峰命名message PersonTest &amp;#123;      int32 id = 1; // int 类型      string name = 2; // string 类型      string email = 3;      Sex sex = 4; // 枚举类型      repeated PhoneNumber phone = 5; // 引用下面定义的 PhoneNumber 类型的 message      map&lt;string, string&gt; tags = 6; // map 类型      repeated google.protobuf.Any details = 7; // 使用 google 的 any 类型      // 定义一个枚举      enum Sex &amp;#123;              DEFAULT = 0;              MALE = 1;              Female = 2;      &amp;#125;      // 定义一个 message      message PhoneNumber &amp;#123;            string number = 1;            PhoneType type = 2;            enum PhoneType &amp;#123;                  MOBILE = 0;                  HOME = 1;                  WORK = 2;            &amp;#125;      &amp;#125;&amp;#125;</code></pre><ul><li>菜单栏-&gt;Tools-&gt;Confiure Genprotobuf-&gt;设置生成语言（java）和生成目录<code>D:\ideaWorkPlace\ProtobufDemo\src\main\java</code></li></ul><ul><li>菜单栏-&gt;Tools-&gt;Generate all Protobufs（在目的路径下编译生成java文件）</li></ul><p>Maven引入指定包</p><pre><code class="xml">&lt;!-- protobuf --&gt;&lt;dependency&gt;         &lt;groupId&gt;com.google.protobuf&lt;/groupId&gt;         &lt;artifactId&gt;protobuf-java&lt;/artifactId&gt;         &lt;version&gt;3.7.1&lt;/version&gt;&lt;/dependency&gt;</code></pre><pre><code class="java">Main.javapackage com.pjy.serial;import com.google.protobuf.InvalidProtocolBufferException;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;public class ProtoTestMain &amp;#123;    public static void main(String[] args) &amp;#123;            try &amp;#123;                /** Step1：生成 personTest 对象 */                // personTest 构造器                PersonTestProtos.PersonTest.Builder personBuilder = PersonTestProtos.PersonTest.newBuilder();                // personTest 赋值                personBuilder.setName(&quot;Jet Chen&quot;);                personBuilder.setEmail(&quot;ckk505214992@gmail.com&quot;);                personBuilder.setSex(PersonTestProtos.PersonTest.Sex.MALE);                // 内部的 PhoneNumber 构造器                PersonTestProtos.PersonTest.PhoneNumber.Builder phoneNumberBuilder = PersonTestProtos.PersonTest.PhoneNumber.newBuilder();                // PhoneNumber 赋值                phoneNumberBuilder.setType(PersonTestProtos.PersonTest.PhoneNumber.PhoneType.MOBILE);                phoneNumberBuilder.setNumber(&quot;17717037257&quot;);                // personTest 设置 PhoneNumber                personBuilder.addPhone(phoneNumberBuilder);                // 生成 personTest 对象                PersonTestProtos.PersonTest personTest = personBuilder.build();                /** Step2：序列化和反序列化 */                // 方式一 byte[]：                // 序列化//            byte[] bytes = personTest.toByteArray();                // 反序列化//            PersonTestProtos.PersonTest personTestResult = PersonTestProtos.PersonTest.parseFrom(bytes);//            System.out.println(String.format(&quot;反序列化得到的信息，姓名：%s，性别：%d，手机号：%s&quot;, personTestResult.getName(), personTest.getSexValue(), personTest.getPhone(0).getNumber()));                // 方式二 ByteString：                // 序列化//            ByteString byteString = personTest.toByteString();//            System.out.println(byteString.toString());                // 反序列化//            PersonTestProtos.PersonTest personTestResult = PersonTestProtos.PersonTest.parseFrom(byteString);//            System.out.println(String.format(&quot;反序列化得到的信息，姓名：%s，性别：%d，手机号：%s&quot;, personTestResult.getName(), personTest.getSexValue(), personTest.getPhone(0).getNumber()));                // 方式三 InputStream                // 粘包,将一个或者多个protobuf 对象字节写入 stream                // 序列化                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();                personTest.writeDelimitedTo(byteArrayOutputStream);                // 反序列化，从 steam 中读取一个或者多个 protobuf 字节对象                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());                PersonTestProtos.PersonTest personTestResult = PersonTestProtos.PersonTest.parseDelimitedFrom(byteArrayInputStream);                System.out.println(String.format(&quot;反序列化得到的信息，姓名：%s，性别：%d，手机号：%s&quot;, personTestResult.getName(), personTest.getSexValue(), personTest.getPhone(0).getNumber()));            &amp;#125; catch (InvalidProtocolBufferException e) &amp;#123;                e.printStackTrace();            &amp;#125;catch (IOException e) &amp;#123;                e.printStackTrace();            &amp;#125;        &amp;#125;&amp;#125;</code></pre><p>运行输出:</p><pre><code>反序列化得到的信息，姓名：Jet Chen，性别：1，手机号：17717037257</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;三个关键字required、optional、repeated&quot;&gt;&lt;a href=&quot;#三个关键字required、optional、repeated&quot; class=&quot;headerlink&quot; title=&quot;三个关键字required、optional、repeated&quot;&gt;&lt;/a&gt;三个关键字required、optional、repeated&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/code_style/article/details/82751720&quot;&gt;protobuf 三个关键字required、optional、repeated的理解&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;required关键字&quot;&gt;&lt;a href=&quot;#required关键字&quot; class=&quot;headerlink&quot; title=&quot;required关键字&quot;&gt;&lt;/a&gt;required关键字&lt;/h3&gt;&lt;p&gt;必须，数据发送方和接收方都必须处理这个字段&lt;/p&gt;
&lt;h3 id=&quot;optional关键字&quot;&gt;&lt;a href=&quot;#optional关键字&quot; class=&quot;headerlink&quot; title=&quot;optional关键字&quot;&gt;&lt;/a&gt;optional关键字&lt;/h3&gt;&lt;p&gt;可选，另外加了一个bool的变量，标记这个字段是否有值&lt;/p&gt;
&lt;p&gt;发送方在发送的时候，如果这个字段有值，为true，否则为false&lt;/p&gt;
&lt;p&gt;接收方在收到这个字段时，也会收到发送方同时发送的bool变量，根据变量判断这个字段是否有值&lt;/p&gt;
&lt;h3 id=&quot;repeated关键字&quot;&gt;&lt;a href=&quot;#repeated关键字&quot; class=&quot;headerlink&quot; title=&quot;repeated关键字&quot;&gt;&lt;/a&gt;repeated关键字&lt;/h3&gt;&lt;p&gt;重复，另外加了一个count计数变量，用于标明这个字段有多少&lt;/p&gt;
&lt;p&gt;发送方发送的时候，同时发送了count计数变量和这个字段的起始地址&lt;/p&gt;
&lt;p&gt;接收方在接受到数据之后，按照count来解析对应的数据。&lt;/p&gt;</summary>
    
    
    
    <category term="后端" scheme="https://xiaopantongxue816.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="序列化" scheme="https://xiaopantongxue816.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
</feed>
